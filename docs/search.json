[
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "ustc",
    "section": "",
    "text": "https://xuejingkai.github.io/atmos-ustc.github.io/"
  },
  {
    "objectID": "notebooks/相关性散点图.html",
    "href": "notebooks/相关性散点图.html",
    "title": "ustc",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport proplot as plot\nplot.rc['figure.facecolor'] = 'w'\nimport copy \n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.colors import Normalize \nfrom scipy.interpolate import interpn\nfrom scipy.stats import pearsonr\nfrom sklearn.metrics import mean_absolute_percentage_error\n\n# 使用sklearn调用衡量线性回归的MSE 、 RMSE、 MAE、r2\nfrom math import sqrt\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\ndef density_scatter( x , y, ax = None, sort = True, bins = 20,percent=80,metawidth=0.4, **kwargs )   :\n    \"\"\"\n    Scatter plot colored by 2d histogram\n    \"\"\"\n    if ax is None :\n        fig , ax = plt.subplots()\n    data , x_e, y_e = np.histogram2d( x, y, bins = bins, density = True )\n    z = interpn( ( 0.5*(x_e[1:] + x_e[:-1]) , 0.5*(y_e[1:]+y_e[:-1]) ) , data , np.vstack([x,y]).T , method = \"splinef2d\", bounds_error = False)\n\n    #To be sure to plot all data\n    z[np.where(np.isnan(z))] = 0.0\n\n    # Sort the points by density, so that the densest points are plotted last\n    if sort :\n        idx = z.argsort()\n        x, y, z = x[idx], y[idx], z[idx]\n    \n    \n    m=ax.scatter( x, y#c=z\n                 , vmax=np.percentile(z, percent),vmin=0,**kwargs )#vmax=80%\n    \n    if 'cmap' in kwargs:\n    # 包含cmap参数\n        cmap = kwargs['cmap']\n    vmin = np.min(z)\n    vmax = np.max(z)\n    if 'vmin' in kwargs:\n    # 包含cmap参数\n        vmin = kwargs['vmin']    \n    if 'vmax' in kwargs:\n    # 包含cmap参数\n        vmax = kwargs['vmax'] \n        \n    norm = Normalize(vmin = vmin, vmax = vmax)\n    #cbar = ax.colorbar(cm.ScalarMappable(norm = norm,cmap=cmap))\n#     cbar=ax.colorbar(m,loc='r',lw=metawidth)\n#     cbar.ax.set_ylabel('Density')\n\n    return ax,m\n\n\n\n#dsout.interp_like(dsy),dsy)\n#x,y=dsout.interp_like(dsy).values.flatten(),dsy.values.flatten()\n\n\n\ndx=5\ndx2=1\n# 生成随机数据\nnp.random.seed(0)\nn_samples = 100\nx = np.random.rand(n_samples)*10\ny = 1 * x + np.random.randn(n_samples)*1  # y = 2x + 噪声\n\nnan_union = np.isnan(x) + np.isnan(y)\ny=y[~nan_union]\nx=x[~nan_union]\nprint('a')\nR=pearsonr(x,y)[0]\nprint(R)\nprint(\"mean_absolute_error:\", mean_absolute_error(x,y))\nprint(\"mean_squared_error:\", mean_squared_error(x,y))\nprint(\"rmse:\", sqrt(mean_squared_error(x,y)))\nprint(\"r2 score:\", r2_score(x,y))\nmape=mean_absolute_percentage_error(x,y)\nprint(\"mape:\",mape)\n\na\n0.944522569256287\nmean_absolute_error: 0.8623845994287559\nmean_squared_error: 1.0297617241074744\nrmse: 1.0147717596127093\nr2 score: 0.8761081822858403\nmape: 0.37054958340747335\n\n\n\ny\n\narray([ 4.32298520e+00,  8.05272015e+00,  6.49329620e+00,  3.91258814e+00,\n        5.72480019e+00,  8.35483031e+00,  5.55465168e+00,  8.73780517e+00,\n        8.56587498e+00,  4.88886692e+00,  7.51407343e+00,  6.51139427e+00,\n        5.88872059e+00,  1.02326054e+01,  1.06672698e+00,  1.57786617e+00,\n        2.12683995e-01,  1.01120689e+01,  7.90847960e+00,  9.10211085e+00,\n        1.16693341e+01,  6.64382658e+00,  3.34430862e+00,  8.77468847e+00,\n        9.62085358e-03,  8.34283140e+00,  1.01991389e+00,  8.69923436e+00,\n        7.14142524e+00,  5.62713419e+00,  4.51311508e+00,  8.64838155e+00,\n        3.70027764e+00,  7.59440444e+00, -8.01053666e-02,  6.97881137e+00,\n        7.06820919e+00,  6.01432988e+00,  1.00515602e+01,  7.74040966e+00,\n        3.97150454e+00,  3.27091875e+00,  7.27455013e+00,  1.92864061e+00,\n        5.97309929e+00,  6.55674416e+00,  1.66867206e+00,  3.13852671e+00,\n        3.82657827e+00,  4.04456955e+00,  4.93205163e+00,  4.92526433e+00,\n        9.20940572e+00,  1.05227867e+00,  1.45292148e+00,  2.28952847e+00,\n        7.10767407e+00,  2.32461727e+00,  5.05911444e+00,  1.35119441e+00,\n        9.84382437e-02,  1.54314311e+00,  6.72996939e+00,  2.01686095e+00,\n        4.34896839e+00,  4.63173119e+00,  7.29711007e+00,  2.08802905e+00,\n        7.06354166e+00,  4.99399474e-01,  9.69635304e+00,  6.39985474e+00,\n        9.02285606e+00,  5.22201666e+00,  7.29418327e+00, -2.71600364e-01,\n        3.95470555e+00,  1.22034104e-01,  1.81393332e+00,  7.49457145e-01,\n        2.68179934e+00,  6.07216200e+00,  1.59089577e+00,  7.01227244e+00,\n        4.44057902e+00,  3.49825789e+00,  4.23226519e+00, -6.05365989e-01,\n        6.94749475e+00,  9.60990459e+00,  4.10654835e+00,  6.99283145e+00,\n        2.17480924e+00,  6.51224645e+00,  1.85981809e+00,  2.51350814e+00,\n        5.06171968e+00, -4.88474316e-01,  7.83386779e+00,  6.44339210e-02])\n\n\n\n\n\nfontsize=12\nmetawidth=0.5\nxlabel='O3'\nylabel='PM2.5'\nfig,axs=plot.subplots(refwidth=2.5,refheight=2.5)\n\nfig.format(abc=False,suptitlesize=20,xlim=(0,10),ylim=(0,10),xlabel=xlabel\n           ,ylabel=ylabel\n           ,grid=False,xtickminor=False,ytickminor=False,metawidth=metawidth,labelsize=fontsize#,xlabelpad=10\n           ,xlocator=2,ylocator=2)\nax=axs[0]\nax,m=density_scatter(x[::1],y[::1] ,ax=ax, s=10,bins=(500, 500),color='#2f7fc1',alpha=1#'rainbow'\n              ,percent=80 )\n\n\n\n# 拟合线性回归线\nslope, intercept = np.polyfit(x,y, 1)\nx0=np.arange(0,10e16,1e16)\nregression_line = slope * x0 + intercept\n\n\n\n\n# 在图表中标注线性拟合的公式\nequation = f'Y = {slope:.2f}X + {intercept:.2e}'\n#ax.annotate(equation, xy=(x.mean(), y[::10].mean()), fontsize=10, color='r'\n#           ,bbox=dict(boxstyle=\"round,pad=0.3\", edgecolor=\"none\", facecolor=\"white\"))\n\n\nl2=ax.plot(x0, regression_line, color='red',label=equation,lw=1)\n#ax.plot(x0, x0, color='grey',lw=1,linestyle='--')\nax.legend([l2],loc='ul',frameon=False,prop=dict(size=fontsize))\nax.text(0.1,0.8,f'R={R:.2f}'\n        ,fontweight='bold'\n        ,fontsize=fontsize, transform=ax.transAxes)\n# ax.text(0.1,0.7,f'MAPE={mape:.2%}'\n#         ,fontweight='bold'\n#         ,fontsize=fontsize, transform=ax.transAxes)\n\n\n# ax.text(0.9,0.2,f'Daily'\n#         ,fontweight='bold',color='grey',horizontalalignment='right',  # 水平居中\n#         verticalalignment='center'  # 垂直居中\n#         ,fontsize=fontsize, transform=ax.transAxes)\nax.yaxis.offsetText.set_fontsize(fontsize)\nax.xaxis.offsetText.set_fontsize(fontsize)\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfig.format(labelsize=fontsize,ticklabelsize=fontsize,title='',titlesize=fontsize)",
    "crumbs": [
      "Home",
      "画图",
      "plot_相关性散点图"
    ]
  },
  {
    "objectID": "notebooks/国控站点画到地图上.html",
    "href": "notebooks/国控站点画到地图上.html",
    "title": "ustc",
    "section": "",
    "text": "%%time\nimport warnings\n\nimport proplot as plot\nimport sys\nimport glob\nimport cmaps\nimport pandas as pd\nimport numpy as np\nimport salem\nimport xarray as xr\n\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nfrom cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter\nfrom matplotlib import ticker, cm\n\n\nfrom getchinamap.getchinamap import DownloadChmap\nchinamap_engine = DownloadChmap()#(adcode_file='/home/xuejingkai/data/down/AMap_adcode_citycode_20210406.csv')\nprovinces = chinamap_engine.download_country(target='省')\n\n\n\nplt.rcParams['font.sans-serif'] = ['Arial'] \nplt.rcParams['axes.unicode_minus'] = False \n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nplot.rc['figure.facecolor'] = 'white'\n\n&lt;frozen importlib._bootstrap&gt;:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility. Expected 56 from C header, got 64 from PyObject\n\n\nCPU times: user 1.97 s, sys: 1.42 s, total: 3.39 s\nWall time: 8.15 s\n\n\n\n# !unzip -d ./font/Roboto ./font/Roboto.zip\n# !unzip -d ./font/Arial ./font/arial.zip\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import font_manager\n\nimport matplotlib\nmatplotlib.rcParams['pdf.fonttype'] = 42\nmatplotlib.rcParams['ps.fonttype'] = 42\n\n# font_manager.fontManager.addfont('./Arial.ttf')\n# #plt.rcParams['font.sans-serif'] = \"Arial\"\n# plt.rcParams[\"font.family\"] = \"sans-serif\"\n# plt.rcParams['font.sans-serif'] = \"Arial\"\n\n# # plt.rcParams[\"font.family\"] = \"sans-serif\"\n# # plt.rcParams[\"font.sans-serif\"] = 'DejaVu Sans'#[\"Nimbus Sans\"]\n\n\nfrom matplotlib import font_manager\n\nfont_dirs = ['/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/']\nfont_files = font_manager.findSystemFonts(fontpaths=font_dirs)\n\nfor font_file in font_files:\n    print(font_file)\n    font_manager.fontManager.addfont(font_file)\n\n# set font\nplt.rcParams[\"font.family\"] = \"Arial\"\nimport proplot as plot\n\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALBLACKITALIC.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ArialCE.ttf\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/arialceb.ttf\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALLGTITL.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIAL.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIBLK.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ArialMdm.ttf\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALI 1.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALNB.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ArialCEBoldItalic.ttf\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ArialCEItalic.ttf\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ArialMdmItl.ttf\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALN.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALNBI.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ArialCEMTBlack.ttf\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALBD.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALLGT.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALNI.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALBI 1.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALBD 1.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALBI.TTF\n/exports/d4/xuejingkai/atmos/jupyter2/HCHO/plotmapv2/font/Arial/ARIALI.TTF\n\n\n\ntimedt=pd.date_range('20220901','20221001')\n\n\nL=[glob.glob(f'/exports/d4/xuejingkai/down/guokongzhandian/china_sites_{t.strftime(\"%Y%m%d\")}*')[0] for t in timedt]\n\n\n#L=glob.glob(f'/exports/d4/xuejingkai/down/guokongzhandian/china_sites_{timedt[0].strftime(\"%Y%m%d\")}*')\nL=[glob.glob(f'/exports/d4/xuejingkai/down/guokongzhandian/china_sites_{t.strftime(\"%Y%m%d\")}*')[0] for t in timedt]\nL.sort()\nsites=pd.read_excel('/exports/d4/xuejingkai/guokongzhan_nc/sites.xlsx')\nsites.columns=['id','name','city','lon','lat','p']\nsites['lon'] = sites['lon'].replace('-', np.nan)\nsites.dropna(subset=['lon'], inplace=True)\nsites['lat']=sites.lat.astype(float)\n\nD=[]\ntimes=[]\nfor l in L[:]:\n    \n    df=pd.read_csv(l)\n    # 将\"date\"列转换为字符串，并保留8个字符（年月日）\n    #df[\"date\"] = df[\"date\"].astype(str).str[:8]\n\n    # 将\"hour\"列转换为字符串，并保留2个字符（小时）\n    #df[\"hour\"] = df[\"hour\"].astype(str).str.zfill(2)\n\n    # 将\"date\"和\"hour\"列相加，并使用to_datetime函数将其转换为datetime格式\n    df[\"date\"] = pd.to_datetime(df[\"date\"].astype(str).str[:8] + df[\"hour\"].astype(str).str.zfill(2), format=\"%Y%m%d%H\")\n    for n in range(23,24):  #一般是23点的O3是当天的O3_8h_24h\n        try:\n            dfq=df.query(f\"type == 'O3_8h_24h' and hour == {df.hour.max()}\")\n            timedt0=dfq['date']\n            timedt0=pd.to_datetime(timedt0.values[0])\n            d1=dfq.T.reset_index().iloc[3:]\n            #d2.rename({'index':'h'})\n            d1.columns=['id','value']\n            d1['value']=d1.value.astype(float)\n            d2=pd.merge(sites,d1,how='left')\n\n            lat=d2.lat.values\n            lon=d2.lon.values\n            vcd=d2.value.values\n            slat=d2.lat.values\n            slon=d2.lon.values\n            D.append(vcd)\n            times.append(timedt0)\n            print(l)\n        except:\n            pass\n\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220901.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220902.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220903.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220904.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220905.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220906.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220907.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220908.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220909.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220910.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220911.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220912.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220913.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220914.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220915.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220916.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220917.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220918.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220919.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220920.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220921.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220922.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220923.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220924.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220925.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220926.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220927.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220928.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220929.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20220930.csv\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20221001.csv\n\n\n\ndss=xr.DataArray(np.array(D)\n                    ,\n        coords={\n            'time':timedt,#times,#timedt[n1:n2],\n            'point':np.arange(np.array(D).shape[1]),\n\n        },\n        dims=['time','point'])\n\n\ncmap2=plot.Colormap('turbo')\ncmap=cmap2#my_cmap\ncmap\n\n_turbo_copy  underbad over \n\n\n\ndef plot_map(gdf_polygons,ax,lw=1,color='k',linestyle='--',**kwargs):\n    from matplotlib.collections import PatchCollection\n    from descartes import PolygonPatch\n    from shapely.geometry import Point\n    patches = [PolygonPatch(geometry) for geometry in gdf_polygons['geometry']]\n    pc = PatchCollection(patches, facecolor='none', linewidth=lw\n                         , alpha=1,linestyle=linestyle,edgecolors=color,**kwargs)\n    #fig, ax = plot.subplots(figsize=(5,5))\n    ax.add_collection(pc)\ndef plot_map(gdf_polygons,ax,proj,color='k',facecolor='none',linestyle='--',**kwargs):\n    ax.add_geometries([g for g in gdf_polygons['geometry']],facecolor=facecolor,crs=proj,**kwargs)\n    \ndef dwticks(ax,xticks,yticks):\n    from cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter\n    ax.set_xticks(xticks,crs=proj) # set longitude indicators\n\n    ax.set_yticks(yticks, crs=proj)\n    lon_formatter = LongitudeFormatter(zero_direction_label=True,number_format='.0f',degree_symbol='')\n    lat_formatter = LatitudeFormatter(number_format='.0f',degree_symbol='')\n    ax.xaxis.set_major_formatter(lon_formatter)\n    ax.yaxis.set_major_formatter(lat_formatter)\n    ax.grid(False)\n    ax.minorticks_on()\n    \n    ax.xaxis.set_major_locator(plt.MultipleLocator(2))\n    ax.xaxis.set_minor_locator(plt.MultipleLocator(1))\n    \n    ax.yaxis.set_major_locator(plt.MultipleLocator(2))   \n\n    ax.yaxis.set_minor_locator(plt.MultipleLocator(1))\n    \n\n\ndef draw_style(ax):\n    dwticks(ax,xtick,ytick)\n\n    plot_map(eval(place),ax,lw=1,color='k',linestyle='--',zorder=2)\n    #eval(place).boundary.plot(ax=ax,lw=1,color='k',linestyle='--',)\n    \n    \n    ax.tick_params(which='major', width=metawidth, length=4,bottom=True,left=True\n                      )#,right=False,top=False ,labelbottom=False ,labelleft=False )\n    ax.tick_params(labelsize=10, pad=5)  \n    ax.tick_params(which='minor', width=metawidth, length=4*0.6,bottom=True,left=True\n                      )#,right=False,top=False ,labelbottom=False ,labelleft=False )\n    \n    ax.format(lonlim=(bounds2[0],bounds2[2]),latlim=(bounds2[1],bounds2[3])\n             )#,title=place[0].upper()+place[1:],titlesize=15)\n    \ndef dwticks(ax,xticks,yticks):\n    ax.set_xticks(xticks,crs=proj) # set longitude indicators\n\n    ax.set_yticks(yticks, crs=proj)\n    lon_formatter = LongitudeFormatter(zero_direction_label=True,number_format='.0f',degree_symbol='')\n    lat_formatter = LatitudeFormatter(number_format='.0f',degree_symbol='')\n    ax.xaxis.set_major_formatter(lon_formatter)\n    ax.yaxis.set_major_formatter(lat_formatter)\n    ax.grid(False)\n    ax.xaxis.set_major_locator(plt.MultipleLocator(2))\n    \n    ax.yaxis.set_major_locator(plt.MultipleLocator(2))\n    ax.xaxis.set_minor_locator(plt.MultipleLocator(0.5))\n    ax.yaxis.set_minor_locator(plt.MultipleLocator(0.5))    \n    \n    \nlat_begin = 27\nlat_end = 35\nlon_begin = 115\nlon_end = 123\n\n\n\nproj=plot.Proj('cyl')\n\nmetawidth=0.6\nticklabelpad=5\nytick=np.arange(lat_begin,lat_end+1,2)\nxtick=np.arange(lon_begin,lon_end+1,2)\n\n\n\nimport matplotlib as mpl\n#bounds=[n for n in np.arange(0.02,0.1,0.01)]+[n for n in np.arange(0.1,1,0.2)]\n#bounds+=[n for n in np.arange(1,10,2)]\n#bounds=np.array(bounds)*1e16\nbounds = np.array([0.03,0.05,0.06,0.08,0.1,0.2,0.3,0.4,0.5,0.8,1,2,3,4,5])*1e16\nbounds = np.array([0,0.05,0.06,0.1,0.2,0.3,0.4,0.5,0.8,1,2,3])*100#e16\nbounds = np.arange(20,202,2)\nnorm = mpl.colors.BoundaryNorm(bounds, cmap.N, extend='both')\n\nplt.rcParams['hatch.linewidth'] = 0.1\nproj=plot.Proj('cyl')\nlabelsize=10\n\n\n\nfig,axs=plot.subplots([ [1,2,3],\n\n                        \n                        #[6,6,5],\n                            ],proj=proj#proj=[proj,'cartesian']\n                      ,refwidth=3,share=False)\n\nfig.format(abc=True,abcloc='l',abcsize=15,metawidth=metawidth)\n\n\n\n\n\nvmax=3e16#2e15\nvmin=0#-2e15\n\nlevels=51\nstyle=np.linspace(vmin, vmax, num=levels)/1e16\n\n\nax=axs[0]\nm=ax.scatter(slon,slat,c=dss.loc['20220902'],s=10,cmap=cmap,norm=norm,extend='neither',zorder=3\n                ,levels=50)\n\n\n\n# ax=axs[1]\n# m=ax.pcolormesh(dsUSTC['pred_MDA8O3'][0].salem.roi(shape=provinces),levels=50,norm=norm,vmax=200,vmin=20,cmap=cmap)\n# #ax.colorbar(m)\n\n\n# ax=axs[2]\n# m=ax.pcolormesh(dsTAP.M8H_O3,levels=50,norm=norm,vmax=200,vmin=20,cmap=cmap)\nfig.colorbar(m,locator=np.arange(0,200,20))\n\nfor ax in axs:\n    plot_map(provinces,ax=ax,proj=proj,lw=0.5,color='k',linestyle='--',)\n    #ax.format(suptitle='NH3 from 2008-2020')#,title='NH3 total columns ')\n    dwticks(ax,xtick,ytick)\n    \n    ax.tick_params(which='major', width=metawidth, length=5,bottom=True,left=True#,direction='in'\n                      ,right=False,top=False )#,labelbottom=False ,labelleft=False )\n    ax.tick_params(labelsize=10, pad=5) \n    \n    \n    ax.tick_params(which='minor', width=metawidth*0.6, length=3,bottom=True,left=True#,direction='in'\n                      ,right=False,top=False )#,labelbottom=False ,labelleft=False )\n    ax.tick_params(labelsize=10, pad=5) \n\n\n    ax.format(coast=True,grid=False,reso='med',labels=False,lonlim=(lon_begin,lon_end),latlim=(lat_begin,lat_end)\n           #,suptitle='NH3 annual average'\n           ,suptitlesize=15,latlocator=ytick,lonlocator=xtick,#tickslabelpad=ticklabelpad,\n          metawidth=metawidth)\n\naxs.format(titlesize=15)\n# fig.savefig('fig/space.jpg',dpi=1000)\n# fig.savefig('fig/space.eps',dpi=1000)\n# fig.savefig('fig/space.pdf',dpi=1000)\n\nplt.show()\nplt.close()",
    "crumbs": [
      "Home",
      "画图",
      "plot_国控点臭氧"
    ]
  },
  {
    "objectID": "notebooks/wrf_extract_wind.html",
    "href": "notebooks/wrf_extract_wind.html",
    "title": "ustc",
    "section": "",
    "text": "import salem \nimport xarray as xr\nimport pandas as pd\n#import xesmf as xe\nimport matplotlib.pyplot as plt\nimport glob\nimport numpy as np\n\n&lt;frozen importlib._bootstrap&gt;:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility. Expected 56 from C header, got 64 from PyObject\n\n\n\nds=xr.open_dataset('/exports/d1/wrf_only_daily/fnl1.0/2019M01/2019010100_physical_0.nc')#.U[16,0,].values\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:   (Time: 24, south_north: 430, west_east: 600, bottom_top: 44,\n               west_east_stag: 601, south_north_stag: 431, ncl7: 24, ncl8: 44,\n               ncl9: 430, ncl10: 600)\nDimensions without coordinates: Time, south_north, west_east, bottom_top,\n                                west_east_stag, south_north_stag, ncl7, ncl8,\n                                ncl9, ncl10\nData variables: (12/26)\n    Times     (Time) |S19 ...\n    xlat      (south_north, west_east) float32 ...\n    xlon      (south_north, west_east) float32 ...\n    height    (Time, bottom_top, south_north, west_east) float32 ...\n    pressure  (Time, bottom_top, south_north, west_east) float32 ...\n    pblh      (Time, south_north, west_east) float32 ...\n    ...        ...\n    wdir      (Time, bottom_top, south_north, west_east) float32 ...\n    wspd      (Time, bottom_top, south_north, west_east) float32 ...\n    wd10      (Time, south_north, west_east) float32 ...\n    ws10      (Time, south_north, west_east) float32 ...\n    dens      (ncl7, ncl8, ncl9, ncl10) float32 ...\n    psfc      (Time, south_north, west_east) float32 ...xarray.DatasetDimensions:Time: 24south_north: 430west_east: 600bottom_top: 44west_east_stag: 601south_north_stag: 431ncl7: 24ncl8: 44ncl9: 430ncl10: 600Coordinates: (0)Data variables: (26)Times(Time)|S19...[24 values with dtype=|S19]xlat(south_north, west_east)float32...FieldType :104MemoryOrder :XY description :LATITUDE, SOUTH IS NEGATIVEunits :degree_northstagger :coordinates :XLONG XLAT[258000 values with dtype=float32]xlon(south_north, west_east)float32...FieldType :104MemoryOrder :XY description :LONGITUDE, WEST IS NEGATIVEunits :degree_eaststagger :coordinates :XLONG XLAT[258000 values with dtype=float32]height(Time, bottom_top, south_north, west_east)float32...FieldType :104MemoryOrder :XYZdescription :Heightunits :mstagger : coordinates :XLONG XLAT[272448000 values with dtype=float32]pressure(Time, bottom_top, south_north, west_east)float32...FieldType :104MemoryOrder :XYZdescription :Pressureunits :hPastagger :coordinates :XLONG XLAT XTIME[272448000 values with dtype=float32]pblh(Time, south_north, west_east)float32...FieldType :104MemoryOrder :XY description :PBL HEIGHTunits :mstagger :coordinates :XLONG XLAT XTIME[6192000 values with dtype=float32]tempc(Time, bottom_top, south_north, west_east)float32...description :Temperaturecoordinates :XLONG XLAT XTIMEstagger :units :CMemoryOrder :XYZFieldType :104[272448000 values with dtype=float32]rh(Time, bottom_top, south_north, west_east)float32...description :Relative Humidityunits :%coordinates :XLONG XLAT XTIMEstagger :MemoryOrder :XYZFieldType :104[272448000 values with dtype=float32]rh2(Time, south_north, west_east)float32...description :2m Relative Humidityunits :%coordinates :XLONG XLAT XTIMEstagger :MemoryOrder :XY FieldType :104[6192000 values with dtype=float32]t2(Time, south_north, west_east)float32...FieldType :104MemoryOrder :XY description :TEMP at 2 Munits :Kstagger :coordinates :XLONG XLAT XTIME[6192000 values with dtype=float32]t(Time, bottom_top, south_north, west_east)float32...FieldType :104MemoryOrder :XYZdescription :perturbation potential temperature theta-t0units :Kstagger :coordinates :XLONG XLAT XTIME[272448000 values with dtype=float32]ua(Time, bottom_top, south_north, west_east)float32...coordinates :XLONG XLATstagger : units :m s-1description :x-wind componentMemoryOrder :XYZFieldType :104[272448000 values with dtype=float32]u(Time, bottom_top, south_north, west_east)float32...coordinates :XLONG XLATstagger : MemoryOrder :XYZFieldType :104units :m/sdescription :u,v met velocity[272448000 values with dtype=float32]U(Time, bottom_top, south_north, west_east_stag)float32...FieldType :104MemoryOrder :XYZdescription :x-wind componentunits :m s-1stagger :Xcoordinates :XLONG_U XLAT_U XTIME[272902080 values with dtype=float32]u10(Time, south_north, west_east)float32...FieldType :104MemoryOrder :XY description :U at 10 Munits :m s-1stagger :coordinates :XLONG XLAT XTIME[6192000 values with dtype=float32]va(Time, bottom_top, south_north, west_east)float32...coordinates :XLONG XLATstagger : units :m s-1description :y-wind componentMemoryOrder :XYZFieldType :104[272448000 values with dtype=float32]v(Time, bottom_top, south_north, west_east)float32...coordinates :XLONG XLATstagger : MemoryOrder :XYZFieldType :104units :m/sdescription :u,v met velocity[272448000 values with dtype=float32]V(Time, bottom_top, south_north_stag, west_east)float32...FieldType :104MemoryOrder :XYZdescription :y-wind componentunits :m s-1stagger :Ycoordinates :XLONG_V XLAT_V XTIME[273081600 values with dtype=float32]v10(Time, south_north, west_east)float32...FieldType :104MemoryOrder :XY description :V at 10 Munits :m s-1stagger :coordinates :XLONG XLAT XTIME[6192000 values with dtype=float32]wa(Time, bottom_top, south_north, west_east)float32...coordinates :XLONG XLATstagger : units :m s-1description :z-wind componentMemoryOrder :XYZFieldType :104[272448000 values with dtype=float32]wdir(Time, bottom_top, south_north, west_east)float32...FieldType :104MemoryOrder :XYZunits :m s-1stagger : coordinates :XLONG XLATdescription :grid relative wind speed and direction[272448000 values with dtype=float32]wspd(Time, bottom_top, south_north, west_east)float32...FieldType :104MemoryOrder :XYZunits :m s-1stagger : coordinates :XLONG XLATdescription :grid relative wind speed and direction[272448000 values with dtype=float32]wd10(Time, south_north, west_east)float32...coordinates :XLONG XLAT XTIMEstagger :units :m s-1MemoryOrder :XY FieldType :104description :10m grid relative wind speed and direction[6192000 values with dtype=float32]ws10(Time, south_north, west_east)float32...coordinates :XLONG XLAT XTIMEstagger :units :m s-1MemoryOrder :XY FieldType :104description :10m grid relative wind speed and direction[6192000 values with dtype=float32]dens(ncl7, ncl8, ncl9, ncl10)float32...[272448000 values with dtype=float32]psfc(Time, south_north, west_east)float32...FieldType :104MemoryOrder :XY description :SFC PRESSUREunits :Pastagger :coordinates :XLONG XLAT XTIME[6192000 values with dtype=float32]Indexes: (0)Attributes: (0)\n\n\n\n'''30.774N, 90.988E，这个经纬度\n2019年5月1日到7月9日\n早晨8点到晚上20点\n高度200米范围内\n'''\n\n'30.774N, 90.988E，这个经纬度\\n2019年5月1日到7月9日\\n早晨8点到晚上20点\\n高度200米范围内\\n'\n\n\n\ndef nearest_position( stn_lat, stn_lon, lat2d, lon2d):\n    \"\"\"获取最临近格点坐标索引\n    stn_lat  : 站点纬度\n    stn_lon  : 站点经度\n    lat2d    : numpy.ndarray网格二维经度坐标\n    lon2d    : numpy.ndarray网格二维纬度坐标\n    Return: (y_index, x_index)\n    \"\"\"\n    difflat = stn_lat - lat2d;\n    difflon = stn_lon - lon2d;\n    rad = np.multiply(difflat,difflat)+np.multiply(difflon , difflon)\n    aa=np.where(rad==np.min(rad))\n    ind=np.squeeze(np.array(aa))\n    return tuple(ind)\nlat2d=ds.xlat\nlon2d=ds.xlon\nstn_lat=30.774\nstn_lon=90.988\nid1,id2=nearest_position( stn_lat, stn_lon, lat2d, lon2d)\n\n\nds.xlon[id1,id2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'xlon' ()&gt;\narray(90.98419, dtype=float32)\nAttributes:\n    FieldType:    104\n    MemoryOrder:  XY \n    description:  LONGITUDE, WEST IS NEGATIVE\n    units:        degree_east\n    stagger:      \n    coordinates:  XLONG XLATxarray.DataArray'xlon'90.98array(90.98419, dtype=float32)Coordinates: (0)Indexes: (0)Attributes: (6)FieldType :104MemoryOrder :XY description :LONGITUDE, WEST IS NEGATIVEunits :degree_eaststagger :coordinates :XLONG XLAT\n\n\n\nds.height[0,:,id1,id2].load().values.astype(int)&lt;200\n\narray([ True,  True,  True,  True,  True,  True,  True,  True, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False])\n\n\n\nds.xlat[id1,id2]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'xlat' ()&gt;\narray(30.807167, dtype=float32)\nAttributes:\n    FieldType:    104\n    MemoryOrder:  XY \n    description:  LATITUDE, SOUTH IS NEGATIVE\n    units:        degree_north\n    stagger:      \n    coordinates:  XLONG XLATxarray.DataArray'xlat'30.81array(30.807167, dtype=float32)Coordinates: (0)Indexes: (0)Attributes: (6)FieldType :104MemoryOrder :XY description :LATITUDE, SOUTH IS NEGATIVEunits :degree_northstagger :coordinates :XLONG XLAT\n\n\n\n\n\ndssel=ds[['Times','u','v','height','xlon','xlat','bottom_top']].sel(south_north=id1,west_east=id2,bottom_top=np.arange(7))\n\n# 将字节串转换为普通字符串\nstr_array = dssel['Times'].values.astype(str)\n\n# 将字符串转换为datetime\ndatetime_array = pd.to_datetime(str_array, format='%Y-%m-%d_%H:%M:%S')\n#datetime_array\n\ndssel['Time']=datetime_array+pd.Timedelta('8H')#=pd.date_range('20220821T00','20220821T23',freq='1H')+pd.Timedelta('8H')\ndssel#['Time']\n\ndssel=dssel.sel(Time=dssel.Time.dt.hour.isin(np.arange(8,21,1)))\ndssel['wind']=np.sqrt(dssel.u**2+dssel.v**2)\ndssel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:     (Time: 13, bottom_top: 7)\nCoordinates:\n  * bottom_top  (bottom_top) int64 0 1 2 3 4 5 6\n  * Time        (Time) datetime64[ns] 2019-01-01T08:00:00 ... 2019-01-01T20:0...\nData variables:\n    Times       (Time) |S19 b'2019-01-01_00:00:00' ... b'2019-01-01_12:00:00'\n    u           (Time, bottom_top) float32 0.5531 0.8811 1.041 ... 3.903 4.16\n    v           (Time, bottom_top) float32 1.464 1.02 0.8258 ... -0.2543 -0.4743\n    height      (Time, bottom_top) float32 ...\n    xlon        float32 90.98\n    xlat        float32 30.81\n    wind        (Time, bottom_top) float32 1.565 1.348 1.328 ... 3.911 4.187xarray.DatasetDimensions:Time: 13bottom_top: 7Coordinates: (2)bottom_top(bottom_top)int640 1 2 3 4 5 6array([0, 1, 2, 3, 4, 5, 6])Time(Time)datetime64[ns]2019-01-01T08:00:00 ... 2019-01-...array(['2019-01-01T08:00:00.000000000', '2019-01-01T09:00:00.000000000',\n       '2019-01-01T10:00:00.000000000', '2019-01-01T11:00:00.000000000',\n       '2019-01-01T12:00:00.000000000', '2019-01-01T13:00:00.000000000',\n       '2019-01-01T14:00:00.000000000', '2019-01-01T15:00:00.000000000',\n       '2019-01-01T16:00:00.000000000', '2019-01-01T17:00:00.000000000',\n       '2019-01-01T18:00:00.000000000', '2019-01-01T19:00:00.000000000',\n       '2019-01-01T20:00:00.000000000'], dtype='datetime64[ns]')Data variables: (7)Times(Time)|S19b'2019-01-01_00:00:00' ... b'201...array([b'2019-01-01_00:00:00', b'2019-01-01_01:00:00', b'2019-01-01_02:00:00',\n       b'2019-01-01_03:00:00', b'2019-01-01_04:00:00', b'2019-01-01_05:00:00',\n       b'2019-01-01_06:00:00', b'2019-01-01_07:00:00', b'2019-01-01_08:00:00',\n       b'2019-01-01_09:00:00', b'2019-01-01_10:00:00', b'2019-01-01_11:00:00',\n       b'2019-01-01_12:00:00'], dtype='|S19')u(Time, bottom_top)float320.5531 0.8811 1.041 ... 3.903 4.16coordinates :XLONG XLATstagger : MemoryOrder :XYZFieldType :104units :m/sdescription :u,v met velocityarray([[0.553104, 0.881084, 1.040602, 1.103072, 1.129773, 1.130292, 1.183324],\n       [0.964592, 1.274832, 1.392733, 1.429729, 1.454372, 1.465381, 1.533878],\n       [1.63442 , 1.944667, 2.121917, 2.176981, 2.202581, 2.228051, 2.308977],\n       [2.448273, 2.724256, 2.812196, 2.856564, 2.88804 , 2.914475, 2.988829],\n       [3.33203 , 3.708119, 3.824973, 3.878677, 3.914569, 3.941333, 4.003284],\n       [4.036066, 4.538952, 4.69962 , 4.785337, 4.855104, 4.934896, 5.093209],\n       [4.502602, 5.150357, 5.415547, 5.689705, 5.987775, 6.177474, 6.309227],\n       [5.21687 , 5.770557, 6.047645, 6.259041, 6.480338, 6.704912, 6.954165],\n       [5.221683, 5.750551, 6.008654, 6.201648, 6.402023, 6.581516, 6.82193 ],\n       [4.872368, 5.320437, 5.524746, 5.67529 , 5.852551, 6.044238, 6.316938],\n       [4.542207, 4.862448, 4.945309, 4.989773, 5.055711, 5.158739, 5.446548],\n       [4.080195, 4.355675, 4.433913, 4.475247, 4.519207, 4.579449, 4.764032],\n       [3.534902, 3.746383, 3.795099, 3.818999, 3.844995, 3.903072, 4.160403]],\n      dtype=float32)v(Time, bottom_top)float321.464 1.02 ... -0.2543 -0.4743coordinates :XLONG XLATstagger : MemoryOrder :XYZFieldType :104units :m/sdescription :u,v met velocityarray([[ 1.463655,  1.019787,  0.825754,  0.741998,  0.831956,  0.875573,\n         1.161229],\n       [ 1.466759,  1.001516,  0.783453,  0.728659,  0.816829,  0.925214,\n         1.181499],\n       [ 1.010277,  1.147648,  1.058269,  0.976209,  1.029346,  1.143649,\n         1.351712],\n       [ 0.793282,  0.976349,  1.099872,  1.194597,  1.294475,  1.391636,\n         1.553144],\n       [ 0.930586,  1.173519,  1.339196,  1.450626,  1.550557,  1.641033,\n         1.745526],\n       [ 1.149641,  1.429646,  1.573646,  1.650239,  1.70197 ,  1.740982,\n         1.788359],\n       [ 1.654824,  1.968094,  2.05387 ,  2.023285,  2.000641,  1.992272,\n         1.982667],\n       [ 1.483944,  1.534763,  1.520095,  1.499005,  1.478325,  1.460454,\n         1.430628],\n       [ 0.695689,  0.714904,  0.696775,  0.679659,  0.665062,  0.647209,\n         0.622208],\n       [ 0.295281,  0.284715,  0.249341,  0.218475,  0.191433,  0.165687,\n         0.128111],\n       [-0.073212, -0.110508, -0.157162, -0.197329, -0.240552, -0.286502,\n        -0.362465],\n       [-0.236606, -0.274156, -0.310775, -0.338886, -0.36398 , -0.400663,\n        -0.471368],\n       [-0.075162, -0.113123, -0.149045, -0.172224, -0.200367, -0.254309,\n        -0.4743  ]], dtype=float32)height(Time, bottom_top)float32...FieldType :104MemoryOrder :XYZdescription :Heightunits :mstagger : coordinates :XLONG XLAT[91 values with dtype=float32]xlon()float3290.98FieldType :104MemoryOrder :XY description :LONGITUDE, WEST IS NEGATIVEunits :degree_eaststagger :coordinates :XLONG XLATarray(90.98419, dtype=float32)xlat()float3230.81FieldType :104MemoryOrder :XY description :LATITUDE, SOUTH IS NEGATIVEunits :degree_northstagger :coordinates :XLONG XLATarray(30.807167, dtype=float32)wind(Time, bottom_top)float321.565 1.348 1.328 ... 3.911 4.187array([[1.5646762, 1.3476928, 1.3284281, 1.3294095, 1.4030466, 1.4297508,\n        1.6579227],\n       [1.7555114, 1.6211826, 1.597968 , 1.6047021, 1.6680554, 1.7330215,\n        1.9361615],\n       [1.9214547, 2.2580583, 2.3711731, 2.3858395, 2.4312372, 2.5044253,\n        2.6755373],\n       [2.5735843, 2.8939295, 3.0196304, 3.0962908, 3.1648765, 3.2296772,\n        3.3682866],\n       [3.4595394, 3.8893816, 4.0526366, 4.141069 , 4.210472 , 4.2693205,\n        4.3672814],\n       [4.1966057, 4.7587786, 4.956086 , 5.061891 , 5.144778 , 5.232993 ,\n        5.398056 ],\n       [4.797069 , 5.5135803, 5.791937 , 6.038744 , 6.3131623, 6.490789 ,\n        6.6134195],\n       [5.4238205, 5.971166 , 6.2357597, 6.4360404, 6.646821 , 6.8621254,\n        7.099797 ],\n       [5.2678227, 5.794819 , 6.0489187, 6.23878  , 6.4364743, 6.6132617,\n        6.850246 ],\n       [4.881307 , 5.32805  , 5.5303698, 5.679493 , 5.855681 , 6.0465083,\n        6.3182373],\n       [4.5427966, 4.8637033, 4.9478054, 4.9936733, 5.061431 , 5.166688 ,\n        5.458595 ],\n       [4.0870495, 4.364294 , 4.444791 , 4.48806  , 4.5338416, 4.596943 ,\n        4.787295 ],\n       [3.535701 , 3.7480907, 3.798025 , 3.8228803, 3.8502126, 3.9113476,\n        4.187351 ]], dtype=float32)Indexes: (2)bottom_topPandasIndexPandasIndex(Int64Index([0, 1, 2, 3, 4, 5, 6], dtype='int64', name='bottom_top'))TimePandasIndexPandasIndex(DatetimeIndex(['2019-01-01 08:00:00', '2019-01-01 09:00:00',\n               '2019-01-01 10:00:00', '2019-01-01 11:00:00',\n               '2019-01-01 12:00:00', '2019-01-01 13:00:00',\n               '2019-01-01 14:00:00', '2019-01-01 15:00:00',\n               '2019-01-01 16:00:00', '2019-01-01 17:00:00',\n               '2019-01-01 18:00:00', '2019-01-01 19:00:00',\n               '2019-01-01 20:00:00'],\n              dtype='datetime64[ns]', name='Time', freq=None))Attributes: (0)\n\n\n\nL=glob.glob('/exports/d1/wrf_only_daily/fnl1.0/2019M0[5-7]/*_physical_0.nc')\nL.sort()\nL\n\n['/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019053000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019053100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019063000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072100_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072200_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072300_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072400_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072500_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072600_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072700_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072800_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072900_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019073000_physical_0.nc',\n '/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019073100_physical_0.nc']\n\n\n\nDS=[]\nfor l in L:\n    ds=xr.open_dataset(l)\n    \n    \n\n    dssel=ds[['Times','u','v','height','xlon','xlat','bottom_top']].sel(south_north=id1,west_east=id2,bottom_top=np.arange(7))\n\n    # 将字节串转换为普通字符串\n    str_array = dssel['Times'].values.astype(str)\n\n    # 将字符串转换为datetime\n    datetime_array = pd.to_datetime(str_array, format='%Y-%m-%d_%H:%M:%S')\n    #datetime_array\n\n    dssel['Time']=datetime_array+pd.Timedelta('8H')#=pd.date_range('20220821T00','20220821T23',freq='1H')+pd.Timedelta('8H')\n    dssel#['Time']\n\n    dssel=dssel.sel(Time=dssel.Time.dt.hour.isin(np.arange(8,21,1)))\n    dssel['wind']=np.sqrt(dssel.u**2+dssel.v**2)\n    dssel.load()\n    \n    DS.append(dssel)\n    print(l)\n\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019050900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019051900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019052900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019053000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M05/2019053100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019060900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019061900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019062900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M06/2019063000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019070900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019071900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072100_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072200_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072300_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072400_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072500_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072600_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072700_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072800_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019072900_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019073000_physical_0.nc\n/exports/d1/wrf_only_daily/fnl1.0/2019M07/2019073100_physical_0.nc\n\n\n\nDS2=xr.concat(DS,dim='Time')\n\n\nDS2.to_dataframe().reset_index().to_csv('wind.csv')",
    "crumbs": [
      "Home",
      "画图",
      "extract_wrf_站点wind"
    ]
  },
  {
    "objectID": "notebooks/ustc_plot_Hefeimap.html",
    "href": "notebooks/ustc_plot_Hefeimap.html",
    "title": "ustc",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\nimport proplot as plot\n\nimport cmaps\ncmaps.MPL_gnuplot\n\nMPL_gnuplot  underbad over \n\n\n\ndata=np.load('aver_01_15_00.npy')\ndata.max()#.shapDe\nds=np.load('./x16_lat_lon_v6(1).npy')\nds\n\narray([[[ 31.5911417 ,  31.59109892,  31.59105614, ...,  31.53650829,\n          31.53646551,  31.53642273],\n        [ 31.59171138,  31.59166859,  31.59162581, ...,  31.53707756,\n          31.53703478,  31.536992  ],\n        [ 31.59228105,  31.59223827,  31.59219548, ...,  31.53764683,\n          31.53760405,  31.53756127],\n        ...,\n        [ 32.3186162 ,  32.31857302,  32.31852983, ...,  32.26346562,\n          32.26342243,  32.26337925],\n        [ 32.31918588,  32.31914269,  32.3190995 , ...,  32.26403489,\n          32.2639917 ,  32.26394852],\n        [ 32.31975555,  32.31971237,  32.31966918, ...,  32.26460416,\n          32.26456097,  32.26451778]],\n\n       [[116.84163475, 116.84230282, 116.8429709 , ..., 117.69476409,\n         117.69543216, 117.69610023],\n        [116.84168248, 116.84235056, 116.84301864, ..., 117.69481759,\n         117.69548566, 117.69615374],\n        [116.84173022, 116.8423983 , 116.84306638, ..., 117.69487109,\n         117.69553917, 117.69620725],\n        ...,\n        [116.9025897 , 116.90326354, 116.90393738, ..., 117.76308121,\n         117.76375505, 117.76442889],\n        [116.90263743, 116.90331128, 116.90398512, ..., 117.76313471,\n         117.76380855, 117.7644824 ],\n        [116.90268517, 116.90335901, 116.90403286, ..., 117.76318821,\n         117.76386206, 117.7645359 ]]])\n\n\n\nfrom matplotlib.image import imread\nfrom matplotlib.colors import LinearSegmentedColormap\ncolors_hex = [\n    \n    \"#570d0e\",\n\n    #\"#b01f24\",\n\n    \"#ec1f24\",\n    \"#ef4923\",\n\n    \"#ffc509\",\n    #\"#f4e911\",\n\n    \"#a7d280\",\n    \"#81cbba\",\n    \"#5ecbf4\",\n    \"#85d4f2\",\n    #\"#a8dff4\",\n    #\"#d2edf8\",\n    #\"#ffffff\"\n    #'#dedede'\n    \n    \n]\nmy_cmap = LinearSegmentedColormap.from_list('my_cmap', colors_hex[::-1], N=256)\nmy_cmap\n\nmy_cmap  underbad over \n\n\n\n\nimport contextily as cx\nfig,ax=plot.subplots(refwidth=5,proj=plot.Proj('cyl'))\nfig.format(lonlim=(116.95,117.6),latlim=(31.65,32.15),grid=False)\ncx.add_basemap(ax,crs=plot.Proj('cyl'), \n               source='https://a.tile.thunderforest.com/mobile-atlas/{z}/{x}/{y}.png?apikey=41f4f936f1d148f69cbd100812875c88'\n               #source=cx.providers.CartoDB.Positron#cx.providers.Stamen.TonerLite\n              # cx.providers.CartoDB.Positron\n               #source=cx.providers.CartoDB.PositronNoLabels\n                ,attribution_size=6\n               ,attribution=False\n              )\nax.set_axis_off()\n\nm=ax.pcolormesh(ds[1],ds[0],data,cmap=my_cmap#cmaps.MPL_gnuplot\n                ,levels=100,vmin=7.5,vmax=11,alpha=0.9)\nm=ax.pcolormesh([[0]],cmap=my_cmap#cmaps.MPL_gnuplot\n                ,levels=100,vmin=7.5,vmax=11,alpha=1)\nax.colorbar(m,locator=np.arange(7,12,0.5))\nax.grid(False)\n#fig.savefig('a.jpg')\n\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:406: UserWarning: The `map_projection` keyword argument is deprecated, use `projection` to instantiate a GeoAxes instead.\n  warnings.warn(\"The `map_projection` keyword argument is \"\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:1785: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n  result = super().pcolormesh(*args, **kwargs)\n\n\n\n\n\n\n\n\n\n\nfrom matplotlib.image import imread\nfrom matplotlib.colors import LinearSegmentedColormap\ncolors_hex = [\n    \n    \"#570d0e\",\n\n    #\"#b01f24\",\n\n    \"#ec1f24\",\n    \"#ef4923\",\n\n    \"#ffc509\",\n    #\"#f4e911\",\n\n    \"#a7d280\",\n    \"#81cbba\",\n    #\"#5ecbf4\",\n    #\"#85d4f2\",\n    #\"#a8dff4\",\n    #\"#d2edf8\",\n    #\"#ffffff\"\n    #'#dedede',\n    'lightgrey',\n    #'w'\n    \n    \n]\nmy_cmap = LinearSegmentedColormap.from_list('my_cmap', colors_hex[::-1], N=256)\nmy_cmap\n\nmy_cmap  underbad over \n\n\n\n\nimport contextily as cx\nfig,ax=plot.subplots(refwidth=5,proj=plot.Proj('cyl'))\nfig.format(lonlim=(116.95,117.6),latlim=(31.65,32.15),grid=False)\ncx.add_basemap(ax,crs=plot.Proj('cyl'), \n               #source=cx.providers.CartoDB.Positron#cx.providers.Stamen.TonerLite\n              # cx.providers.CartoDB.Positron\n               #source=cx.providers.CartoDB.PositronNoLabels\n                attribution_size=6\n               ,attribution=False\n              )\nax.set_axis_off()\n\nm=ax.pcolormesh(ds[1],ds[0],data,cmap=my_cmap#cmaps.MPL_gnuplot\n                ,levels=100,vmin=7.5,vmax=11,alpha=0.8)\nm=ax.pcolormesh([[0]],cmap=my_cmap#cmaps.MPL_gnuplot\n                ,levels=100,vmin=7.5,vmax=11,alpha=1)\nax.colorbar(m,locator=np.arange(7,12,0.5))\nax.grid(False)\n#fig.savefig('a.jpg')\n\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:406: UserWarning: The `map_projection` keyword argument is deprecated, use `projection` to instantiate a GeoAxes instead.\n  warnings.warn(\"The `map_projection` keyword argument is \"\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:1785: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n  result = super().pcolormesh(*args, **kwargs)\n\n\n\n\n\n\n\n\n\n\nfrom img2cmap import ImageConverter\n\n# Can be a local file or URL\nconverter = ImageConverter(\"./微信图片_20240625201608.png\")\ncmap = converter.generate_cmap(n_colors=30, palette_name=\"south_beach_sunset\", random_state=42)\n\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/sklearn/cluster/_kmeans.py:1930: FutureWarning: The default value of `n_init` will change from 3 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n  super()._check_params_vs_input(X, default_n_init=3)\n\n\n\ncmap#.colors[:40]\n\nsouth_beach_sunset  underbad over \n\n\n\nfrom matplotlib.image import imread\nfrom matplotlib.colors import LinearSegmentedColormap\ncolors_hex = [\n    \n    \n    \n    \n]\nmy_cmap = LinearSegmentedColormap.from_list('my_cmap', cmap.colors[:23][::-1], N=256)\nmy_cmap\n\nmy_cmap  underbad over \n\n\n\n\nimport contextily as cx\nfig,ax=plot.subplots(refwidth=5,proj=plot.Proj('cyl'))\nfig.format(lonlim=(116.95,117.6),latlim=(31.65,32.15),grid=False)\ncx.add_basemap(ax,crs=plot.Proj('cyl'), \n               #source=cx.providers.CartoDB.Positron#cx.providers.Stamen.TonerLite\n              # cx.providers.CartoDB.Positron\n               #source=cx.providers.CartoDB.PositronNoLabels\n                attribution_size=6\n               ,attribution=False\n              )\nax.set_axis_off()\n\nm=ax.pcolormesh(ds[1],ds[0],data,cmap='jet'#cmaps.MPL_gnuplot\n                ,levels=100,vmin=8,vmax=11,alpha=0.4)\nm=ax.pcolormesh([[0]],cmap='jet'#cmaps.MPL_gnuplot\n                ,levels=100,vmin=8,vmax=11,alpha=1)\nax.colorbar(m,locator=np.arange(7,12,0.5))\nax.grid(False)\n#fig.savefig('a.jpg')\n\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:406: UserWarning: The `map_projection` keyword argument is deprecated, use `projection` to instantiate a GeoAxes instead.\n  warnings.warn(\"The `map_projection` keyword argument is \"\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:1785: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n  result = super().pcolormesh(*args, **kwargs)\n\n\n\n\n\n\n\n\n\n\nfrom matplotlib.image import imread\nfrom matplotlib.colors import LinearSegmentedColormap\n\ncmap2=plot.Colormap('turbo')\ncmap2\n\nll=[#'w',\n   # cmap2.to_listed(9).colors[1:]\n\n\n\n\n   ]+cmap2.to_listed(9).colors[1:]\n\nmy_cmap = LinearSegmentedColormap.from_list('my_cmap', ll, N=256)\nmy_cmap\n\nll=[#'w',\n    #cmap2.to_listed(9).colors[1:]\n\n#\"#1d3654\"\n\n\n   ]+cmap2.to_listed(9*8).colors[5:10]\n\nmy_cmap2 = LinearSegmentedColormap.from_list('my_cmap', ll, N=256)\nmy_cmap2\n\n\nmy_cmap3=plot.Colormap(my_cmap2,my_cmap,ratios=(1,6))\nmy_cmap3\n\n/tmp/ipykernel_160153/4059391154.py:13: ProplotWarning: 'to_listed' was deprecated in version 0.8 and will be removed in a future release. Please use 'to_discrete' instead.\n  ]+cmap2.to_listed(9).colors[1:]\n/tmp/ipykernel_160153/4059391154.py:24: ProplotWarning: 'to_listed' was deprecated in version 0.8 and will be removed in a future release. Please use 'to_discrete' instead.\n  ]+cmap2.to_listed(9*8).colors[5:10]\n\n\n_my_cmap_my_cmap  underbad over \n\n\n\n\nimport contextily as cx\nfig,ax=plot.subplots(refwidth=5,proj=plot.Proj('cyl'))\nfig.format(lonlim=(116.95,117.6),latlim=(31.65,32.15),grid=False)\ncx.add_basemap(ax,crs=plot.Proj('cyl'), \n               #source=cx.providers.CartoDB.Positron#cx.providers.Stamen.TonerLite\n              # cx.providers.CartoDB.Positron\n               #source=cx.providers.CartoDB.PositronNoLabels\n                attribution_size=6\n               ,attribution=False\n              )\nax.set_axis_off()\n\nm=ax.pcolormesh(ds[1],ds[0],data,cmap=my_cmap#cmaps.MPL_gnuplot\n                ,levels=100,vmin=8,vmax=11,alpha=0.7)\nm=ax.pcolormesh([[0]],cmap=my_cmap#cmaps.MPL_gnuplot\n                ,levels=100,vmin=8,vmax=11,alpha=1)\nax.colorbar(m,locator=np.arange(7,12,0.5))\nax.grid(False)\n#fig.savefig('a.jpg')\n\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:406: UserWarning: The `map_projection` keyword argument is deprecated, use `projection` to instantiate a GeoAxes instead.\n  warnings.warn(\"The `map_projection` keyword argument is \"\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:1785: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n  result = super().pcolormesh(*args, **kwargs)",
    "crumbs": [
      "Home",
      "画图",
      "plot_ustc_Hefei_map模板"
    ]
  },
  {
    "objectID": "notebooks/globalmap_v2.html",
    "href": "notebooks/globalmap_v2.html",
    "title": "ustc",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport proplot as plot\nimport numpy as np\n\n\n\n\nfontsize=12\nmetawidth=0.5\nlabelsize2=12\n\nplt.rcParams['hatch.linewidth'] = 0.1\nproj=plot.Proj('cyl')\nfig,axs=plot.subplots(proj=proj ,refheight=2)\nfig.format(metawidth=0.5,labels=True,coast=False,reso='med',grid=False,latlim=(-60,90))\n\n\n\n\nlat0,lat1=-90,90\nlon0,lon1=-180,180\n\n\ndx=3\nbounds =np.array([0.1,1,10,100,1000,10000])*10\nimport matplotlib as mpl\n# cmap=my_cmap2\n# norm = mpl.colors.BoundaryNorm(bounds, cmap.N, extend='both')\n\nax=axs[0]\n\n#world.boundary.to_crs(proj.proj4_init).plot(ax=ax,lw=0.1,color='k')\nfrom cartopy import crs as ccrs, feature as cfeature\n#ax.add_feature(cfeature.BORDERS, linewidth=0.1, edgecolor='k')\n#ax.add_feature(cfeature.STATES, linewidth=0.1, edgecolor='k')\nax.add_feature(cfeature.COASTLINE.with_scale('50m'),lw=0.2, edgecolor='dimgrey')#####添加海岸线#########\n#world.boundary.to_crs(proj.proj4_init).plot(ax=ax,lw=0.1,color='k')\n#ax.add_feature(plot.cartopy.feature.OCEAN, facecolor='none',zorder=2)\nax.add_feature(plot.cartopy.feature.LAND.with_scale('50m'), facecolor='lightgrey')\n#world.to_crs(proj.proj4_init).plot(ax=ax,lw=0.1,color='lightgrey',edgecolor='dimgrey',zorder=2)\n#d=DS_245.loc['2090':'2100'].mean(dim='time')#.coarsen(lon=10,lat=10).sum()\n\n/home/xuejingkai/miniconda3/lib/python3.9/site-packages/cartopy/mpl/geoaxes.py:406: UserWarning: The `map_projection` keyword argument is deprecated, use `projection` to instantiate a GeoAxes instead.\n  warnings.warn(\"The `map_projection` keyword argument is \"",
    "crumbs": [
      "Home",
      "画图",
      "plot_global_map模板"
    ]
  },
  {
    "objectID": "notebooks/extract_wrfchem.html",
    "href": "notebooks/extract_wrfchem.html",
    "title": "ustc",
    "section": "",
    "text": "import pandas as pd\nimport xarray as xr\nimport os\nimport glob\n\n##################################################提取文件路径##########################################################\ndef get_file_paths(folder_path1, folder_path2):\n    # 使用 glob 模块获取第一个文件夹中所有符合条件的文件路径\n    file_paths0 = glob.glob(os.path.join(folder_path1, '*', '*_normal.nc'))\n    \n    # 使用 glob 模块获取第二个文件夹中所有符合条件的文件路径\n    file_paths1 = glob.glob(os.path.join(folder_path2, '*', '*_physical.nc'))\n    \n    return file_paths0, file_paths1\n\n\nfolder_path0 = '/exports/WRF-CHEM/model/wrfpost/normal_new/'# 要提取的nc文件路径\nfolder_path1 = '/exports/WRF-CHEM/model/wrfpost/physical_new'# 要提取的nc文件路径\n\nfile_paths0, file_paths1 = get_file_paths(folder_path0, folder_path1)\n\nvariable_names0 = ['pressure','height','o3','no2','so2','hcho','pm25','tempc','ua','va','pblh']  # 要提取的变量名称列表\nvariable_names1 = ['rh']  # 要提取的变量名称列表\n\nlat_range = [26,35]  # 纬度范围\nlon_range = [116,125]  # 经度范围\n#长江三角洲地区的地理范围介于，东经118°20′一123°25′，北纬28°45′～33°25′\n\n\ntimedt=pd.date_range('20230801','20230901')\nt=timedt[0]\n\n\nL0=[glob.glob(folder_path0+f'/{t.strftime(\"%YM%m\")}*/{t.strftime(\"%Y%m%d\")}*')[0] for t in timedt]\nL1=[glob.glob(folder_path1+f'/{t.strftime(\"%YM%m\")}*/{t.strftime(\"%Y%m%d\")}*')[0] for t in timedt]\nL0\nL1\n\n['/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080100_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080200_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080300_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080400_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080500_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080600_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080700_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080800_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023080900_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081000_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081100_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081200_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081300_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081400_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081500_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081600_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081700_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081800_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023081900_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082000_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082100_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082200_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082300_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082400_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082500_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082600_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082700_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082800_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023082900_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023083000_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M08/2023083100_physical.nc',\n '/exports/WRF-CHEM/model/wrfpost/physical_new/2023M09/2023090100_physical.nc']\n\n\n\nfor [l0,l1] in zip(L0,L1):\n    print(l0)\n\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080100_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080200_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080300_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080400_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080500_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080600_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080700_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080800_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023080900_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081000_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081100_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081200_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081300_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081400_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081500_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081600_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081700_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081800_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023081900_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082000_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082100_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082200_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082300_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082400_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082500_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082600_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082700_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082800_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023082900_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023083000_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M08/2023083100_normal.nc\n/exports/WRF-CHEM/model/wrfpost/normal_new/2023M09/2023090100_normal.nc\n\n\n\nds0=xr.open_dataset(l0)\nds1=xr.open_dataset(l1)\n\n# ds0=xr.open_dataset('/exports/WRF-CHEM/model/wrfpost/normal_new/2023M06/2023060100_normal.nc')\n# ds1=xr.open_dataset('/exports/WRF-CHEM/model/wrfpost/physical_new/2023M06/2023060100_physical.nc')\n\nlat = ds0['xlat']\nlon = ds0['xlon']\n# 筛选经纬度范围\nlat_indices=(lat &gt;=lat_range[0])&(lat&lt;= lat_range[1])\nlon_indices =(lon&gt;=lon_range[0])&(lon&lt;= lon_range[1])\n\np_indices=lat_indices&lon_indices\n\n\n\n###############################variable_names1\n\nvariable = ds1[variable_names1]\n# 插值计算\ninterp_variable = variable.interp(Time=[2.5, 5.5], method='linear')\n# 限定经纬度\ninterp_data = interp_variable[variable_names1].where(p_indices)  ###\n\ndata1=interp_data.mean(dim=('south_north','west_east'))\n\n\n\n###############################variable_names0\nvariable  = ds0[variable_names0]\n\n# 插值计算\ninterp_variable = variable.interp(Time=[2.5, 5.5], method='linear')\n\n# 限定经纬度\ninterp_data = interp_variable[variable_names0].where(p_indices)\ndata0=interp_data.mean(dim=('south_north','west_east'))\nData=xr.merge([data0[variable_names0],data1[variable_names1]])\n\nData=Data.sel(bottom_top=Data.pressure[0]&gt;100)  #选择100hPa以下的对流层\n\n\n\nimport numpy as np\nnp.abs(Data.pressure.diff(dim='bottom_top'))\nmm_air=28.97/1000\nmm_o3=3*16.0/1000\nNA=6.02e23\ngearth=9.81\n\n(Data.no2[:,:-1]*np.abs((Data.pressure*100).diff(dim='bottom_top'))*NA/gearth/mm_air/1e6*1e-4#*mm_o3\n    ).sum(dim='bottom_top')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray (Time: 2)&gt;\narray([2.81148597e+15, 1.96508280e+15])\nDimensions without coordinates: Timexarray.DataArrayTime: 22.811e+15 1.965e+15array([2.81148597e+15, 1.96508280e+15])Coordinates: (0)Attributes: (0)\n\n\n\n#对流层 取气压到100hPa\n\nData['no2_tc']=(Data.no2[:,:-1]*np.abs((Data.pressure*100).diff(dim='bottom_top'))*NA/gearth/mm_air/1e6*1e-4#*mm_o3\n    ).sum(dim='bottom_top')\n\nData['hcho_tc']=(Data.hcho[:,:-1]*np.abs((Data.pressure*100).diff(dim='bottom_top'))*NA/gearth/mm_air/1e6*1e-4#*mm_o3\n    ).sum(dim='bottom_top')\nData['o3_tc']=(Data.o3[:,:-1]*np.abs((Data.pressure*100).diff(dim='bottom_top'))*NA/gearth/mm_air/1e6*1e-4#*mm_o3\n    ).sum(dim='bottom_top')\n\nData['so2_tc']=(Data.so2[:,:-1]*np.abs((Data.pressure*100).diff(dim='bottom_top'))*NA/gearth/mm_air/1e6*1e-4#*mm_o3\n    ).sum(dim='bottom_top')\n\n\nData\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:   (Time: 2, bottom_top: 36)\nDimensions without coordinates: Time, bottom_top\nData variables: (12/16)\n    pressure  (Time, bottom_top) float64 996.5 993.2 989.8 ... 135.3 119.3 105.6\n    height    (Time, bottom_top) float64 12.78 42.61 ... 1.565e+04 1.637e+04\n    o3        (Time, bottom_top) float64 0.0452 0.04573 ... 0.1392 0.2017\n    no2       (Time, bottom_top) float64 0.00162 0.001568 ... 5.093e-05\n    so2       (Time, bottom_top) float64 0.0005625 0.0005658 ... 1.508e-05\n    hcho      (Time, bottom_top) float64 0.001215 0.00123 ... 1.905e-05\n    ...        ...\n    pblh      (Time) float64 627.7 760.4\n    rh        (Time, bottom_top) float64 78.76 79.12 79.91 ... 24.51 22.73 21.03\n    no2_tc    (Time) float64 2.811e+15 1.965e+15\n    hcho_tc   (Time) float64 6.566e+15 6.198e+15\n    o3_tc     (Time) float64 1.062e+18 1.053e+18\n    so2_tc    (Time) float64 1.779e+15 1.829e+15xarray.DatasetDimensions:Time: 2bottom_top: 36Coordinates: (0)Data variables: (16)pressure(Time, bottom_top)float64996.5 993.2 989.8 ... 119.3 105.6array([[996.51427738, 993.15520028, 989.79661091, 986.91812891,\n        984.03987737, 981.16202413, 976.84501077, 971.08911201,\n        965.81446233, 957.66191502, 942.79959857, 920.28142953,\n        899.23116607, 874.88172947, 847.24169513, 822.0162709 ,\n        783.97586024, 734.57106893, 684.26564674, 636.3758868 ,\n        589.9393874 , 544.47704209, 501.41282471, 459.32580979,\n        418.2075831 , 380.41171491, 341.68039403, 301.06973783,\n        263.77428111, 230.73498041, 201.94865207, 176.93999817,\n        154.763228  , 135.41730801, 119.37373556, 105.68902228],\n       [995.24212664, 991.88747883, 988.53420521, 985.65923366,\n        982.78545614, 979.91121591, 975.60125661, 969.8538632 ,\n        964.58647064, 956.44591745, 941.60575169, 919.12168126,\n        898.09819225, 873.76705332, 846.13687903, 820.93111105,\n        782.94028597, 733.60223049, 683.36327886, 635.5375876 ,\n        589.16393047, 543.76449553, 500.76029597, 458.73245792,\n        417.67276131, 379.92954693, 341.25086038, 300.69666941,\n        263.45566649, 230.46581657, 201.72250522, 176.7509297 ,\n        154.60699865, 135.28981814, 119.27017772, 105.60596372]])height(Time, bottom_top)float6412.78 42.61 ... 1.565e+04 1.637e+04array([[1.27755345e+01, 4.26098805e+01, 7.24899494e+01, 9.81575429e+01,\n        1.23875526e+02, 1.49645158e+02, 1.88418359e+02, 2.40276901e+02,\n        2.87996601e+02, 3.62217455e+02, 4.98746377e+02, 7.08900403e+02,\n        9.08402755e+02, 1.14601414e+03, 1.42117019e+03, 1.68066455e+03,\n        2.08713289e+03, 2.63921245e+03, 3.23382212e+03, 3.83485802e+03,\n        4.45530647e+03, 5.10273513e+03, 5.75846709e+03, 6.44766432e+03,\n        7.17283389e+03, 7.89282861e+03, 8.69807366e+03, 9.62144115e+03,\n        1.05579234e+04, 1.14776836e+04, 1.23648680e+04, 1.32205372e+04,\n        1.40623274e+04, 1.48806670e+04, 1.56373221e+04, 1.63594843e+04],\n       [1.28254437e+01, 4.27756703e+01, 7.27708950e+01, 9.85366555e+01,\n        1.24352437e+02, 1.50219554e+02, 1.89138423e+02, 2.41190648e+02,\n        2.89087426e+02, 3.63582558e+02, 5.00610599e+02, 7.11462642e+02,\n        9.11503443e+02, 1.14955291e+03, 1.42516212e+03, 1.68485925e+03,\n        2.09141917e+03, 2.64360151e+03, 3.23831485e+03, 3.83937308e+03,\n        4.45973387e+03, 5.10711593e+03, 5.76295268e+03, 6.45241629e+03,\n        7.17795267e+03, 7.89842208e+03, 8.70440634e+03, 9.62864003e+03,\n        1.05659443e+04, 1.14865285e+04, 1.23743949e+04, 1.32304004e+04,\n        1.40720893e+04, 1.48897944e+04, 1.56452462e+04, 1.63655829e+04]])o3(Time, bottom_top)float640.0452 0.04573 ... 0.1392 0.2017array([[0.04519603, 0.04572534, 0.04592296, 0.04604102, 0.04613385,\n        0.04621316, 0.04631881, 0.04643149, 0.04650686, 0.04657584,\n        0.04639162, 0.04583174, 0.04463096, 0.04354959, 0.04295105,\n        0.04343749, 0.04458267, 0.04601333, 0.04735172, 0.04960336,\n        0.05213591, 0.05631171, 0.06031075, 0.0629689 , 0.06368894,\n        0.06341299, 0.06250629, 0.06087254, 0.05623895, 0.05518284,\n        0.05504131, 0.06654808, 0.09033122, 0.11326473, 0.14940617,\n        0.21374526],\n       [0.04935227, 0.04991783, 0.05010231, 0.05020126, 0.05026783,\n        0.05031986, 0.05038118, 0.05042876, 0.05046397, 0.0504299 ,\n        0.05021475, 0.04934286, 0.04781095, 0.04463117, 0.04238504,\n        0.04281738, 0.04366346, 0.04453702, 0.04563381, 0.04837275,\n        0.05149297, 0.0557216 , 0.05946132, 0.06219466, 0.06300999,\n        0.06231808, 0.06084223, 0.05921927, 0.05477954, 0.05358155,\n        0.05520858, 0.06804621, 0.0912013 , 0.11135903, 0.13919173,\n        0.20174883]])no2(Time, bottom_top)float640.00162 0.001568 ... 5.093e-05array([[1.62040249e-03, 1.56823777e-03, 1.52805281e-03, 1.49644256e-03,\n        1.46728799e-03, 1.43833444e-03, 1.39484577e-03, 1.33502858e-03,\n        1.28184015e-03, 1.19421092e-03, 1.00422967e-03, 5.73979384e-04,\n        1.45013919e-04, 7.10149004e-05, 4.44420827e-05, 4.13577804e-05,\n        3.86286675e-05, 3.25732749e-05, 2.80336995e-05, 2.46234409e-05,\n        2.13044811e-05, 2.05832836e-05, 2.19885827e-05, 2.33207681e-05,\n        2.26998942e-05, 2.02572159e-05, 1.81034214e-05, 1.76710926e-05,\n        1.89930636e-05, 2.19763422e-05, 2.23191091e-05, 2.52752280e-05,\n        2.85024653e-05, 2.97518283e-05, 3.71588705e-05, 5.35057867e-05],\n       [9.79923200e-04, 8.93821750e-04, 8.32642797e-04, 7.93745536e-04,\n        7.63196973e-04, 7.39514203e-04, 7.10510416e-04, 6.82014744e-04,\n        6.59572359e-04, 6.26818086e-04, 5.69152907e-04, 4.69887009e-04,\n        3.36660309e-04, 1.55212892e-04, 5.20142829e-05, 4.29823140e-05,\n        3.69746432e-05, 3.08998695e-05, 2.58981091e-05, 2.24773965e-05,\n        1.99919682e-05, 1.94099311e-05, 2.04058603e-05, 2.13999066e-05,\n        2.07569515e-05, 1.89957126e-05, 1.76215457e-05, 1.81744719e-05,\n        1.94098011e-05, 2.09499419e-05, 2.14662296e-05, 2.58784437e-05,\n        3.03962052e-05, 3.16735902e-05, 3.58375097e-05, 5.09264144e-05]])so2(Time, bottom_top)float640.0005625 0.0005658 ... 1.508e-05array([[5.62543413e-04, 5.65788830e-04, 5.62402137e-04, 5.58811353e-04,\n        5.55264109e-04, 5.51588704e-04, 5.46133058e-04, 5.38341417e-04,\n        5.32404781e-04, 5.21146774e-04, 4.90413239e-04, 3.62015719e-04,\n        1.88695961e-04, 1.31975272e-04, 9.03817014e-05, 9.41448127e-05,\n        8.68494597e-05, 5.79116321e-05, 2.80012513e-05, 1.34181816e-05,\n        1.05827078e-05, 1.19147826e-05, 1.41823493e-05, 1.77139743e-05,\n        2.29956251e-05, 3.13395737e-05, 3.68495664e-05, 4.17313221e-05,\n        4.20630098e-05, 3.86869535e-05, 3.63422099e-05, 3.87256710e-05,\n        3.38185373e-05, 2.31176000e-05, 1.69888882e-05, 1.60285495e-05],\n       [4.57817447e-04, 4.59662578e-04, 4.53793646e-04, 4.47901808e-04,\n        4.42823377e-04, 4.39068733e-04, 4.34512816e-04, 4.30778966e-04,\n        4.29098087e-04, 4.25743006e-04, 4.27061963e-04, 4.11576930e-04,\n        3.47450953e-04, 2.21623660e-04, 1.16992457e-04, 1.15722912e-04,\n        1.04370959e-04, 6.73144732e-05, 3.42927870e-05, 1.37947911e-05,\n        9.93511314e-06, 1.11800532e-05, 1.36319512e-05, 1.70471113e-05,\n        2.27315874e-05, 3.04758678e-05, 3.37958889e-05, 3.85873072e-05,\n        3.88659746e-05, 3.35340444e-05, 2.99492860e-05, 3.29241201e-05,\n        2.98470766e-05, 2.21540161e-05, 1.69392866e-05, 1.50794347e-05]])hcho(Time, bottom_top)float640.001215 0.00123 ... 1.905e-05array([[1.21493276e-03, 1.22955367e-03, 1.23228751e-03, 1.23280703e-03,\n        1.23252719e-03, 1.23165369e-03, 1.22949491e-03, 1.22358684e-03,\n        1.21818014e-03, 1.20727239e-03, 1.15850160e-03, 9.46295340e-04,\n        6.18876281e-04, 5.18235647e-04, 4.48630780e-04, 4.26800729e-04,\n        4.00046073e-04, 3.59599391e-04, 3.23778251e-04, 2.88480889e-04,\n        2.48906865e-04, 2.14502712e-04, 1.85564925e-04, 1.66459989e-04,\n        1.54136854e-04, 1.44764805e-04, 1.35967168e-04, 1.32274768e-04,\n        1.43265293e-04, 1.47588877e-04, 1.40075350e-04, 1.11905060e-04,\n        7.19068081e-05, 4.77444842e-05, 3.36122066e-05, 2.03493026e-05],\n       [9.21220422e-04, 9.31369314e-04, 9.29209720e-04, 9.26631980e-04,\n        9.24366514e-04, 9.22644744e-04, 9.20447974e-04, 9.17524938e-04,\n        9.14881073e-04, 9.08754056e-04, 8.95450276e-04, 8.55155820e-04,\n        7.65167136e-04, 6.13736220e-04, 4.81557847e-04, 4.40277068e-04,\n        4.05740920e-04, 3.74032593e-04, 3.35561191e-04, 3.01594737e-04,\n        2.63746284e-04, 2.28195218e-04, 1.95711692e-04, 1.73555779e-04,\n        1.57473213e-04, 1.46046364e-04, 1.34500806e-04, 1.22988365e-04,\n        1.17151431e-04, 1.08749564e-04, 9.64076124e-05, 7.68491222e-05,\n        5.46863433e-05, 4.06302361e-05, 2.97517866e-05, 1.90489348e-05]])pm25(Time, bottom_top)float6410.64 10.79 10.85 ... 0.1174 0.1178array([[10.6419018 , 10.79090369, 10.85416202, 10.90804889, 10.9631559 ,\n        11.02602779, 11.13446516, 11.27656944, 11.42917397, 11.72148952,\n        11.98205959, 10.35362631,  5.85566251,  3.39253392,  1.88581224,\n         1.37923849,  1.08594768,  0.64889881,  0.32452985,  0.22531308,\n         0.19107433,  0.18572686,  0.18655166,  0.19678189,  0.2060559 ,\n         0.23391668,  0.23638849,  0.22806183,  0.18943303,  0.15528054,\n         0.13601516,  0.15436399,  0.15494158,  0.12967997,  0.1201186 ,\n         0.12350279],\n       [ 9.69434387,  9.66530291,  9.59699481,  9.58140623,  9.58619658,\n         9.61569358,  9.68195401,  9.80937452,  9.97441008, 10.22654538,\n        10.81503705, 11.41606287, 10.29311508,  6.82291266,  2.89369691,\n         2.22584036,  1.59832792,  0.80274547,  0.37417796,  0.23112484,\n         0.19205057,  0.18680681,  0.18821729,  0.19727285,  0.20897856,\n         0.23623711,  0.23006863,  0.21945543,  0.18708925,  0.15298729,\n         0.12910886,  0.14755069,  0.1526066 ,  0.13044165,  0.11740953,\n         0.11775102]])tempc(Time, bottom_top)float6426.09 25.65 25.33 ... -69.42 -72.74array([[ 26.08798649,  25.65370078,  25.3278616 ,  25.06361645,\n         24.80669404,  24.55448802,  24.18054439,  23.6921931 ,\n         23.2639068 ,  22.61812355,  21.49484533,  20.12011754,\n         19.57890454,  19.24309195,  18.6512818 ,  17.90446002,\n         16.39107032,  13.77240786,  10.76858747,   7.54081673,\n          3.95416535,   0.16599015,  -3.47674152,  -7.15566744,\n        -11.26760269, -15.71682888, -21.02049316, -27.61178943,\n        -34.80181532, -41.9795922 , -48.89398525, -55.21603113,\n        -61.47372179, -65.76195165, -69.12073886, -72.2906142 ],\n       [ 27.25683872,  26.83172958,  26.50600971,  26.24003346,\n         25.98109012,  25.72668795,  25.34897867,  24.85360866,\n         24.41434502,  23.76775686,  22.65062928,  21.13851609,\n         20.07501557,  19.19759949,  18.61930779,  17.90866374,\n         16.4456294 ,  13.77550613,  10.7965044 ,   7.49292016,\n          3.9029732 ,   0.18805965,  -3.39613621,  -7.0096473 ,\n        -11.10847531, -15.51356082, -20.76531009, -27.36782423,\n        -34.52868809, -41.6942663 , -48.66581033, -55.08928382,\n        -61.45691913, -65.88890485, -69.41751983, -72.74389871]])ua(Time, bottom_top)float64-2.673 -3.109 -3.25 ... 8.81 6.459array([[-2.67298164, -3.10894126, -3.24963644, -3.32392908, -3.37596649,\n        -3.4158106 , -3.46528559, -3.52553673, -3.61741978, -3.79346439,\n        -4.27554968, -5.40445859, -6.52279144, -6.88782251, -6.79403608,\n        -6.39247085, -5.61498719, -4.843397  , -4.03805142, -3.10721366,\n        -2.01304491, -0.78071577,  0.57357117,  1.6089695 ,  2.63586664,\n         3.28092098,  4.03567606,  6.42218399,  8.69920222, 11.65145454,\n        14.78127339, 14.86330833, 14.29058596, 11.49988934,  8.63194285,\n         6.18572457],\n       [-3.4431975 , -4.05734708, -4.25699973, -4.36047457, -4.43077559,\n        -4.4820651 , -4.54121552, -4.59839024, -4.66319432, -4.81768698,\n        -5.24411445, -6.03288582, -6.57708265, -7.00088411, -6.67669004,\n        -5.58650027, -4.3215057 , -3.68857311, -3.4946516 , -3.09877477,\n        -2.11611781, -0.41588142,  1.99790121,  3.49709378,  4.38023339,\n         4.41484029,  4.48558834,  7.03769638,  9.74268789, 12.19203925,\n        14.19286362, 14.36169669, 14.19057499, 11.57084656,  8.80959882,\n         6.45897134]])va(Time, bottom_top)float64-4.381 -4.951 ... 3.406 1.622array([[-4.38129634, -4.95129939, -5.11585303, -5.19270723, -5.23844127,\n        -5.26652047, -5.29254724, -5.30699909, -5.30637916, -5.29823931,\n        -5.28750178, -5.21674858, -5.16733127, -4.58808218, -3.70039766,\n        -2.84041713, -1.8691008 , -1.36723443, -0.99952814, -0.74181218,\n        -0.52563995,  0.12237022,  1.1914126 ,  2.24885925,  3.32114617,\n         4.00118858,  4.76295273,  5.83311931,  7.57976409,  8.92962817,\n         9.61415142,  7.44619002,  4.98421056,  3.63151942,  2.53930115,\n         1.22681114],\n       [-4.50197131, -5.1184743 , -5.30589687, -5.39615991, -5.45233314,\n        -5.48909809, -5.52515296, -5.54601335, -5.55070307, -5.53100854,\n        -5.45141576, -5.21577283, -4.96833819, -4.208957  , -3.13694145,\n        -1.84112647, -0.61945257, -0.5473274 , -0.64837087, -0.82675041,\n        -0.79335511, -0.19346592,  0.94445611,  1.88973804,  2.95543391,\n         4.18848812,  5.63163119,  6.43025711,  7.70439029,  8.88488116,\n         9.63037491,  8.34054336,  6.75339417,  5.08439555,  3.40585741,\n         1.6216935 ]])pblh(Time)float64627.7 760.4array([627.66643264, 760.40468763])rh(Time, bottom_top)float6478.76 79.12 79.91 ... 22.73 21.03array([[78.76008044, 79.12200686, 79.91213551, 80.66715565, 81.46341437,\n        82.28273084, 83.53666626, 85.17972354, 86.46924342, 88.31031231,\n        91.05773414, 91.10515701, 80.66875189, 64.91472517, 55.805102  ,\n        51.21571993, 47.29463623, 45.1891749 , 42.69173008, 41.83881572,\n        43.47077454, 44.38246441, 40.2908141 , 35.93332973, 33.58746189,\n        34.05068666, 37.67739528, 39.49901406, 43.61181723, 42.54679637,\n        37.7915959 , 32.39814824, 26.95003506, 24.01999984, 21.99431062,\n        19.86915596],\n       [74.29404563, 74.33872828, 74.95804251, 75.59782978, 76.29055079,\n        77.01391064, 78.14115119, 79.6597163 , 80.92160571, 82.57308131,\n        84.66543813, 85.13161204, 80.5351756 , 74.70767677, 63.66524046,\n        53.22969471, 47.94328387, 46.79625193, 43.89831027, 43.22905281,\n        44.53372947, 45.25836001, 41.6549837 , 36.97210541, 35.04424555,\n        37.98910764, 43.49419776, 44.16914922, 44.62805754, 39.73165612,\n        32.05348062, 29.11344132, 26.7404113 , 24.51217659, 22.72978669,\n        21.03004916]])no2_tc(Time)float642.811e+15 1.965e+15array([2.81148597e+15, 1.96508280e+15])hcho_tc(Time)float646.566e+15 6.198e+15array([6.56581731e+15, 6.19830011e+15])o3_tc(Time)float641.062e+18 1.053e+18array([1.06150671e+18, 1.05279140e+18])so2_tc(Time)float641.779e+15 1.829e+15array([1.77901534e+15, 1.82880535e+15])Attributes: (0)\n\n\n\np_850_id=np.abs(Data.pressure - 850).argmin(dim='bottom_top')\n#Data=Data.sel(bottom_top=p_850_id)\n\n\nlist(Data.variables.keys())\n\n['pressure',\n 'height',\n 'o3',\n 'no2',\n 'so2',\n 'hcho',\n 'pm25',\n 'tempc',\n 'ua',\n 'va',\n 'pblh',\n 'rh',\n 'no2_tc',\n 'hcho_tc',\n 'o3_tc',\n 'so2_tc']\n\n\n\nData[['rh','ua','va','tempc']].sel(bottom_top=p_850_id)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (Time: 2)\nDimensions without coordinates: Time\nData variables:\n    rh       (Time) float64 55.81 63.67\n    ua       (Time) float64 -6.794 -6.677\n    va       (Time) float64 -3.7 -3.137\n    tempc    (Time) float64 18.65 18.62xarray.DatasetDimensions:Time: 2Coordinates: (0)Data variables: (4)rh(Time)float6455.81 63.67array([55.805102  , 63.66524046])ua(Time)float64-6.794 -6.677array([-6.79403608, -6.67669004])va(Time)float64-3.7 -3.137array([-3.70039766, -3.13694145])tempc(Time)float6418.65 18.62array([18.6512818 , 18.61930779])Attributes: (0)\n\n\n\n\n\nData[['rh','ua','va','tempc']]=Data[['rh','ua','va','tempc']].sel(bottom_top=p_850_id)\n\n\nData[['o3',\n 'no2',\n 'so2',\n 'hcho',\n 'pm25',]]=Data[['o3',\n 'no2',\n 'so2',\n 'hcho',\n 'pm25',]].sel(bottom_top=0)\n\n\nData[['o3',\n 'no2',\n 'so2',\n 'hcho',\n 'pm25',\n 'tempc',\n 'ua',\n 'va',\n 'pblh',\n 'rh',\n 'no2_tc',\n 'hcho_tc',\n 'o3_tc',\n 'so2_tc']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (Time: 2)\nDimensions without coordinates: Time\nData variables: (12/14)\n    o3       (Time) float64 0.0452 0.04935\n    no2      (Time) float64 0.00162 0.0009799\n    so2      (Time) float64 0.0005625 0.0004578\n    hcho     (Time) float64 0.001215 0.0009212\n    pm25     (Time) float64 10.64 9.694\n    tempc    (Time) float64 18.65 18.62\n    ...       ...\n    pblh     (Time) float64 627.7 760.4\n    rh       (Time) float64 55.81 63.67\n    no2_tc   (Time) float64 2.811e+15 1.965e+15\n    hcho_tc  (Time) float64 6.566e+15 6.198e+15\n    o3_tc    (Time) float64 1.062e+18 1.053e+18\n    so2_tc   (Time) float64 1.779e+15 1.829e+15xarray.DatasetDimensions:Time: 2Coordinates: (0)Data variables: (14)o3(Time)float640.0452 0.04935array([0.04519603, 0.04935227])no2(Time)float640.00162 0.0009799array([0.0016204 , 0.00097992])so2(Time)float640.0005625 0.0004578array([0.00056254, 0.00045782])hcho(Time)float640.001215 0.0009212array([0.00121493, 0.00092122])pm25(Time)float6410.64 9.694array([10.6419018 ,  9.69434387])tempc(Time)float6418.65 18.62array([18.6512818 , 18.61930779])ua(Time)float64-6.794 -6.677array([-6.79403608, -6.67669004])va(Time)float64-3.7 -3.137array([-3.70039766, -3.13694145])pblh(Time)float64627.7 760.4array([627.66643264, 760.40468763])rh(Time)float6455.81 63.67array([55.805102  , 63.66524046])no2_tc(Time)float642.811e+15 1.965e+15array([2.81148597e+15, 1.96508280e+15])hcho_tc(Time)float646.566e+15 6.198e+15array([6.56581731e+15, 6.19830011e+15])o3_tc(Time)float641.062e+18 1.053e+18array([1.06150671e+18, 1.05279140e+18])so2_tc(Time)float641.779e+15 1.829e+15array([1.77901534e+15, 1.82880535e+15])Attributes: (0)\n\n\n\nData['Time']=[2.5, 5.5]\n\n\nData2=Data[['o3',\n 'no2',\n 'so2',\n 'hcho',\n 'pm25',\n 'tempc',\n 'ua',\n 'va',\n 'pblh',\n 'rh',\n 'no2_tc',\n 'hcho_tc',\n 'o3_tc',\n 'so2_tc']]\nData2['date']=[t.strftime(\"%Y%m%d\")]\nData2.to_dataframe()\n\n\n\n\n\n\n\n\n\no3\nno2\nso2\nhcho\npm25\ntempc\nua\nva\npblh\nrh\nno2_tc\nhcho_tc\no3_tc\nso2_tc\n\n\nTime\ndate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.5\n20230801\n0.045196\n0.00162\n0.000563\n0.001215\n10.641902\n18.651282\n-6.794036\n-3.700398\n627.666433\n55.805102\n2.811486e+15\n6.565817e+15\n1.061507e+18\n1.779015e+15\n\n\n5.5\n20230801\n0.049352\n0.00098\n0.000458\n0.000921\n9.694344\n18.619308\n-6.676690\n-3.136941\n760.404688\n63.665240\n1.965083e+15\n6.198300e+15\n1.052791e+18\n1.828805e+15\n\n\n\n\n\n\n\n\ndf=Data2.to_dataframe().reset_index()\n\n\nfname='shanghai_'+t.strftime(\"%Y%m%d\")+'.csv'\nfname\n\n'shanghai_20230801.csv'\n\n\n\ndf.to_csv(fname)",
    "crumbs": [
      "Home",
      "画图",
      "extract_wrfchem_区域变量（近地面、柱浓度）"
    ]
  },
  {
    "objectID": "notebooks/create_meic.html",
    "href": "notebooks/create_meic.html",
    "title": "ustc",
    "section": "",
    "text": "import hashlib\nimport multiprocessing\nimport os\nimport pickle\nimport sys\nfrom multiprocessing import Pool\nimport numpy as np\nimport netCDF4\nfrom netCDF4 import Dataset\nfrom loguru import logger\nimport xarray as xr\nimport xesmf as xe\nfrom area import area\nimport pandas as pd\nimport f90nml\nimport glob\nimport sys\nimport datetime\nimport requests\nimport math\nimport re\nimport matplotlib.pyplot as plt\n\nprint(sys.version)\nprint('loading ok')\n\n\n#################################################################################################################\n#################################################################################################################\n\nst='2019-10-12T00:00'\net='2019-10-28T12:00'\n\n\nstartT=pd.to_datetime(st)\nendT=pd.to_datetime(et)\n\nall_hour=int((endT-startT)/pd.Timedelta(1, 'h'))\nrun_hour=24*4#all_hour   #同化、重启动\nrun_hour=all_hour\ninterp_hour=run_hour #48    #同化、重启动\n\n#修改#run_hour=all_hour    #不间断\ninterp_hour=run_hour\n\ndomain=2\n\nchem_domain=[1,2,3,4,5,6]   #只要第二个domain跑chem\nchem_domain=chem_domain[:domain]\n\nhistory_interval_1=1*60\nhistory_interval_2=1*60\nhistory_interval_3=1*60\n\nrestart_interval=60*24*3\n\nwrfreal=True\nwrfda=False\nrestart=False\nWPS= False  #do not open\n\nWPS_epoch=True\n#WPS_epoch=False\nrunwrf=True\ngenbe=False\n\nchem=True\nsgfdda=False\n\nwrfchemi=True\nwrfbio=False\nwrffire=False\n\ndel_var=True\n\n\ncreat_wrfchemi_by_user=True\n\nuse_wrf_chem_input=False  #加入历史cheminput\nuse_wrf_chem_input_start=False #开始运行的时候就加入历史cheminput\n\n\ncv_options=5\ncv_options2=5\n\nprepbufr=False\nlittler=False\n\nif littler:\n    obs_option=1\n    add_obs_local=False\n    add_obs_down_local=True\n    down_obs=False\n\npswd='2000114Kk'\nvalues = {'email' : 'xuejk2018@lzu.edu.cn', 'passwd' : pswd, 'action' : 'login'}\nlogin_url = 'https://rda.ucar.edu/cgi-bin/login'\n\n'''\nret = requests.post(login_url, data=values)\nif ret.status_code != 200:\n    print('Bad Authentication')\n    print(ret.text)\n    exit(1)\n'''\n\n########## PATH ######################################################################################\n\npath_namelist='/home/xuejingkai/d1/WRF2/LQH/auto'+'/'#'/home/xuejingkai/d1/WRF/work/wrfchemcode/auto/'+'/'\n#path_wrf='/exports/d1/xuejingkai/WRF2/test/runwrf/'+'/'\n\n\n\npath_base='/exports/d4/xuejingkai/WRF/work/TW'+'/'\npath_work=path_base+'/case'+startT.strftime('%Y%m%d%H')+'/'   #!!!!!!!!!!!!!!!\npath_wrf=path_work+'runwrf/'\n\n#path_wps='/exports/d1/xuejingkai/WRF2/test/wps-3.9/'+'/'    #'/home/xuejingkai/d1/WRF/work/WPS-4.3/'\npath_wps=path_work+'/WPS/'+'/'    #'/home/xuejingkai/d1/WRF/work/WPS-4.3/'\n\n\n\n\n###### WRFDA ###########\npath_wrfda1=path_wrf+'/wrfda/'\npath_wrfda2=path_wrf+'/wrfda2/'\npath_wrfda3=path_wrf+'/wrfda3/'\n\npath_obs='/home/xuejingkai/data/WRF/DATA/obs/'\npath_obs_local='/home/xuejk2018/jupyter/atmos/out2/'    #自己的观测数据\npath_obs_down_local='/home/xuejingkai/data/WRF/DATA/obs/'   #'/WRF-Chem/model/download_data/OBSData/' #下载的观测数据\n###### WRFDA ###########\n\n###### path of code ###########\n#path_WRF='/home/xuejingkai/d1/WRF/CHEM3.9/WRFV3.9/WRFV3/' #''\npath_WRF='/exports/d1/xuejingkai/WRF/CHEM3.9/WRFV3.9/WRFV3_2023'+'/'\n#path_WRF='/exports/d1/xuejingkai/WRF/CHEM_wo_kpp'+'/'\n#path_WRF='/exports/d1/xuejingkai/WRF/CHEM3.9/WRFV3/'\n\npath_WRFDA='/home/xuejingkai/data/WRF/WRFDA2/'   \npath_WPSDATA='/WRF-Chem/model/download_data/fnlData/'+'/'#+'fnl-'+startT.strftime('%YM%m')+'/'\n\npath_WPS='/home/xuejingkai/d1/WRF/WPS3.9/WPS/'+'/'\npath_WPS='/home/xuejingkai/data/WRF/WPS-4.3/'\n\n###### create path of code ###########\nos.system('mkdir '+path_work)\nos.system('mkdir '+path_wrf)\nos.system('mkdir '+path_wps)\nos.chdir(path_wps)\nos.system('cp -r '+path_WPS+'/* .')\nos.system('rm *log*')\n\npath_megan=path_wrf+'megan/'\n\n\npath_fire=path_wrf+'fire/'\n\n    #global path_meic,path_meic_work\npath_meic='/exports/d4/xuejingkai/atmos/jupyter2/other/test/'+'meic/'\n#path_meic_work= \"/home/xuejingkai/data/WRF/ATMOS/meic/work3/\"\npath_meic_work= path_meic+\"/create_chemi/\"\n\n#################################################################################################################\n#################################################################################################################\n\n3.9.9 | packaged by conda-forge | (main, Dec 20 2021, 02:40:17) \n[GCC 9.4.0]\nloading ok\n\n\nmkdir: cannot create directory '/exports/d4/xuejingkai/WRF/work/TW//case2019101200/': File exists\nmkdir: cannot create directory '/exports/d4/xuejingkai/WRF/work/TW//case2019101200/runwrf/': File exists\nmkdir: cannot create directory '/exports/d4/xuejingkai/WRF/work/TW//case2019101200//WPS//': File exists\ncp: cannot stat '/home/xuejingkai/data/WRF/WPS-4.3//*': No such file or directory\nrm: cannot remove 'geo.log': Permission denied\nrm: cannot remove 'geogrid.log.0000': Permission denied\nrm: cannot remove 'geogrid.log.0001': Permission denied\nrm: cannot remove 'geogrid.log.0002': Permission denied\nrm: cannot remove 'geogrid.log.0003': Permission denied\nrm: cannot remove 'geogrid.log.0004': Permission denied\nrm: cannot remove 'geogrid.log.0005': Permission denied\nrm: cannot remove 'geogrid.log.0006': Permission denied\nrm: cannot remove 'geogrid.log.0007': Permission denied\nrm: cannot remove 'geogrid.log.0008': Permission denied\nrm: cannot remove 'geogrid.log.0009': Permission denied\nrm: cannot remove 'geogrid.log.0010': Permission denied\nrm: cannot remove 'geogrid.log.0011': Permission denied\nrm: cannot remove 'geogrid.log.0012': Permission denied\nrm: cannot remove 'geogrid.log.0013': Permission denied\nrm: cannot remove 'geogrid.log.0014': Permission denied\nrm: cannot remove 'geogrid.log.0015': Permission denied\nrm: cannot remove 'metgrib.log': Permission denied\nrm: cannot remove 'metgrid.log.0000': Permission denied\nrm: cannot remove 'metgrid.log.0001': Permission denied\nrm: cannot remove 'metgrid.log.0002': Permission denied\nrm: cannot remove 'metgrid.log.0003': Permission denied\nrm: cannot remove 'metgrid.log.0004': Permission denied\nrm: cannot remove 'metgrid.log.0005': Permission denied\nrm: cannot remove 'metgrid.log.0006': Permission denied\nrm: cannot remove 'metgrid.log.0007': Permission denied\nrm: cannot remove 'metgrid.log.0008': Permission denied\nrm: cannot remove 'metgrid.log.0009': Permission denied\nrm: cannot remove 'metgrid.log.0010': Permission denied\nrm: cannot remove 'metgrid.log.0011': Permission denied\nrm: cannot remove 'metgrid.log.0012': Permission denied\nrm: cannot remove 'metgrid.log.0013': Permission denied\nrm: cannot remove 'metgrid.log.0014': Permission denied\nrm: cannot remove 'metgrid.log.0015': Permission denied\nrm: cannot remove 'ungrib.log': Permission denied\n\n\n\n!mkdir meic\n\nmkdir: cannot create directory 'meic': Permission denied\n\n\n\n################### 清单 #############################\n\n# 排放源高度分布\nemission_height_distribution = {\"agriculture\":   [0.7, 0.3, 0.0, 0.0, 0.0, 0.0],\n                                \"industry\":      [0.3, 0.4, 0.2, 0.1, 0.0, 0.0],\n                                \"power\":         [0.0, 0.1, 0.2, 0.4, 0.2, 0.1],\n                                \"residential\":   [0.7, 0.3, 0.0, 0.0, 0.0, 0.0],\n                                \"transportation\":[0.7, 0.3, 0.0, 0.0, 0.0, 0.0]}\n# 排放源时间分布,BJT 0-23\nemission_time_distribution = {\"agriculture\":   [0.408, 0.408, 0.432, 0.432, 0.432, 0.432, 0.72, 0.72, 0.72, 1.68, 1.68, 1.68, 2.184, 2.184, 2.184, 1.56, 1.56, 1.56, 0.6, 0.6, 0.6, 0.408, 0.408, 0.408],\n                              \"industry\":      [0.7488, 0.7488, 0.7488, 0.7776, 0.8232, 0.888, 0.9552, 1.0296, 1.0896, 1.164, 1.2192, 1.272, 1.3032, 1.2192, 1.2384, 1.2456, 1.1592, 1.0824, 1.008, 0.9432, 0.8976, 0.8496, 0.8112, 0.7776],\n                              \"power\":         [0.8784, 0.7848, 0.7176, 0.7176, 0.7032, 0.7416, 0.792, 0.924, 1.08, 1.1952, 1.2192, 1.2144, 1.2216, 1.1712, 1.1424, 1.1376, 1.1328, 1.0896, 1.0728, 1.0344, 1.0248, 1.0248, 1.0152, 0.9672],\n                              \"residential\":   [0.4224,0.3768, 0.3576, 0.36, 0.3576, 0.3696, 0.4992, 1.1928, 1.5312, 1.572,1.56, 1.3584, 1.1544,1.0728,1.0608, 1.0032, 0.9792, 0.996, 1.1184, 1.4208, 1.5048, 1.3848, 1.3584, 0.9888],\n                              \"transportation\":[0.4836, 0.4344, 0.384 , 0.36 , 0.3552, 0.3732, 0.4716, 0.6096,0.8052, 0.9888, 1.2156, 1.392 , 1.5156, 1.6164, 1.638 , 1.638 ,1.6296, 1.59, 1.4976, 1.3752, 1.1808, 0.9876, 0.8196, 0.6384]}\n\n#transportation 普通汽车和工业用车\n# [0.396 , 0.3144, 0.2424, 0.204 , 0.1944, 0.2112, 0.3168, 0.444 ,0.6384, 0.876 , 1.1592, 1.4088, 1.5912, 1.7688, 1.8072, 1.824 ,1.8264, 1.8048, 1.68  , 1.5408, 1.2888, 1.0416, 0.8256, 0.5976\n#0.5712, 0.5544, 0.5256, 0.516 , 0.516 , 0.5352, 0.6264, 0.7752,0.972 , 1.1016, 1.272 , 1.3752, 1.44  , 1.464 , 1.4688, 1.452 ,1.4328, 1.3752, 1.3152, 1.2096, 1.0728, 0.9336, 0.8136, 0.6792\n# 排放的周内变化。周日为0.\nweek_emiss_factor = {\n    \"agriculture\":      [1.00,1.00,1.00,1.00,1.00,1.00,1.00],\n    \"industry\":         [1.00,1.00,1.00,1.00,1.00,1.00,1.00],\n    \"power\":            [1.00,1.00,1.00,1.00,1.00,1.00,1.00],\n    \"residential\":      [1.00,1.00,1.00,1.00,1.00,1.00,1.00],\n    \"transportation\":   [1.00,1.00,1.00,1.00,1.00,1.00,1.00]\n}\n\n# 无机气体的摩尔质量\ninorganic_gas_mole_weight = {'CO':28, 'CO2':44, 'NH3':17, 'NOx':46, 'SO2':64}    #NOx中由10%是NO2,90%是NO,所以平均摩尔质量是46*0.1+30*0.9=31.6\n\n\n'''\n# 计算指定中心纬度的经纬度网格的面积。\ndef ll_area(lon,lat,res=0.25):\n    return_area = np.zeros_like(lat)\n    isize,jsize = return_area.shape\n    for i in range(isize):\n        for j in range(jsize):\n            obj =  {'type':'Polygon','coordinates':[[[lon[i,j]-res/2.0,lat[i,j]-res/2.0],[lon[i,j]-res/2.0,lat[i,j]+res/2.0],[lon[i,j]+res/2.0,lat[i,j]+res/2.0],[lon[i,j]+res/2.0,lat[i,j]-res/2.0],[lon[i,j]-res/2.0,lat[i,j]-res/2.0]]]}\n            return_area[i,j] = area(obj)/1000.0/1000.0\n    return return_area\n'''\n\n# 计算指定中心纬度的经纬度网格的面积。\n#已更新加速版本\n\ndef ll_area(lon,lat,res=0.25):\n    return_area = np.zeros_like(lat)\n    isize,jsize = return_area.shape\n    gridarr=np.array([[[lon-res/2.0,lat-res/2.0],[lon-res/2.0,lat+res/2.0]\n      ,[lon+res/2.0,lat+res/2.0],[lon+res/2.0,lat-res/2.0]\n      ,[lon-res/2.0,lat-res/2.0]]])\n\n    for i in range(isize):\n        for j in range(jsize):\n            obj =  {'type':'Polygon'\n                    ,'coordinates':gridarr[...,i,j].tolist()}\n            area(obj)\n            return_area[i,j] = area(obj)/1000.0/1000.0\n    return return_area\n\n#插值程序,从meic网格插值到wrf网格\ndef meic2wrf(lon_inp,lat_inp,lon,lat,emis,interp_method = 'bilinear'):\n    '''\n    input:\n        lon_inp: wrf的经度网格(wrfinput[\"XLONG\"])\n        lat_inp: wrf的纬度网格(wrfinput[\"XLAT\"])\n        lon: meic的经度网格,np.2darray\n        lat: meic的纬度网格,np.2darray\n        emis: 转化了单位后的meic排放,np.2darray\n        interp_method: xesmf的插值方法\n    return:\n        wrf投影的排放源数据\n    '''\n    grid_out = {'lon': lon_inp,'lat': lat_inp}\n    grid_in = {'lon': lon,'lat': lat}\n    regridder = xe.Regridder(grid_in, grid_out, interp_method)#,weights=\"/home/tliu/data/python/emission/bilinear_200x320_179x239.nc\") #reuse_weights=True\n    emis_inp = regridder(emis)\n    #fn = regridder.to_netcdf() #只需要一次\n    return emis_inp\n\n\n#插值程序,从meic网格插值到wrf网格\ndef meic2wrf_regridder(lon_inp,lat_inp,lon,lat,interp_method = 'bilinear'):\n    '''\n    input:\n        lon_inp: wrf的经度网格(wrfinput[\"XLONG\"])\n        lat_inp: wrf的纬度网格(wrfinput[\"XLAT\"])\n        lon: meic的经度网格,np.2darray\n        lat: meic的纬度网格,np.2darray\n        emis: 转化了单位后的meic排放,np.2darray\n        interp_method: xesmf的插值方法\n    return:\n        wrf投影的排放源数据\n    '''\n    grid_out = {'lon': lon_inp,'lat': lat_inp}\n    grid_in = {'lon': lon,'lat': lat}\n    regridder = xe.Regridder(grid_in, grid_out, interp_method)#,weights=\"/home/tliu/data/python/emission/bilinear_200x320_179x239.nc\") #reuse_weights=True\n    #emis_inp = regridder(emis)\n    #fn = regridder.to_netcdf() #只需要一次\n    return regridder#emis_inp\n\n#计算一个月的有效小时数\ndef avg_hour(iemiss,emiss_year,emiss_month):\n    avg_hour_count = 0  \n    start_time = datetime.datetime(int(emiss_year),int(emiss_month),1,0)   #本月的开始时间,bjt\n    while start_time.strftime(\"%m\") == emiss_month:\n        avg_hour_count += week_emiss_factor[iemiss][int(start_time.strftime(\"%w\"))] * emission_time_distribution[iemiss][int(start_time.strftime(\"%H\"))]\n        start_time += datetime.timedelta(hours=1)\n    return avg_hour_count\n\n#物种单位转换\ndef convert_unit(var,value,iemiss,emiss_year=\"2016\",emiss_month=\"01\"):\n    avg_hour_count = avg_hour(iemiss,emiss_year,emiss_month)\n    #print(avg_hour_count)\n    if var in ['CO', 'CO2', 'NH3', 'NOx', 'SO2', ]:  #inorganic gas: ton/(grid.month) to mole/(km2.h)\n        emiss = value*1e6/(ll_area(lon,lat, 0.25)*avg_hour_count *inorganic_gas_mole_weight[var])\n    elif var in ['BC', 'OC', 'PM25', 'PM10', ]:  # aerosol: ton/(grid.month) to ug/(m2.s)\n        emiss = value*1e6/(ll_area(lon,lat, 0.25)*avg_hour_count*3600)\n    else:  # organic gas: million_mole/(grid.month) to mole/(km2.h)\n        emiss = value*1e6/(ll_area(lon,lat, 0.25)*avg_hour_count)\n    return emiss\n\n# 是否存在pickle文件，如果存在则读取\ndef pickle_read(pickle_file):\n    flag = False\n    try:\n        with open(pickle_file,\"rb\") as f:\n            return_dict = pickle.load(f)\n        flag = True\n        logger.success(\"success load \"+pickle_file)\n    except:\n        return_dict = {}\n    return flag,return_dict\n\n#计算wrfinput文件的md5值\ndef md5_value(file_name):\n    '''\n    每一个wrfinput文件都拥有唯一的md5值\n    通过md5区分不同wrfinput对应的interp_meic_emission\n    '''\n    with open(file_name, 'rb') as fp:\n        data = fp.read()\n    file_md5= hashlib.md5(data).hexdigest()\n    return file_md5\n\n#保存.pickle文件\ndef make_interp_meic_emission(emiss_year,emiss_month,md5value,lon_inp,lat_inp):\n    pickle_dir = my_dirname+\"/pickle/\"\n    if not os.path.exists(pickle_dir):\n        os.makedirs(pickle_dir)\n    \n    emiss_month0=str(int(emiss_month))\n    emiss_month0=emiss_month\n    regridder=meic2wrf_regridder(lon_inp,lat_inp,lon,lat,interp_method = 'bilinear')\n    \n    \n    flag,interp_meic_emission = pickle_read(pickle_dir+emiss_year+emiss_month+\"_\"+str(md5value)+\".pickle\")  #查看文件是否存在\n    if not flag:\n        for spec in ['SO2','NOx','NH3'##'CO2'\n            ,'CO','OC','BC','PM25','PM10','ALD','CH4','CSL','ETH','GLY','HC3','HC5','HC8','HCHO','ISO','KET','MACR','MGLY','MVK','NR','NVOL','OL2',\"OLI\",\"OLT\",\"ORA1\",\"ORA2\",\"TOL\",\"XYL\",\"VOC\"]:\n            interp_meic_emission[spec] = {}\n            for iemiss in [\"agriculture\",\"industry\",\"power\",\"residential\",\"transportation\"]:\n                #print(iemiss)\n                try:\n                    #meic_emis = np.loadtxt(RADM2_DIR+\"/\"+emiss_year+emiss_month+\"/\"+emiss_year+\"_\"+emiss_month+\"__\"+iemiss+\"__\"+spec+\".asc\",skiprows = 6)[::-1,:] #行转置了 #asc\n                    if spec in ['SO2','NOx','NH3','CO2','CO','OC','BC','PM25','PM10','VOC']:\n                        emiss_filename = RADM2_DIR + emiss_year + \"_\" + emiss_month0 + \"_\" + iemiss + \"_\" + spec + \".nc\"\n                    else :\n                        emiss_filename = RADM2_DIR + emiss_year + \"_\" + emiss_month0 + \"_\" + iemiss + \"_\" + \"RADM2\" +\"_\"+ spec + \".nc\"\n                    print(emiss_filename)\n                    #print(spec)\n                    ncfile = Dataset(emiss_filename, mode='r')\n                    #print(ncfile.variables)\n                    meic_emis = np.asarray(ncfile.variables['z'][:])\n                    ncfile.close()\n                    meic_emis = meic_emis.reshape(lat.shape[0], lat.shape[1])\n                    meic_emis = meic_emis[::-1,:]\n                    meic_emis = np.where(meic_emis &gt; 0, meic_emis, 0)\n                    meic_emis = convert_unit(var=spec,value=meic_emis,iemiss=iemiss,emiss_year=emiss_year,emiss_month=emiss_month)  #转化单位 月排放变成小时排放\n                    interp_meic_emission[spec][iemiss] = {}\n                    interp_meic_emission[spec][iemiss][\"base\"] = regridder(meic_emis)#meic2wrf(lon_inp,lat_inp,lon,lat,meic_emis,interp_method = 'bilinear') #默认 interp_method = 'bilinear' #conservative\n\n                except:\n                    print(\"ERROR \" +spec + \" \" +iemiss)\n                    sys.exit()\n                    pass\n\n        if not os.path.exists(pickle_dir+\"/\"+emiss_year+emiss_month+\"_\"+str(md5value)+\".pickle\"):\n            if not os.path.exists(pickle_dir):  \n                os.makedirs(pickle_dir)\n            with open(pickle_dir+\"/\"+emiss_year+emiss_month+\"_\"+str(md5value)+\".pickle\",\"wb\") as pickle_file:\n                pickle.dump(interp_meic_emission,pickle_file)\n            logger.success(pickle_dir+\"/\"+emiss_year+emiss_month+\"_\"+str(md5value)+\".pickle written\")\n    return\n\n#制作对应机制下排放清单\ndef make_wrfchemi(x):\n    # x : [wrfinput_file,itime,lon_inp,lat_inp,md5value,wrfchemi_save_dir]\n    wrfinput_file = x[0]\n    wrf_time_utc  = x[1]\n    lon_inp       = x[2]\n    lat_inp       = x[3]\n    md5value      = x[4]\n    savedir       = x[5]\n    '''\n        wrfinput_file: wrfinput文件路径\n        wrf_time_utc: 生成的排放源的时间\n    '''\n    local_t = np.floor(lon_inp / 15) + np.where(np.abs(lon_inp % 15) &gt;= 7.5, 1, 0)\n    week_emiss_local = np.zeros_like(local_t)\n    emission_time_local = np.zeros_like(local_t)\n    for i in range(local_t.shape[0]):\n        for j in range(local_t.shape[1]):\n            wrf_time_local = wrf_time_utc + datetime.timedelta(hours=int(local_t[i][j]))\n            week_emiss_local[i][j] = wrf_time_local.strftime(\"%w\")\n            emission_time_local[i][j] = wrf_time_local.strftime(\"%H\")\n\n    wrf_time_bjt = wrf_time_utc + datetime.timedelta(hours=8)\n    emiss_year = meic_year\n    emiss_month = wrf_time_bjt.strftime('%m')\n    domain_id = wrfinput_file.split(\"_\")[-1][-2:]   #\"01\"\n    logger.info(\"start generating \" + wrf_time_utc.strftime(\"%Y-%m-%d_%H:00:00\"))\n\n    ncfile = savedir+\"/\"+wrf_time_utc.strftime(\"%Y/%m/%d\")+\"/wrfchemi_d\"+domain_id+\"_\"+wrf_time_utc.strftime(\"%Y-%m-%d_%H:00:00\")+\"\"\n    if os.path.exists(ncfile) and os.path.getsize(ncfile) &gt; 56700000: #大小限制有点问题\n        logger.debug(ncfile+\" has been generated\")\n    else:\n        os.system(\"rm -f \"+ ncfile)\n        with open(my_dirname+\"/pickle/\"+emiss_year+emiss_month+\"_\"+str(md5value)+\".pickle\",\"rb\") as f:\n            interp_meic_emission = pickle.load(f)\n\n        #emission local time\n        #读取wrf 兰博特投影网格\n        for spec in interp_meic_emission.keys():\n            for iemiss in [\"agriculture\",\"industry\",\"power\",\"residential\",\"transportation\"]:\n                try:\n                    #各排放源直接相加作为总排放,\n                    # 系数乘在这里: 日变化，星期变化，高度层变化\n\n                    for i in range(local_t.shape[0]):\n                        for j in range(local_t.shape[1]):\n                            ## 周\n                            interp_meic_emission[spec][iemiss][\"base\"][i][j] *= week_emiss_factor[iemiss][int(week_emiss_local[i][j])]\n                            ## 日变化\n                            interp_meic_emission[spec][iemiss][\"base\"][i][j] *= emission_time_distribution[iemiss][int(emission_time_local[i][j])]\n                            \n                            \n                            \n                            \n                            if spec=='NOx':\n                                emission_time_distribution2=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1.072877925, 1.191637973, 1.301494371, 1.042186177, 1.033968469, 0.811988073, 0.696122852, 0.84972416, 1, 1, 1, 1, 1, 1, 1]\n                                interp_meic_emission[spec][iemiss][\"base\"][i][j] *= emission_time_distribution2[int(emission_time_local[i][j])]\n                    \n                    \n                    \n                    \n                    ##高度层变化\n                    \n                    interp_meic_emission[spec][iemiss][\"levels\"] = np.zeros((len(emission_height_distribution[\"power\"]),lon_inp.shape[0],lon_inp.shape[1]))\n\n                    for ilevel in range(len(emission_height_distribution[\"power\"])):\n                        interp_meic_emission[spec][iemiss][\"levels\"][ilevel,...] = interp_meic_emission[spec][iemiss][\"base\"] * emission_height_distribution[iemiss][ilevel]\n                except:\n                    pass\n\n        from addict import Dict\n        Meic_emission = Dict()\n\n        PL=[\"agriculture\",\"industry\",\"power\",\"residential\",\"transportation\"]\n        LL=[\"E_SO2\",\"E_NO\",\"E_NO2\",\"E_ALD\",\"E_HCHO\",\"E_ORA2\",\"E_NH3\",\"E_HC3\",\"E_HC5\",\"E_HC8\",\"E_ETH\",\"E_CO\",\n                            \"E_OL2\",\"E_OLT\",\"E_OLI\",\"E_TOL\",\"E_XYL\",\"E_KET\",\"E_CSL\",\"E_ISO\",\"E_PM25I\",\"E_PM25J\",\"E_SO4I\",\n                            \"E_SO4J\",\"E_NO3I\",\"E_NO3J\",\"E_ORGI\",\"E_ORGJ\",\"E_ECI\",\"E_ECJ\",\"E_PM_10\",\"E_CH3OH\",\"E_C2H5OH\",\"E_SO4C\",\"E_NO3C\",\"E_ORGC\",\"E_ECC\"]\n        for spec in LL:\n            for iemiss in PL:\n\n                Meic_emission[spec][iemiss][\"levels\"] = np.zeros((len(emission_height_distribution[\"power\"]), lon_inp.shape[0], lon_inp.shape[1]))\n\n        emiss = [\"agriculture\", \"industry\", \"power\", \"residential\", \"transportation\"]\n        for iemiss in emiss :\n            Meic_emission[\"E_SO2\"][iemiss][\"levels\"] = interp_meic_emission[\"SO2\"][iemiss][\"levels\"]  # so2\n            Meic_emission[\"E_NO\"][iemiss][\"levels\"] = interp_meic_emission[\"NOx\"][iemiss][\"levels\"] * 0.9  # no\n            Meic_emission[\"E_NO2\"][iemiss][\"levels\"] = interp_meic_emission[\"NOx\"][iemiss][\"levels\"] * 0.1  # no2\n            Meic_emission[\"E_ALD\"][iemiss][\"levels\"] = interp_meic_emission['ALD'][iemiss][\"levels\"] + \\\n                                                       interp_meic_emission['MGLY'][iemiss][\"levels\"] + \\\n                                                       interp_meic_emission['MACR'][iemiss][\"levels\"] * 0.5 + \\\n                                                       interp_meic_emission['GLY'][iemiss][\"levels\"]  # ald\n            Meic_emission[\"E_HCHO\"][iemiss][\"levels\"] = interp_meic_emission['HCHO'][iemiss][\"levels\"]  # hcho\n            Meic_emission[\"E_ORA2\"][iemiss][\"levels\"] = interp_meic_emission['ORA2'][iemiss][\"levels\"]  # ora2\n            Meic_emission[\"E_NH3\"][iemiss][\"levels\"] = interp_meic_emission['NH3'][iemiss][\"levels\"]  # nh3\n            Meic_emission[\"E_HC3\"][iemiss][\"levels\"] = interp_meic_emission['HC3'][iemiss][\"levels\"]  # hc3\n            Meic_emission[\"E_HC5\"][iemiss][\"levels\"] = interp_meic_emission['HC5'][iemiss][\"levels\"]  # hc5\n            Meic_emission[\"E_HC8\"][iemiss][\"levels\"] = interp_meic_emission['HC8'][iemiss][\"levels\"]  # hc8\n            Meic_emission[\"E_ETH\"][iemiss][\"levels\"] = interp_meic_emission['ETH'][iemiss][\"levels\"]  # eth\n            Meic_emission[\"E_CO\"][iemiss][\"levels\"] = interp_meic_emission['CO'][iemiss][\"levels\"]  # co\n            Meic_emission[\"E_OL2\"][iemiss][\"levels\"] = interp_meic_emission['OL2'][iemiss][\"levels\"]  # ol2\n            Meic_emission[\"E_OLT\"][iemiss][\"levels\"] = interp_meic_emission['OLT'][iemiss][\"levels\"] + \\\n                                                       interp_meic_emission['MACR'][iemiss][\"levels\"] * 0.5 + \\\n                                                       interp_meic_emission['MVK'][iemiss][\"levels\"] * 0.5  # olt\n            Meic_emission[\"E_OLI\"][iemiss][\"levels\"] = interp_meic_emission['OLI'][iemiss][\"levels\"]  # oli\n            Meic_emission[\"E_TOL\"][iemiss][\"levels\"] = interp_meic_emission['TOL'][iemiss][\"levels\"] * 0.2950  # tol\n            Meic_emission[\"E_XYL\"][iemiss][\"levels\"] = interp_meic_emission['XYL'][iemiss][\"levels\"]  # xyl\n            Meic_emission[\"E_KET\"][iemiss][\"levels\"] = interp_meic_emission['KET'][iemiss][\"levels\"] * 0.33 + \\\n                                                       interp_meic_emission['MVK'][iemiss][\"levels\"] * 0.5  # ket\n            Meic_emission[\"E_CSL\"][iemiss][\"levels\"] = interp_meic_emission['CSL'][iemiss][\"levels\"]  # csl\n            Meic_emission[\"E_ISO\"][iemiss][\"levels\"] = interp_meic_emission['ISO'][iemiss][\"levels\"]  # iso\n            Meic_emission[\"E_PM25I\"][iemiss][\"levels\"] = interp_meic_emission['PM25'][iemiss][\"levels\"] * 0.2  # pm2.5i\n            Meic_emission[\"E_PM25J\"][iemiss][\"levels\"] = interp_meic_emission['PM25'][iemiss][\"levels\"] * 0.8  # pm2.5j\n\n            Meic_emission[\"E_SO4I\"][iemiss][\"levels\"] = interp_meic_emission['PM25'][iemiss][\"levels\"] * 0.036  # so4i\n            Meic_emission[\"E_SO4J\"][iemiss][\"levels\"] = interp_meic_emission['PM25'][iemiss][\"levels\"] * 0.144  # so4j\n            Meic_emission[\"E_NO3I\"][iemiss][\"levels\"] = interp_meic_emission['PM25'][iemiss][\"levels\"] * 0.016  # no3i\n            Meic_emission[\"E_NO3J\"][iemiss][\"levels\"] = interp_meic_emission['PM25'][iemiss][\"levels\"] * 0.064  # no3j\n\n            Meic_emission[\"E_ORGI\"][iemiss][\"levels\"] = interp_meic_emission['OC'][iemiss][\"levels\"] * 0.2  # orgi\n            Meic_emission[\"E_ORGJ\"][iemiss][\"levels\"] = interp_meic_emission['OC'][iemiss][\"levels\"] * 0.8  # orgj\n            Meic_emission[\"E_ECI\"][iemiss][\"levels\"] = interp_meic_emission['BC'][iemiss][\"levels\"] * 0.2  # eci\n            Meic_emission[\"E_ECJ\"][iemiss][\"levels\"] = interp_meic_emission['BC'][iemiss][\"levels\"] * 0.8  # ecj\n            Meic_emission[\"E_PM_10\"][iemiss][\"levels\"] = interp_meic_emission['PM10'][iemiss][\"levels\"] +interp_meic_emission['PM25'][iemiss][\"levels\"]  # pm10\n            Meic_emission[\"E_CH3OH\"][iemiss][\"levels\"] = np.zeros_like(Meic_emission[\"E_SO2\"][iemiss][\"levels\"])  # CH3OH\n            Meic_emission[\"E_C2H5OH\"][iemiss][\"levels\"] = np.zeros_like(Meic_emission[\"E_SO2\"][iemiss][\"levels\"])  # C2H5OH\n            Meic_emission[\"E_SO4C\"][iemiss][\"levels\"] = np.zeros_like(Meic_emission[\"E_SO2\"][iemiss][\"levels\"])  # SO4C\n            Meic_emission[\"E_NO3C\"][iemiss][\"levels\"] = np.zeros_like(Meic_emission[\"E_SO2\"][iemiss][\"levels\"])  # NO3C\n            Meic_emission[\"E_ORGC\"][iemiss][\"levels\"] = np.zeros_like(Meic_emission[\"E_SO2\"][iemiss][\"levels\"])  # ORGC\n            Meic_emission[\"E_ECC\"][iemiss][\"levels\"] = np.zeros_like(Meic_emission[\"E_SO2\"][iemiss][\"levels\"])  # ECC\n\n        wrfchem_emission = {}\n        for spec in Meic_emission.keys():\n            Meic_emission[spec][\"all\"][\"levels\"] = np.zeros((len(emission_height_distribution[\"power\"]), lon_inp.shape[0], lon_inp.shape[1]))\n            for iemiss in [\"agriculture\",\"industry\",\"power\",\"residential\",\"transportation\"]:\n                try:\n                    Meic_emission[spec][\"all\"][\"levels\"] += Meic_emission[spec][iemiss][\"levels\"]\n                except:\n                    pass\n            \n            \n            #--------------agriculture----------------------------\n            #Meic_emission['NH3'][\"all\"][\"levels\"]=Meic_emission['NH3']['agriculture'][\"levels\"]\n            #--------------agriculture----------------------------\n            \n            wrfchem_emission[spec]=Meic_emission[spec][\"all\"][\"levels\"]\n       \n        #--------------agriculture----------------------------\n        #wrfchem_emission['E_NH3']=wrfchem_emission['E_NH3']*0.8    #Meic_emission['E_NH3']['agriculture'][\"levels\"]#Meic_emission[spec][\"all\"][\"levels\"]\n        #--------------agriculture----------------------------\n        #wrfchem_emission['E_SO2']=wrfchem_emission['E_SO2']*2\n\n\n        #生成nc文件\n        ds_dict = {\n            'dims': {\n                'Time':None,\n                'emissions_zdim_stag': wrfchem_emission[\"E_SO2\"].shape[0],\n                'south_north':wrfchem_emission[\"E_SO2\"].shape[1],\n                'west_east':wrfchem_emission[\"E_SO2\"].shape[2],\n                'DateStrLen': 19\n            },\n            'coords': {        \n                \"XLONG\": {\n                    'dims': (\"south_north\", \"west_east\"),\n                    'attrs': {        \n                        \"MemoryOrder\":\"XY\",\n                        \"description\":\"LONGITUDE, WEST IS NEGATIVE\",\n                        \"units\":\"degree east\",\n                        \"stagger\":\"\",\n                        \"FieldType\":104},\n                    'data': lon_inp\n                },\n                \"XLAT\": {\n                    'dims': (\"south_north\", \"west_east\"),\n                    'attrs': {        \n                        \"MemoryOrder\":\"XY\",\n                        \"description\":\"LATITUDE, SOUTH IS NEGATIVE\",\n                        \"units\":\"degree north\",\n                        \"stagger\":\"\",\n                        \"FieldType\":104},\n                    'data': lat_inp\n                }\n                },\n            'data_vars': { \n                \"Times\":{\n                    'dims': (\"Time\"),\n                    'attrs': {},\n                    'data': np.array([wrf_time_utc.strftime(\"%Y-%m-%d_%H:%M:%S\").encode(\"utf-8\")])\n                }\n            }\n        }\n\n        for ivar in wrfchem_emission.keys():\n            if ivar in [\"E_PM25I\",\"E_PM25J\",\"E_SO4I\",\"E_SO4J\",\"E_NO3I\",\"E_NO3J\",\"E_ORGI\",\"E_ORGJ\",\"E_ECI\",\"E_ECJ\",\"E_PM_10\",\"E_SO4C\",\"E_NO3C\",\"E_ORGC\",\"E_ECC\"]:\n                ds_dict['data_vars'][ivar] = {\n                        'dims': ('Time', 'emissions_zdim_stag', 'south_north', 'west_east'),\n                        'attrs': {        \n                            \"MemoryOrder\":\"XYZ\",\n                            \"description\":\"EMISSIONS\",\n                            \"units\":\"ug m^-2 s^-1\",\n                            'stagger' :\"Z\",\n                            \"FieldType\":104},\n                        'data': wrfchem_emission[ivar][np.newaxis,...]\n                }\n            else:\n                ds_dict['data_vars'][ivar] = {\n                        'dims': ('Time', 'emissions_zdim_stag', 'south_north', 'west_east'),\n                        'attrs': {        \n                            \"MemoryOrder\":\"XYZ\",\n                            \"description\":\"EMISSIONS\",\n                            \"units\":\"mol km^-2 hr^-1\",\n                            'stagger' :\"Z\",\n                            \"FieldType\":104},\n                        'data': wrfchem_emission[ivar][np.newaxis,...]\n                }\n    \n        ds = xr.Dataset.from_dict(ds_dict)\n        if not os.path.exists(savedir+\"/\"+wrf_time_utc.strftime(\"%Y/%m/%d\")):\n            try:\n                os.makedirs(savedir+\"/\"+wrf_time_utc.strftime(\"%Y/%m/%d\"))\n            except:\n                print('creat error :',savedir+\"/\"+wrf_time_utc.strftime(\"%Y/%m/%d\"))\n                pass\n        ds.to_netcdf(savedir+\"/\"+wrf_time_utc.strftime(\"%Y/%m/%d\")+\"/wrfchemi_d\"+domain_id+\"_\"+wrf_time_utc.strftime(\"%Y-%m-%d_%H:00:00\")+\"\")\n        # del ds_dict\n        # del ds\n        # gc.collect()\n        logger.success(\"finish generating \"+wrf_time_utc.strftime(\"%Y-%m-%d_%H:00:00\"))\n    return\n\n#并行跑数据\ndef parallel_make_wrfchemi(start_time,end_time,n_jobs=-1):\n\n    wrfinput_ds = xr.open_dataset(wrfinput_file)\n    md5value = md5_value(wrfinput_file)\n    lon_inp = wrfinput_ds['XLONG'][0, ...].values\n    lat_inp = wrfinput_ds['XLAT'][0, ...].values\n\n    timelist=[]   #需要生成排放源的时次(utc)\n    while start_time &lt;= end_time:\n        timelist.append(start_time)\n        start_time +=  datetime.timedelta(hours=1)\n\n    if n_jobs == -1:\n        n_jobs = multiprocessing.cpu_count()\n\n    month_already = []\n    for itime in timelist:\n        itime_bjt = itime + datetime.timedelta(hours=8)  # 北京时间\n        if not itime_bjt.strftime(\"%m\") in month_already:\n            make_interp_meic_emission(meic_year, itime_bjt.strftime(\"%m\"), md5value, lon_inp, lat_inp)\n            month_already.append(itime_bjt.strftime(\"%m\"))\n\n    all_list = []\n    for itime in timelist:\n        all_list.append([wrfinput_file,itime,lon_inp,lat_inp,md5value,wrfchemi_save_dir])\n\n    \n    with Pool(n_jobs) as p:\n        p.map(make_wrfchemi,all_list)\n\ndef merge_wrfchemi(dom):\n    attrs={'TITLE': ' OUTPUT FROM *             PROGRAM:WRF/CHEM V3.9.1 MODEL',\n     'START_DATE': starttime.strftime('%Y-%m-%d_%H:%M:%S'),#'2018-12-01_00:00:00',\n     'WEST-EAST_GRID_DIMENSION': wrfnamelist['domains']['e_we'][0],#240,\n     'SOUTH-NORTH_GRID_DIMENSION': wrfnamelist['domains']['e_sn'][0],#180,\n     'BOTTOM-TOP_GRID_DIMENSION':wrfnamelist['domains']['e_vert'][0], #45,\n     'DX': wrfnamelist['domains']['dx'][0],#20000.0,\n     'DY': wrfnamelist['domains']['dy'][0],#20000.0,\n     'GRIDTYPE': 'C',\n     'DIFF_OPT': 1,\n     'KM_OPT': 4,\n     'DAMP_OPT': 0,\n     'DAMPCOEF': 0.01,\n     'KHDIF': 0.0,\n     'KVDIF': 0.0,\n     'MP_PHYSICS': 2,\n     'RA_LW_PHYSICS': 4,\n     'RA_SW_PHYSICS': 4,\n     'SF_SFCLAY_PHYSICS': 1,\n     'SF_SURFACE_PHYSICS': 2,\n     'BL_PBL_PHYSICS': 1,\n     'CU_PHYSICS': 3,\n     'SF_LAKE_PHYSICS': 0,\n     'SURFACE_INPUT_SOURCE': 1,\n     'SST_UPDATE': 1,\n     'GRID_FDDA': 1,\n     'GFDDA_INTERVAL_M': 0,\n     'GFDDA_END_H': 0,\n     'GRID_SFDDA': 0,\n     'SGFDDA_INTERVAL_M': 0,\n     'SGFDDA_END_H': 0,\n     'HYPSOMETRIC_OPT': 2,\n     'WEST-EAST_PATCH_START_UNSTAG': 1,\n     'WEST-EAST_PATCH_END_UNSTAG': 239,\n     'WEST-EAST_PATCH_START_STAG': 1,\n     'WEST-EAST_PATCH_END_STAG': 240,\n     'SOUTH-NORTH_PATCH_START_UNSTAG': 1,\n     'SOUTH-NORTH_PATCH_END_UNSTAG': 179,\n     'SOUTH-NORTH_PATCH_START_STAG': 1,\n     'SOUTH-NORTH_PATCH_END_STAG': 180,\n     'BOTTOM-TOP_PATCH_START_UNSTAG': 1,\n     'BOTTOM-TOP_PATCH_END_UNSTAG': 44,\n     'BOTTOM-TOP_PATCH_START_STAG': 1,\n     'BOTTOM-TOP_PATCH_END_STAG': 45,\n     'GRID_ID': 1,\n     'PARENT_ID': 0,\n     'I_PARENT_START': 1,\n     'J_PARENT_START': 1,\n     'PARENT_GRID_RATIO': 1,\n     'DT': 60.0,\n     'CEN_LAT': 34.999996,\n     'CEN_LON': 100.0,\n     'TRUELAT1': 10.0,\n     'TRUELAT2': 60.0,\n     'MOAD_CEN_LAT': 34.999996,\n     'STAND_LON': 100.0,\n     'POLE_LAT': 90.0,\n     'POLE_LON': 0.0,\n     'GMT': 0.0,\n     'JULYR': 2018,\n     'JULDAY': 335,\n     'MAP_PROJ': 1,\n     'MAP_PROJ_CHAR': 'Lambert Conformal',\n     'MMINLU': 'MODIFIED_IGBP_MODIS_NOAH',\n     'NUM_LAND_CAT': 21,\n     'ISWATER': 17,\n     'ISLAKE': 21,\n     'ISICE': 15,\n     'ISURBAN': 13,\n     'ISOILWATER': 14}\n\n\n\n    timestart=starttime.floor('d')#'2017-5-1'\n    timeend=starttime.floor('d')+datetime.timedelta(hours=24)\n    #dom=1\n    outpath=path_meic_work+str(starttime.year)+'/'+starttime.strftime('%m')+'/'#''\n\n    filepath=path_meic_work+starttime.strftime('%Y/%m/')#'/WRF-Chem/model/cbmz_emis/meic_2017-20km-python/'\n    for i in pd.date_range(start=timestart,end=timeend,freq='d'): #periods=365,\n        #print(i.strftime('%Y-%m-%d_%H:%M:%S'))\n        for h in [0,12]:\n\n            time=i+datetime.timedelta(hours=h)\n            files='wrfchemi_d0'+str(int(dom))+'_'+pd.date_range(start=time,periods=12,freq='h').strftime('%Y-%m-%d_%H:%M:%S')\n            #path_meic_work+i.strftime('/%Y/%m/%d/')+files\n            ds=xr.open_mfdataset(path_meic_work+i.strftime('/%Y/%m/%d/')+files, concat_dim='Time',combine='nested')\n            ds['Time']=pd.date_range(start=time,periods=12,freq='h')\n\n            ds=ds.rename_dims({'emissions_zdim_stag':'emissions_zdim'})\n            ds.attrs=attrs\n            output_name=outpath+'wrfchemi_'+\"%02d\"%h+'z_d0'+str(int(dom))+'_'+time.strftime('%Y-%m-%d')\n\n            print('Writing:',output_name)\n            comp = dict(zlib=True, complevel=4)\n            encoding = {var: comp for var in ds.data_vars}\n            #encoding={'dis': {'zlib': True}}\n            ds.to_netcdf(output_name, encoding=encoding)\n            ds.close()\n            file_stats = os.stat(output_name)#显示文件大小\n            print(f'Success!, File Size {\"%.2f\"%(file_stats.st_size / (1024 * 1024))} MB')\n\n#创建单层目录\ndef mkdir_single(path):\n    #目录名称\n    #basename:返回目录路径中的最后一个元素\n    dirName = os.path.basename(path)\n    # 判断路径是否存在\n    isExists=os.path.exists(path)\n\n    if not isExists:\n        # 如果不存在，则创建单层目录\n        os.mkdir(path) \n        print('目录创建成功：' + dirName )\n        return True\n    else:\n        # 如果目录存在则不创建，并提示目录已存在\n        print('目录已存在：' + dirName )\n        return False            \ndef creat_wrfchemi(starttime):\n    print('Creating MEIC input')\n    os.chdir(path_wrf)   #创建meic生成目录\n    mkdir_single('meic')\n\n    os.system('mkdir '+path_meic_work)  #创建meic的chemi生成目录\n    os.chdir(path_meic_work)\n\n    import shutil  \n    for item in glob.glob(path_meic_work+'*'):  #delete all files in path_meic_work\n        print(item)\n        shutil.rmtree(item, ignore_errors=True)\n        \n\n    os.chdir(path_meic)\n\n    mkdir_single('work')\n\n\n    for dom in chem_domain:\n        print('wrfchemi domain: ',dom)\n        my_dict = {}\n        my_dict['start_time']=starttime.floor('d').strftime('%Y-%m-%dT%H')\n\n        my_dict['end_time']=(starttime.floor('d')+datetime.timedelta(days=2)).strftime('%Y-%m-%dT%H')#endtime.strftime('%Y-%m-%dT%H')\n        #my_dict['end_time']=endtime.strftime('%Y-%m-%dT%H')\n        my_dict['wrfchemi_save_dir']= path_meic_work\n\n        my_dict['my_dirname'] = path_meic+\"work/\" #排放所在目录名称 pickle\n\n        #my_dict['RADM2_DIR'] = \"/WRF-Chem/model/meic-original/meic_2017/RADM2/\"#\n        my_dict['RADM2_DIR'] = \"/WRF-Chem/model/MEIC/RADM2/2017/\"##\"/home/xuejingkai/data/WRF/DATA/emission/MEIC/2017/07/\"\n        my_dict['RADM2_DIR'] = RADM2_DIR#\"/WRF-Chem/model/meic-original/meic_2017/RADM2/\"\n        my_dict['wrfinput_file'] = path_wrf+'wrfinput_d0'+str(int(dom))  #!!!!!!!!!!!\n\n\n        # 保存文件\n        np.save(path_meic+'file.npy', my_dict)\n        # 读取文件\n        new_dict = np.load(path_meic+'file.npy', allow_pickle='TRUE')\n\n        print(new_dict)\n        #os.system('python meicrun.py')\n        #os.system('cp /home/xuejingkai/d1/WRF/work/gen_emiss/meic/code/run_meic.slurm .')\n\n        #with open('run_meic.slurm', encoding=\"utf-8\",mode=\"a\") as f:\n        #    f.write('python meicrun.py')    \n\n        #f.close()\n\n        #os.system('sbatch run_meic.slurm')\n            \n        \n        #from pyinstrument import Profiler\n\n        #profiler = Profiler()\n        #profiler.start()\n\n        '''\n\n        my_dirname = \"/home/tliu/data/python/emission/test_nc/\" #排放所在目录名称 pickle\n        # 其他指定路径\n        RADM2_DIR = \"/home/tliu/data/python/emission/test_nc/RADM2/\"  # meic RADM2文件存储路径。内部为YYYYMM的文件夹，文件夹内存放每个月都meic排放源文件\n        wrfinput_file = \"/home/tliu/data/python/emission/test_nc/wrfinput_d01\"  # wrfinput文件位置\n        wrfchemi_save_dir = \"/home/tliu/data/python/emission/test_nc/\"  # wrfchemi文件存放目录\n\n        my_dirname = \"/home/xuejingkai/data/WRF/ATMOS/meic/work/\" #排放所在目录名称 pickle\n        RADM2_DIR = \"/home/xuejingkai/data/WRF/DATA/emission/MEIC/2017/06/\"    #meic cb05文件存储路径。内部为YYYYMM的文件夹，文件夹内存放每个月都meic排放源文件\n        wrfinput_file = \"/home/xuejingkai/d1/WRF/work/wrfchem3/wrfinput_d01\"   #wrfinput文件位置\n        wrfchemi_save_dir = \"/home/xuejingkai/data/WRF/ATMOS/meic/work/\"   #wrfchemi文件存放目录\n        '''\n        \n        ################################\n        \n        global lon, lat,meic_year,wrfchemi_save_dir,wrfinput_file,RADM2_DIR,my_dirname\n        \n        meic_dict = np.load('file.npy', allow_pickle='TRUE').tolist()\n        #print(new_dict)\n        my_dirname = meic_dict['my_dirname']#排放所在目录名称 pickle\n        RADM2_DIR = meic_dict['RADM2_DIR']#  #meic cb05文件存储路径。内部为YYYYMM的文件夹，文件夹内存放每个月都meic排放源文件\n        wrfinput_file = meic_dict['wrfinput_file']   #wrfinput文件位置\n        wrfchemi_save_dir = meic_dict['wrfchemi_save_dir']  #wrfchemi文件存放目录    \n        \n        # meic 清单的年份\n        meic_year = \"2017\"\n        # meic经纬度,格点的位于每个网格的中心点\n        lon = np.arange(70.125, 150, 0.25, dtype=np.float32)\n        lat = np.arange(10.125,  60, 0.25, dtype=np.float32)\n        # mix\n        # lon = np.arange(40.125, 180, 0.25, dtype=np.float32)\n        # lat = np.arange(-20.125, 90, 0.25, dtype=np.float32)\n        lon, lat = np.meshgrid(lon, lat)\n        start_time2 = pd.to_datetime(meic_dict['start_time'])#datetime(2019,6,1,0)\n        end_time2 = pd.to_datetime(meic_dict['end_time'])#datetime(2019,6,10,0)\n        print(wrfinput_file)\n                    \n        parallel_make_wrfchemi(start_time2,end_time2,n_jobs=-1)\n        # 这里是你要分析的代码\n\n        #profiler.stop()\n\n        #profiler.print()\n        \n        #merge_wrfchemi(dom)        \n\n\nRADM2_DIR=\"/exports/d4/xuejingkai/down/meic/RADM2/2017/\"\npath_wrf\npath_meic\n\n'/exports/d4/xuejingkai/atmos/jupyter2/other/test/meic/'\n\n\n\nstarttime=pd.to_datetime('20240401')\n\n\ncreat_wrfchemi(starttime)\n\nCreating MEIC input\n目录已存在：meic\n/exports/d4/xuejingkai/atmos/jupyter2/other/test/meic//create_chemi/2024\n\n\nmkdir: cannot create directory '/exports/d4/xuejingkai/atmos/jupyter2/other/test/meic//create_chemi/': File exists\n\n\n目录已存在：work\nwrfchemi domain:  1\n{'start_time': '2024-04-01T00', 'end_time': '2024-04-03T00', 'wrfchemi_save_dir': '/exports/d4/xuejingkai/atmos/jupyter2/other/test/meic//create_chemi/', 'my_dirname': '/exports/d4/xuejingkai/atmos/jupyter2/other/test/meic/work/', 'RADM2_DIR': '/exports/d4/xuejingkai/down/meic/RADM2/2017/', 'wrfinput_file': '/exports/d4/xuejingkai/WRF/work/TW//case2019101200/runwrf/wrfinput_d01'}\n/exports/d4/xuejingkai/WRF/work/TW//case2019101200/runwrf/wrfinput_d01\n\n\n2024-06-20 16:12:19.123 | SUCCESS  | __main__:pickle_read:131 - success load /exports/d4/xuejingkai/atmos/jupyter2/other/test/meic/work//pickle/201704_8a08980933ea6034661e6aa723705ed7.pickle\n2024-06-20 16:12:19.818 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_02:00:00\n2024-06-20 16:12:19.838 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_19:00:00\n2024-06-20 16:12:19.860 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_03:00:00\n2024-06-20 16:12:19.859 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_01:00:00\n2024-06-20 16:12:19.855 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_00:00:00\n2024-06-20 16:12:19.886 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_11:00:00\n2024-06-20 16:12:19.878 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_04:00:00\n2024-06-20 16:12:19.887 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_10:00:00\n2024-06-20 16:12:19.887 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_05:00:00\n2024-06-20 16:12:19.890 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_07:00:00\n2024-06-20 16:12:19.892 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_13:00:00\n2024-06-20 16:12:19.886 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_12:00:00\n2024-06-20 16:12:19.894 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_14:00:00\n2024-06-20 16:12:19.897 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_09:00:00\n2024-06-20 16:12:19.896 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_08:00:00\n2024-06-20 16:12:19.902 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_21:00:00\n2024-06-20 16:12:19.898 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_17:00:00\n2024-06-20 16:12:19.909 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_18:00:00\n2024-06-20 16:12:19.912 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_02:00:00\n2024-06-20 16:12:19.912 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_01:00:00\n2024-06-20 16:12:19.916 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_00:00:00\n2024-06-20 16:12:19.918 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_20:00:00\n2024-06-20 16:12:19.950 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_23:00:00\n2024-06-20 16:12:19.923 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_22:00:00\n2024-06-20 16:12:19.931 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_15:00:00\n2024-06-20 16:12:19.932 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_06:00:00\n2024-06-20 16:12:20.060 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-01_16:00:00\n2024-06-20 16:12:20.040 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_03:00:00\n2024-06-20 16:12:20.036 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_04:00:00\n2024-06-20 16:12:20.138 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_07:00:00\n2024-06-20 16:12:20.167 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_05:00:00\n2024-06-20 16:12:20.153 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_06:00:00\n2024-06-20 16:12:31.459 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_19:00:00\n2024-06-20 16:12:31.835 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_08:00:00\n2024-06-20 16:12:32.513 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_02:00:00\n2024-06-20 16:12:32.773 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_01:00:00\n2024-06-20 16:12:32.860 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_17:00:00\n2024-06-20 16:12:32.885 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_09:00:00\n2024-06-20 16:12:32.930 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_23:00:00\n2024-06-20 16:12:33.077 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_05:00:00\n2024-06-20 16:12:33.110 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_10:00:00\n2024-06-20 16:12:33.246 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_11:00:00\n2024-06-20 16:12:33.317 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_12:00:00\n2024-06-20 16:12:33.442 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_13:00:00\n2024-06-20 16:12:33.443 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_15:00:00\n2024-06-20 16:12:33.508 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_16:00:00\n2024-06-20 16:12:33.596 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_06:00:00\n2024-06-20 16:12:33.843 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_14:00:00\n2024-06-20 16:12:33.884 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_15:00:00\n2024-06-20 16:12:33.994 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_07:00:00\n2024-06-20 16:12:34.025 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_16:00:00\n2024-06-20 16:12:34.241 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_03:00:00\n2024-06-20 16:12:34.259 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_01:00:00\n2024-06-20 16:12:34.384 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_17:00:00\n2024-06-20 16:12:34.635 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_10:00:00\n2024-06-20 16:12:34.683 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_18:00:00\n2024-06-20 16:12:34.676 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_07:00:00\n2024-06-20 16:12:34.749 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_19:00:00\n2024-06-20 16:12:35.210 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_20:00:00\n2024-06-20 16:12:35.310 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_21:00:00\n2024-06-20 16:12:35.494 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_21:00:00\n2024-06-20 16:12:35.531 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_00:00:00\n2024-06-20 16:12:35.654 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_12:00:00\n2024-06-20 16:12:35.941 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_22:00:00\n2024-06-20 16:12:35.993 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-02_23:00:00\n2024-06-20 16:12:36.009 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_04:00:00\n2024-06-20 16:12:36.064 | INFO     | __main__:make_wrfchemi:223 - start generating 2024-04-03_00:00:00\n2024-06-20 16:12:36.208 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_03:00:00\n2024-06-20 16:12:36.315 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_09:00:00\n2024-06-20 16:12:36.550 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_18:00:00\n2024-06-20 16:12:36.567 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_05:00:00\n2024-06-20 16:12:36.646 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_00:00:00\n2024-06-20 16:12:37.085 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_13:00:00\n2024-06-20 16:12:37.203 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_02:00:00\n2024-06-20 16:12:37.306 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_22:00:00\n2024-06-20 16:12:37.354 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_20:00:00\n2024-06-20 16:12:37.452 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_14:00:00\n2024-06-20 16:12:37.680 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_08:00:00\n2024-06-20 16:12:37.734 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_11:00:00\n2024-06-20 16:12:37.793 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_06:00:00\n2024-06-20 16:12:38.114 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-01_04:00:00\n2024-06-20 16:12:41.871 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_11:00:00\n2024-06-20 16:12:42.559 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_12:00:00\n2024-06-20 16:12:42.900 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_13:00:00\n2024-06-20 16:12:43.006 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_14:00:00\n2024-06-20 16:12:43.440 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_20:00:00\n2024-06-20 16:12:43.516 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_16:00:00\n2024-06-20 16:12:43.588 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-03_00:00:00\n2024-06-20 16:12:43.809 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_22:00:00\n2024-06-20 16:12:43.926 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_10:00:00\n2024-06-20 16:12:43.975 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_08:00:00\n2024-06-20 16:12:44.002 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_09:00:00\n2024-06-20 16:12:44.258 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_23:00:00\n2024-06-20 16:12:44.802 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_21:00:00\n2024-06-20 16:12:45.172 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_15:00:00\n2024-06-20 16:12:45.193 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_18:00:00\n2024-06-20 16:12:45.744 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_19:00:00\n2024-06-20 16:12:45.751 | SUCCESS  | __main__:make_wrfchemi:424 - finish generating 2024-04-02_17:00:00\n\n\nwrfchemi domain:  2\n{'start_time': '2024-04-01T00', 'end_time': '2024-04-03T00', 'wrfchemi_save_dir': '/exports/d4/xuejingkai/atmos/jupyter2/other/test/meic//create_chemi/', 'my_dirname': '/exports/d4/xuejingkai/atmos/jupyter2/other/test/meic/work/', 'RADM2_DIR': '/exports/d4/xuejingkai/down/meic/RADM2/2017/', 'wrfinput_file': '/exports/d4/xuejingkai/WRF/work/TW//case2019101200/runwrf/wrfinput_d02'}\n/exports/d4/xuejingkai/WRF/work/TW//case2019101200/runwrf/wrfinput_d02\n/exports/d4/xuejingkai/down/meic/RADM2/2017/2017_04_agriculture_SO2.nc\nERROR SO2 agriculture\n\n\n\nKeyboardInterrupt",
    "crumbs": [
      "Home",
      "画图",
      "create_wrf_meic清单"
    ]
  },
  {
    "objectID": "linux.html",
    "href": "linux.html",
    "title": "ustc",
    "section": "",
    "text": "实现免密登陆： https://www.runoob.com/w3cnote/set-ssh-login-key.html\nlinux本地连接远程linux服务器：\nssh-copy-id -i ~/.ssh/id_rsa.pub user@123.45.67.89\nwindows的cmd与linux免密 可实现普通ssh 直接访问，跳过动态验证\ncat ~/.ssh/id_rsa.pub | ssh user@123.45.67.89 \"cat &gt;&gt; ~/.ssh/authorized_keys\"\n或在“终端管理员”内输入：\nfunction ssh-copy-id([string]$userAtMachine, $args){   \n    $publicKey = \"$ENV:USERPROFILE\" + \"/.ssh/id_rsa.pub\"\n    if (!(Test-Path \"$publicKey\")){\n        Write-Error \"ERROR: failed to open ID file '$publicKey': No such file\"            \n    }\n    else {\n        & cat \"$publicKey\" | ssh $args $userAtMachine \"umask 077; test -d .ssh || mkdir .ssh ; cat &gt;&gt; .ssh/authorized_keys || exit 1\"      \n    }\n}\n之后可以：\nssh-copy-id -i ~/.ssh/id_rsa.pub user@123.45.67.89",
    "crumbs": [
      "Home",
      "基础",
      "linux"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ustc",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Home",
      "基础",
      "ustc"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "era5数据.html",
    "href": "era5数据.html",
    "title": "ustc",
    "section": "",
    "text": "mix ERA5 and ERA5T data netCDF new dimension expver\nprint(\"Hello, World!\")\nimport xarray as xr\nimport numpy as np\nimport metpy\nds1=xr.open_dataset('./1.nc')\nds2=xr.open_dataset('./2.nc')\n\nds=xr.concat([ds2,ds1.sel(expver=1).combine_first(ds1.sel(expver=5))],dim='time')\nds1.sel(expver=1).combine_first( ds1.sel(expver=5)).u10[:,0,0].plot()"
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "进入课题组须知",
    "section": "",
    "text": "欢迎您加入我们的课题组！在这里，您将参与各种研究活动，并利用我们提供的资源来开展科研工作。本网站将帮助您了解如何使用服务器、进行配置、编写代码以及进行数据可视化。\n\n\n\n\n我们课题组提供了一台高性能计算服务器供成员使用。您需要以下信息来访问服务器：\n\n服务器地址: your.server.address\n用户名: your-username\n密码: your-password\n\n您可以使用 SSH 连接到服务器：\n\n\n\n\n以下是一些常用的服务器命令：\n\n查看目录: ls\n改变目录: cd\n复制文件: cp\n移动文件: mv\n删除文件: rm\n查看文件内容: cat\n\n\n\n\n在我们的课题组，您可以根据需要配置您的工作环境和软件，以支持您的科研工作。以下是一些常见的配置任务：\n\n\n为了更有效地进行科研工作，建议使用虚拟环境管理工具如 conda 来管理您的 Python 环境。例如：\nprint(\"Hello, World!\")\n\n\n\n【腾讯文档】数据 https://docs.qq.com/sheet/DUXhqVElDWVJid05Y?tab=BB08J2\n关于github pages使用参考https://segmentfault.com/a/1190000022272311",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#服务器使用",
    "href": "introduction.html#服务器使用",
    "title": "进入课题组须知",
    "section": "",
    "text": "我们课题组提供了一台高性能计算服务器供成员使用。您需要以下信息来访问服务器：\n\n服务器地址: your.server.address\n用户名: your-username\n密码: your-password\n\n您可以使用 SSH 连接到服务器：",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#基本命令",
    "href": "introduction.html#基本命令",
    "title": "进入课题组须知",
    "section": "",
    "text": "以下是一些常用的服务器命令：\n\n查看目录: ls\n改变目录: cd\n复制文件: cp\n移动文件: mv\n删除文件: rm\n查看文件内容: cat",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "introduction.html#服务器配置",
    "href": "introduction.html#服务器配置",
    "title": "进入课题组须知",
    "section": "",
    "text": "在我们的课题组，您可以根据需要配置您的工作环境和软件，以支持您的科研工作。以下是一些常见的配置任务：\n\n\n为了更有效地进行科研工作，建议使用虚拟环境管理工具如 conda 来管理您的 Python 环境。例如：\nprint(\"Hello, World!\")\n\n\n\n【腾讯文档】数据 https://docs.qq.com/sheet/DUXhqVElDWVJid05Y?tab=BB08J2\n关于github pages使用参考https://segmentfault.com/a/1190000022272311",
    "crumbs": [
      "Home",
      "Introduction"
    ]
  },
  {
    "objectID": "notebooks/cartopymap.html",
    "href": "notebooks/cartopymap.html",
    "title": "ustc",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport matplotlib.ticker as ticker\nfrom cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter\n\ndef add_gridline_labels(ax,\n                        labels_set    = None,\n                        side          = None): # 'top', 'bottom', 'left', 'right'\n    \n    gl = ax.gridlines(draw_labels=True,x_inline=False, y_inline=False)\n    gl.xlabel_style = {'size': 12, 'color': 'black'\n    , 'rotation': 0, 'rotation_mode': 'anchor'}\n    gl.ylabel_style = {'size': 12, 'color': 'black'\n    , 'rotation': 0, 'rotation_mode': 'anchor'}\n    \n    if side == 'top':\n        gl.xlocator = ticker.FixedLocator(labels_set)\n        gl.ylines = False\n        gl.top_labels = True\n        gl.bottom_labels = False\n        gl.left_labels = False\n        gl.right_labels = False\n    elif side == 'bottom':\n        gl.xlocator = ticker.FixedLocator(labels_set)\n        gl.ylines = False\n        gl.top_labels = False\n        gl.bottom_labels = True\n        gl.left_labels = False\n        gl.right_labels = False\n    elif side == 'left':\n        gl.ylocator = ticker.FixedLocator(labels_set)\n        gl.xlines = False\n        gl.top_labels = False\n        gl.bottom_labels = False\n        gl.left_labels = True\n        gl.right_labels = False\n    elif side == 'right':\n        gl.ylocator = ticker.FixedLocator(labels_set)\n        gl.xlines = False\n        gl.top_labels = False\n        gl.bottom_labels = False\n        gl.left_labels = False\n        gl.right_labels = True\n        \n    gl.xformatter = LongitudeFormatter()\n    gl.yformatter = LatitudeFormatter()\n\n    return ax\n\nfig = plt.figure()\n\nrotated_crs = ccrs.RotatedPole(pole_longitude=120.0, pole_latitude=70.0)\nax = plt.axes(projection=rotated_crs)\nax.set_extent((-10, 10, 50, 60), crs=ccrs.PlateCarree())\nax.coastlines(resolution='50m')\n\nadd_gridline_labels(ax, \n                    labels_set = [-4, 0, 4, 8, 12,16],\n                    side = 'top')\n\nadd_gridline_labels(ax, \n                    labels_set = [-12, -8, -4, 0, 4],\n                    side = 'bottom')\n\nadd_gridline_labels(ax, \n                    labels_set = [52, 56, 60],\n                    side = 'left')\n\nadd_gridline_labels(ax, \n                    labels_set = [48, 52, 56],\n                    side = 'right')\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport cartopy.crs as ccrs\nimport matplotlib.ticker as ticker\nfrom cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter\n\ndef add_gridline_labels(ax,\n                        labels_set    = None,\n                        side          = None): # 'top', 'bottom', 'left', 'right'\n    \n    gl = ax.gridlines(draw_labels=True,x_inline=False, y_inline=False)\n    gl.xlabel_style = {'size': 12, 'color': 'black'\n    , 'rotation': 0, 'rotation_mode': 'anchor'}\n    gl.ylabel_style = {'size': 12, 'color': 'black'\n    , 'rotation': 0, 'rotation_mode': 'anchor'}\n    \n    if side == 'top':\n        gl.xlocator = ticker.FixedLocator(labels_set)\n        gl.ylines = False\n        gl.top_labels = True\n        gl.bottom_labels = False\n        gl.left_labels = False\n        gl.right_labels = False\n    elif side == 'bottom':\n        gl.xlocator = ticker.FixedLocator(labels_set)\n        gl.ylines = False\n        gl.top_labels = False\n        gl.bottom_labels = True\n        gl.left_labels = False\n        gl.right_labels = False\n    elif side == 'left':\n        gl.ylocator = ticker.FixedLocator(labels_set)\n        gl.xlines = False\n        gl.top_labels = False\n        gl.bottom_labels = False\n        gl.left_labels = True\n        gl.right_labels = False\n    elif side == 'right':\n        gl.ylocator = ticker.FixedLocator(labels_set)\n        gl.xlines = False\n        gl.top_labels = False\n        gl.bottom_labels = False\n        gl.left_labels = False\n        gl.right_labels = True\n        \n    gl.xformatter = LongitudeFormatter()\n    gl.yformatter = LatitudeFormatter()\n\n    return ax\n\nfig = plt.figure()\n\ncrs = ccrs.PlateCarree()\nax = plt.axes(projection=crs)\nax.set_extent((-10, 10, 50, 60), crs=ccrs.PlateCarree())\nax.coastlines(resolution='50m')\n\n\nadd_gridline_labels(ax, \n                    labels_set = [-12, -8, -4, 0, 4],\n                    side = 'bottom')\n\nadd_gridline_labels(ax, \n                    labels_set = [52, 56, 60],\n                    side = 'left')",
    "crumbs": [
      "Home",
      "画图",
      "plot_cartopy_map模板"
    ]
  },
  {
    "objectID": "notebooks/extractwrf_LC.html",
    "href": "notebooks/extractwrf_LC.html",
    "title": "ustc",
    "section": "",
    "text": "import salem \nimport xarray as xr\nimport pandas as pd\nimport xesmf as xe\nimport matplotlib.pyplot as plt\nimport glob\nimport numpy as np\n\n&lt;frozen importlib._bootstrap&gt;:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility. Expected 56 from C header, got 64 from PyObject\n\n\n\nimport xarray as xr\nfrom netCDF4 import Dataset\nfrom wrf import getvar\n\n# 打开 NetCDF 文件\nfn = '/exports/d4/xuejingkai/WRF/work/LC/case_taian_2022070900/runwrf/wrfout_d02_2022-07-24_09:00:00'\nncfile = Dataset(fn)\n\n# 需要读取的变量列表\nk1 = ['SWDOWN']\nk0 = ['height', 'pressure', 'PBLH', 'rh', 'tk', 'ua', 'va']\n\n# 创建一个空的 xarray 数据集\ndataset = xr.Dataset()\n\n# 读取 k1 列表中的变量\nfor var in k1:\n    data = getvar(ncfile, var)\n    dataset[var] = data#xr.DataArray(data, dims=('Time', 'south_north', 'west_east'))\n\n# 读取 k0 列表中的变量\nfor var in k0:\n    data = getvar(ncfile, var)\n    dataset[var] = data#xr.DataArray(data, dims=('Time', 'bottom_top', 'south_north', 'west_east'))\n\n# 关闭 NetCDF 文件\nncfile.close()\n\n\ndataset=dataset.assign_coords(coords=dict(\n        lon=([\"south_north\", \"west_east\"], dataset.XLONG.values),\n        lat=([\"south_north\", \"west_east\"], dataset.XLAT.values),\n        Time=pd.to_datetime(dataset.Time.values.astype(str), format=\"%Y-%m-%dT%H:%M:%S\")\n    )).sel(bottom_top=3)\n\n\nds=dataset\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:   (south_north: 350, west_east: 300)\nCoordinates:\n    XLONG     (south_north, west_east) float32 115.1 115.2 115.2 ... 118.8 118.8\n    XLAT      (south_north, west_east) float32 34.39 34.39 34.39 ... 37.86 37.86\n    XTIME     float32 2.214e+04\n    Time      datetime64[ns] 2022-07-24T09:00:00\n    lon       (south_north, west_east) float32 115.1 115.2 115.2 ... 118.8 118.8\n    lat       (south_north, west_east) float32 34.39 34.39 34.39 ... 37.86 37.86\nDimensions without coordinates: south_north, west_east\nData variables:\n    SWDOWN    (south_north, west_east) float32 460.2 459.9 459.9 ... 411.4 411.1\n    height    (south_north, west_east) float32 157.4 157.4 157.4 ... 103.1 102.8\n    pressure  (south_north, west_east) float32 985.7 985.8 985.7 ... 990.9 991.0\n    PBLH      (south_north, west_east) float32 1.859e+03 1.561e+03 ... 1.863e+03\n    rh        (south_north, west_east) float32 48.51 48.71 48.89 ... 38.75 40.04\n    tk        (south_north, west_east) float32 305.1 305.1 305.1 ... 306.8 306.6\n    ua        (south_north, west_east) float32 -1.468 -1.462 ... 1.39 0.5218\n    va        (south_north, west_east) float32 6.761 6.737 6.696 ... 4.513 4.954xarray.DatasetDimensions:south_north: 350west_east: 300Coordinates: (6)XLONG(south_north, west_east)float32115.1 115.2 115.2 ... 118.8 118.8array([[115.14053 , 115.15259 , 115.16461 , ..., 118.71506 , 118.72711 ,\n        118.739136],\n       [115.14032 , 115.15234 , 115.16437 , ..., 118.71527 , 118.727325,\n        118.73935 ],\n       [115.140076, 115.1521  , 115.164154, ..., 118.715485, 118.72754 ,\n        118.73956 ],\n       ...,\n       [115.05643 , 115.069   , 115.08157 , ..., 118.79266 , 118.80524 ,\n        118.81781 ],\n       [115.05618 , 115.068756, 115.08133 , ..., 118.79288 , 118.80548 ,\n        118.818054],\n       [115.05591 , 115.06851 , 115.081085, ..., 118.79312 , 118.805695,\n        118.81827 ]], dtype=float32)XLAT(south_north, west_east)float3234.39 34.39 34.39 ... 37.86 37.86array([[34.394245, 34.394432, 34.394623, ..., 34.39645 , 34.396286,\n        34.3961  ],\n       [34.404175, 34.40436 , 34.404556, ..., 34.406384, 34.406204,\n        34.406025],\n       [34.4141  , 34.414288, 34.414486, ..., 34.41631 , 34.41614 ,\n        34.41595 ],\n       ...,\n       [37.841076, 37.841274, 37.841473, ..., 37.843376, 37.843204,\n        37.84301 ],\n       [37.851006, 37.851208, 37.851406, ..., 37.85331 , 37.85313 ,\n        37.852947],\n       [37.860935, 37.861137, 37.861332, ..., 37.863243, 37.86306 ,\n        37.86288 ]], dtype=float32)XTIME()float322.214e+04array(22140., dtype=float32)Time()datetime64[ns]2022-07-24T09:00:00array('2022-07-24T09:00:00.000000000', dtype='datetime64[ns]')lon(south_north, west_east)float32115.1 115.2 115.2 ... 118.8 118.8array([[115.14053 , 115.15259 , 115.16461 , ..., 118.71506 , 118.72711 ,\n        118.739136],\n       [115.14032 , 115.15234 , 115.16437 , ..., 118.71527 , 118.727325,\n        118.73935 ],\n       [115.140076, 115.1521  , 115.164154, ..., 118.715485, 118.72754 ,\n        118.73956 ],\n       ...,\n       [115.05643 , 115.069   , 115.08157 , ..., 118.79266 , 118.80524 ,\n        118.81781 ],\n       [115.05618 , 115.068756, 115.08133 , ..., 118.79288 , 118.80548 ,\n        118.818054],\n       [115.05591 , 115.06851 , 115.081085, ..., 118.79312 , 118.805695,\n        118.81827 ]], dtype=float32)lat(south_north, west_east)float3234.39 34.39 34.39 ... 37.86 37.86array([[34.394245, 34.394432, 34.394623, ..., 34.39645 , 34.396286,\n        34.3961  ],\n       [34.404175, 34.40436 , 34.404556, ..., 34.406384, 34.406204,\n        34.406025],\n       [34.4141  , 34.414288, 34.414486, ..., 34.41631 , 34.41614 ,\n        34.41595 ],\n       ...,\n       [37.841076, 37.841274, 37.841473, ..., 37.843376, 37.843204,\n        37.84301 ],\n       [37.851006, 37.851208, 37.851406, ..., 37.85331 , 37.85313 ,\n        37.852947],\n       [37.860935, 37.861137, 37.861332, ..., 37.863243, 37.86306 ,\n        37.86288 ]], dtype=float32)Data variables: (8)SWDOWN(south_north, west_east)float32460.2 459.9 459.9 ... 411.4 411.1FieldType :104MemoryOrder :XY description :DOWNWARD SHORT WAVE FLUX AT GROUND SURFACEunits :W m-2stagger :coordinates :XLONG XLAT XTIMEprojection :LambertConformal(stand_lon=117.0, moad_cen_lat=34.999996185302734, truelat1=10.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)array([[460.1961 , 459.90042, 459.9419 , ..., 404.49927, 404.22885,\n        403.95847],\n       [459.92307, 459.94464, 459.79843, ..., 404.45078, 404.1778 ,\n        403.90073],\n       [460.23068, 459.88315, 459.66608, ..., 404.3852 , 404.11893,\n        403.84656],\n       ...,\n       [473.60046, 473.83105, 473.24246, ..., 411.55505, 411.2502 ,\n        410.95398],\n       [473.51923, 473.69177, 473.10977, ..., 411.5768 , 411.31802,\n        411.01532],\n       [473.76318, 473.17557, 472.72244, ..., 411.63852, 411.36053,\n        411.0719 ]], dtype=float32)height(south_north, west_east)float32157.4 157.4 157.4 ... 103.1 102.8FieldType :104MemoryOrder :XYZdescription :model height - [MSL] (mass grid)units :mstagger :coordinates :XLONG XLAT XTIMEprojection :LambertConformal(stand_lon=117.0, moad_cen_lat=34.999996185302734, truelat1=10.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)array([[157.37878 , 157.41476 , 157.40614 , ..., 115.461266, 114.332245,\n        113.16985 ],\n       [157.67412 , 157.7188  , 157.71484 , ..., 116.52206 , 115.31918 ,\n        114.07375 ],\n       [157.94824 , 157.99954 , 157.99655 , ..., 117.68665 , 116.43732 ,\n        115.13014 ],\n       ...,\n       [141.6564  , 141.28668 , 140.91298 , ..., 103.853065, 103.59784 ,\n        103.29673 ],\n       [142.02374 , 141.63289 , 141.24817 , ..., 103.62081 , 103.36601 ,\n        103.06541 ],\n       [142.39323 , 141.98892 , 141.58073 , ..., 103.339516, 103.08349 ,\n        102.7979  ]], dtype=float32)pressure(south_north, west_east)float32985.7 985.8 985.7 ... 990.9 991.0FieldType :104MemoryOrder :XYZdescription :pressureunits :hPastagger :coordinates :XLONG XLAT XTIMEprojection :LambertConformal(stand_lon=117.0, moad_cen_lat=34.999996185302734, truelat1=10.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)_FillValue :1e+20missing_value :1e+20array([[985.6939 , 985.754  , 985.7054 , ..., 992.0021 , 992.23083,\n        992.2248 ],\n       [985.7161 , 985.67834, 985.6946 , ..., 991.8732 , 992.0048 ,\n        992.18933],\n       [985.6251 , 985.6426 , 985.6337 , ..., 991.7479 , 991.8725 ,\n        992.06036],\n       ...,\n       [983.7012 , 983.83246, 983.8962 , ..., 990.82477, 990.8514 ,\n        990.98285],\n       [983.6924 , 983.7692 , 983.83777, ..., 990.8547 , 990.8814 ,\n        990.93823],\n       [983.63727, 983.65497, 983.78577, ..., 990.8238 , 990.90155,\n        991.0041 ]], dtype=float32)PBLH(south_north, west_east)float321.859e+03 1.561e+03 ... 1.863e+03FieldType :104MemoryOrder :XY description :PBL HEIGHTunits :mstagger :coordinates :XLONG XLAT XTIMEprojection :LambertConformal(stand_lon=117.0, moad_cen_lat=34.999996185302734, truelat1=10.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)array([[1859.4852, 1560.6559, 1560.6011, ..., 1853.731 , 1853.8456,\n        1853.9585],\n       [1859.5391, 1560.6913, 1560.634 , ..., 1853.6937, 1853.8295,\n        1853.9875],\n       [1859.5914, 1560.7297, 1560.669 , ..., 1853.6482, 1853.8021,\n        1853.983 ],\n       ...,\n       [1871.6846, 1871.5824, 1871.4707, ..., 2968.8967, 1863.5708,\n        1563.6102],\n       [1871.7682, 2391.8499, 1871.5656, ..., 2968.933 , 1863.6505,\n        1563.7052],\n       [1871.8544, 1871.759 , 2391.854 , ..., 2381.1326, 1863.6564,\n        1863.4911]], dtype=float32)rh(south_north, west_east)float3248.51 48.71 48.89 ... 38.75 40.04FieldType :104MemoryOrder :XYZdescription :relative humidityunits :%stagger :coordinates :XLONG XLAT XTIMEprojection :LambertConformal(stand_lon=117.0, moad_cen_lat=34.999996185302734, truelat1=10.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)array([[48.513756, 48.7072  , 48.892487, ..., 52.86996 , 52.734356,\n        52.648216],\n       [48.66846 , 48.89057 , 49.04725 , ..., 53.08839 , 52.997047,\n        52.87213 ],\n       [48.84868 , 49.019173, 49.156506, ..., 53.297787, 53.20271 ,\n        53.098106],\n       ...,\n       [22.285059, 22.332302, 22.362633, ..., 38.38216 , 39.38529 ,\n        40.765907],\n       [22.15999 , 22.222256, 22.262531, ..., 38.01065 , 38.898956,\n        40.37399 ],\n       [22.046022, 22.127161, 22.184786, ..., 37.85297 , 38.74928 ,\n        40.041878]], dtype=float32)tk(south_north, west_east)float32305.1 305.1 305.1 ... 306.8 306.6FieldType :104MemoryOrder :XYZdescription :temperatureunits :Kstagger :coordinates :XLONG XLAT XTIMEprojection :LambertConformal(stand_lon=117.0, moad_cen_lat=34.999996185302734, truelat1=10.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)_FillValue :1e+20missing_value :1e+20array([[305.1265 , 305.10226, 305.07455, ..., 304.0406 , 304.07877,\n        304.09497],\n       [305.123  , 305.08987, 305.06894, ..., 304.01035, 304.03824,\n        304.078  ],\n       [305.10883, 305.0821 , 305.0601 , ..., 303.9798 , 304.0112 ,\n        304.05225],\n       ...,\n       [309.6183 , 309.60526, 309.59082, ..., 306.8876 , 306.72293,\n        306.4585 ],\n       [309.65158, 309.62988, 309.61786, ..., 306.95102, 306.80417,\n        306.5229 ],\n       [309.6806 , 309.6564 , 309.6415 , ..., 306.96243, 306.81442,\n        306.58228]], dtype=float32)ua(south_north, west_east)float32-1.468 -1.462 ... 1.39 0.5218FieldType :104MemoryOrder :XYZdescription :destaggered u-wind componentunits :m s-1stagger :coordinates :XLONG XLAT XTIMEprojection :LambertConformal(stand_lon=117.0, moad_cen_lat=34.999996185302734, truelat1=10.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)array([[-1.4677241 , -1.4615461 , -1.3770945 , ...,  2.1735039 ,\n         2.0144355 ,  1.8355489 ],\n       [-1.509434  , -1.4900515 , -1.3876362 , ...,  2.1911564 ,\n         1.9932866 ,  1.8518698 ],\n       [-1.5533473 , -1.5303496 , -1.407121  , ...,  2.2127395 ,\n         2.005694  ,  1.8591018 ],\n       ...,\n       [-1.5267024 , -1.443986  , -1.3385689 , ...,  2.2696083 ,\n         1.052001  ,  0.19008926],\n       [-1.4665372 , -1.3981969 , -1.3556073 , ...,  2.4797661 ,\n         1.2735556 ,  0.37492895],\n       [-1.4568307 , -1.3827369 , -1.3737743 , ...,  2.5909438 ,\n         1.3897035 ,  0.5217823 ]], dtype=float32)va(south_north, west_east)float326.761 6.737 6.696 ... 4.513 4.954FieldType :104MemoryOrder :XYZdescription :destaggered v-wind componentunits :m s-1stagger :coordinates :XLONG XLAT XTIMEprojection :LambertConformal(stand_lon=117.0, moad_cen_lat=34.999996185302734, truelat1=10.0, truelat2=60.0, pole_lat=90.0, pole_lon=0.0)array([[ 6.7608423 ,  6.7373953 ,  6.695789  , ...,  0.50465465,\n         0.5188597 ,  0.44488   ],\n       [ 6.8158283 ,  6.7705107 ,  6.7063084 , ...,  0.52258515,\n         0.5037573 ,  0.3698668 ],\n       [ 6.8818154 ,  6.849372  ,  6.808259  , ...,  0.5032293 ,\n         0.40781948,  0.25407484],\n       ...,\n       [11.751095  , 11.72052   , 11.725382  , ...,  4.291622  ,\n         4.6571836 ,  5.0653286 ],\n       [11.7883    , 11.828529  , 11.768379  , ...,  4.2098756 ,\n         4.547501  ,  5.0387754 ],\n       [11.824713  , 11.87423   , 11.804605  , ...,  4.2327585 ,\n         4.5126877 ,  4.9536295 ]], dtype=float32)Indexes: (0)Attributes: (0)\n\n\n\ndef create_regridder(ds, ds_out):\n    # Assuming you have xesmf library installed\n    regridder = xe.Regridder(ds, ds_out, 'bilinear', unmapped_to_nan=True)\n    return regridder\n\nlat0=ds.lat.min()\nlat1=ds.lat.max()\nlon0=ds.lon.min()\nlon1=ds.lon.max()\n\ndx=0.01\nds_out = xr.Dataset(\n    {\n        \"lat\": (\"lat\", np.arange( lat0,lat1, dx)),\n        \"lon\": (\"lon\", np.arange(lon0,lon1, dx))\n    }\n)\nglobal_regridder=create_regridder(ds, ds_out)\nds_reg = global_regridder(ds)\n\n\nds_reg\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:   (lat: 349, lon: 377)\nCoordinates:\n    XTIME     float32 2.214e+04\n    Time      datetime64[ns] 2022-07-24T09:00:00\n  * lat       (lat) float64 34.39 34.4 34.41 34.42 ... 37.84 37.85 37.86 37.87\n  * lon       (lon) float64 115.1 115.1 115.1 115.1 ... 118.8 118.8 118.8 118.8\nData variables:\n    SWDOWN    (lat, lon) float32 nan nan nan nan nan nan ... nan nan nan nan nan\n    height    (lat, lon) float32 nan nan nan nan nan nan ... nan nan nan nan nan\n    pressure  (lat, lon) float32 nan nan nan nan nan nan ... nan nan nan nan nan\n    PBLH      (lat, lon) float32 nan nan nan nan nan nan ... nan nan nan nan nan\n    rh        (lat, lon) float32 nan nan nan nan nan nan ... nan nan nan nan nan\n    tk        (lat, lon) float32 nan nan nan nan nan nan ... nan nan nan nan nan\n    ua        (lat, lon) float32 nan nan nan nan nan nan ... nan nan nan nan nan\n    va        (lat, lon) float32 nan nan nan nan nan nan ... nan nan nan nan nan\nAttributes:\n    regrid_method:  bilinearxarray.DatasetDimensions:lat: 349lon: 377Coordinates: (4)XTIME()float322.214e+04array(22140., dtype=float32)Time()datetime64[ns]2022-07-24T09:00:00array('2022-07-24T09:00:00.000000000', dtype='datetime64[ns]')lat(lat)float6434.39 34.4 34.41 ... 37.86 37.87array([34.394245, 34.404245, 34.414245, ..., 37.854245, 37.864245, 37.874245])lon(lon)float64115.1 115.1 115.1 ... 118.8 118.8array([115.055908, 115.065908, 115.075908, ..., 118.795908, 118.805908,\n       118.815908])Data variables: (8)SWDOWN(lat, lon)float32nan nan nan nan ... nan nan nan nanarray([[      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       ...,\n       [      nan, 473.54553, 473.22717, ..., 411.5207 , 411.31317,\n        411.07455],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan]], dtype=float32)height(lat, lon)float32nan nan nan nan ... nan nan nan nanarray([[      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       ...,\n       [      nan, 141.83041, 141.51271, ..., 103.53228, 103.32455,\n        103.08293],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan]], dtype=float32)pressure(lat, lon)float32nan nan nan nan ... nan nan nan nanarray([[     nan,      nan,      nan, ...,      nan,      nan,      nan],\n       [     nan,      nan,      nan, ...,      nan,      nan,      nan],\n       [     nan,      nan,      nan, ...,      nan,      nan,      nan],\n       ...,\n       [     nan, 983.7209, 983.7855, ..., 990.8592, 990.8857, 990.9358],\n       [     nan,      nan,      nan, ...,      nan,      nan,      nan],\n       [     nan,      nan,      nan, ...,      nan,      nan,      nan]],\n      dtype=float32)PBLH(lat, lon)float32nan nan nan nan ... nan nan nan nanarray([[      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       ...,\n       [      nan, 2151.4187, 2115.7876, ..., 2661.102 , 1855.1188,\n        1647.1589],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan]], dtype=float32)rh(lat, lon)float32nan nan nan nan ... nan nan nan nanarray([[      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       ...,\n       [      nan, 22.177732, 22.22033 , ..., 38.20729 , 38.9287  ,\n        40.08072 ],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan]], dtype=float32)tk(lat, lon)float32nan nan nan nan ... nan nan nan nanarray([[      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       ...,\n       [      nan, 309.64307, 309.6303 , ..., 306.91708, 306.79648,\n        306.578  ],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan],\n       [      nan,       nan,       nan, ...,       nan,       nan,\n              nan]], dtype=float32)ua(lat, lon)float32nan nan nan nan ... nan nan nan nanarray([[        nan,         nan,         nan, ...,         nan,\n                nan,         nan],\n       [        nan,         nan,         nan, ...,         nan,\n                nan,         nan],\n       [        nan,         nan,         nan, ...,         nan,\n                nan,         nan],\n       ...,\n       [        nan, -1.4088483 , -1.3748637 , ...,  2.20299   ,\n         1.2579621 ,  0.54829586],\n       [        nan,         nan,         nan, ...,         nan,\n                nan,         nan],\n       [        nan,         nan,         nan, ...,         nan,\n                nan,         nan]], dtype=float32)va(lat, lon)float32nan nan nan nan ... nan nan nan nanarray([[       nan,        nan,        nan, ...,        nan,        nan,\n               nan],\n       [       nan,        nan,        nan, ...,        nan,        nan,\n               nan],\n       [       nan,        nan,        nan, ...,        nan,        nan,\n               nan],\n       ...,\n       [       nan, 11.833216 , 11.805824 , ...,  4.291342 ,  4.5591416,\n         4.944116 ],\n       [       nan,        nan,        nan, ...,        nan,        nan,\n               nan],\n       [       nan,        nan,        nan, ...,        nan,        nan,\n               nan]], dtype=float32)Indexes: (2)latPandasIndexPandasIndex(Float64Index([ 34.39424514770508, 34.404245147705076, 34.414245147705074,\n               34.42424514770507,  34.43424514770507,  34.44424514770507,\n              34.454245147705066, 34.464245147705064,  34.47424514770506,\n               34.48424514770506,\n              ...\n              37.784245147704404,   37.7942451477044,   37.8042451477044,\n                37.8142451477044, 37.824245147704396, 37.834245147704394,\n               37.84424514770439,  37.85424514770439,  37.86424514770439,\n              37.874245147704386],\n             dtype='float64', name='lat', length=349))lonPandasIndexPandasIndex(Float64Index([  115.055908203125,   115.065908203125, 115.07590820312501,\n              115.08590820312502, 115.09590820312502, 115.10590820312503,\n              115.11590820312503, 115.12590820312504, 115.13590820312504,\n              115.14590820312505,\n              ...\n              118.72590820312688, 118.73590820312688, 118.74590820312689,\n              118.75590820312689,  118.7659082031269,  118.7759082031269,\n              118.78590820312691, 118.79590820312691, 118.80590820312692,\n              118.81590820312692],\n             dtype='float64', name='lon', length=377))Attributes: (1)regrid_method :bilinear\n\n\n\nds_reg.ua.plot()\n\n\n\n\n\n\n\n\n\nds_reg.pressure.plot()",
    "crumbs": [
      "Home",
      "画图",
      "extract_wrf_区域多种变量"
    ]
  },
  {
    "objectID": "notebooks/extract_wrfv3.html",
    "href": "notebooks/extract_wrfv3.html",
    "title": "ustc",
    "section": "",
    "text": "import salem \nimport xarray as xr\nimport pandas as pd\nimport xesmf as xe\nimport matplotlib.pyplot as plt\nimport glob\nimport numpy as np\n\n\n#list(ds0.variables)\n\nk1=['swdown']\nk0=['height',\n 'pressure',\n 'pblh',\n 'rh',\n 't',\n 'u',\n 'v',\n #'psfc'\n   ]\n\n\n\n# 定义全局变量来存储 regridder\nglobal_regridder = None\n\ndef ext(l0, l1, lon0, lon1, lat0, lat1,bottom_top=3):\n    \n    ## 创建经纬度网格 1d\n    dx=0.1\n    ds_out = xr.Dataset(\n        {\n            \"lat\": (\"lat\", np.arange( lat0,lat1, dx)),\n            \"lon\": (\"lon\", np.arange(lon0,lon1, dx))\n        }\n    )\n\n    ## 创建转换器\n    #regridder = xe.Regridder(ds, ds_out, 'bilinear')\n    #ds_out = regridder(ds)\n    global global_regridder\n\n    print(l0, l1)\n    ds0 = xr.open_dataset(l0)\n    ds1 = xr.open_dataset(l1)\n\n    ds0 = ds0[k0].assign_coords(coords=dict(\n        lon=([\"south_north\", \"west_east\"], ds0.xlon.values),\n        lat=([\"south_north\", \"west_east\"], ds0.xlat.values),\n        Time=pd.to_datetime(ds0.Times.values.astype(str), format=\"%Y-%m-%d_%H:%M:%S\")\n    )).sel(bottom_top=bottom_top)\n\n    ds1 = ds1[k1].assign_coords(coords=dict(\n        lon=([\"south_north\", \"west_east\"], ds1.xlon.values),\n        lat=([\"south_north\", \"west_east\"], ds1.xlat.values),\n        Time=pd.to_datetime(ds1.Times.values.astype(str), format=\"%Y-%m-%d_%H:%M:%S\")\n    ))  # .sel(bottom_top=0)\n\n    ds = xr.merge([ds1, ds0])\n    ds1.close()\n    ds0.close()\n    del ds1, ds0\n\n    # 如果 global_regridder 为 None，创建新的 regridder，并存储为全局变量\n    if global_regridder is None:\n        global_regridder = create_regridder(ds, ds_out)\n\n    # 使用全局 regridder\n    ds_reg = global_regridder(ds)\n    return ds_reg.sel(lon=slice(lon0, lon1), lat=slice(lat0, lat1))\n\ndef create_regridder(ds, ds_out):\n    # Assuming you have xesmf library installed\n    regridder = xe.Regridder(ds, ds_out, 'bilinear')\n    return regridder\n\n\nlat00=36.20\nlon00=117.08\nlon0,lon1,lat0,lat1=lon00-2,lon00+2,lat00-2,lat00+2\n#119°08'~120°12’，北纬31°09'~32°04’\nlon0,lon1,lat0,lat1\n\n(115.08, 119.08, 34.2, 38.2)\n\n\n\nday1='2021M07'\nday2='2021M08'\n\nL0=glob.glob(f'/exports/d1/wrf_only_daily/fnl1.0/{day1}/*_physical_0.nc')\\\n            +glob.glob(f'/exports/d1/wrf_only_daily/fnl1.0/{day2}/*_physical_0.nc')\nL0.sort()\nL1=glob.glob(f'/exports/d1/wrf_only_daily/fnl1.0/{day1}/*_physical_1.nc')\\\n            +glob.glob(f'/exports/d1/wrf_only_daily/fnl1.0/{day2}/*_physical_1.nc')\nL1.sort()\nlen(L1),len(L0)\n\n(62, 62)\n\n\n\n#,bottom_top=3\n\nglobal_regridder = None\nDS=xr.concat([ext(l0,l1,lon0,lon1,lat0,lat1,bottom_top=3) for [l0,l1] in zip(L0[:40],L1[:40])],dim='Time')\n\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080900_physical_1.nc\n\n\n\nDS.to_netcdf('/exports/d4/xuejingkai/atmos/project2024/wrf_extract/liuchao/v2/taian_202107_202108.nc')\n\n\nlat00=39.3\nlon00=117.0\nlon0,lon1,lat0,lat1=lon00-2,lon00+2,lat00-2,lat00+2\n#119°08'~120°12’，北纬31°09'~32°04’\nlon0,lon1,lat0,lat1\n\n(115.0, 119.0, 37.3, 41.3)\n\n\n\nfrom datetime import datetime, timedelta\n\n# 初始日期\nstart_date = datetime.strptime('2022-07-01', '%Y-%m-%d')\n\n# 结束日期\nend_date = datetime.strptime('2022-10-31', '%Y-%m-%d')\n\n# 存储文件路径的列表\nL0 = []\nL1 = []\n# 循环获取每个月的文件路径\nwhile start_date &lt;= end_date:\n    current_month = start_date.strftime('%YM%m')\n    current_month_path = f'/exports/d1/wrf_only_daily/fnl1.0/{current_month}/*_physical_0.nc'\n    current_month_path2 = f'/exports/d1/wrf_only_daily/fnl1.0/{current_month}/*_physical_1.nc'\n    \n    # 使用glob获取文件路径并添加到列表中\n    current_month_files = glob.glob(current_month_path)\n    L0.extend(current_month_files)\n    \n    # 将日期递增一个月\n    current_month_files = glob.glob(current_month_path2)\n    L1.extend(current_month_files)    \n    \n    start_date += timedelta(days=32)\n\n\n# 对文件路径进行排序\nL0.sort()\n\nL1.sort()\n# 输出文件路径列表\nprint(len(L0))\n# 输出文件路径列表\nprint(len(L1))\n\n\n123\n123\n\n\n\n#,bottom_top=3\n\nglobal_regridder = None\nDS=xr.concat([ext(l0,l1,lon0,lon1,lat0,lat1,bottom_top=3) for [l0,l1] in zip(L0[:],L1[:])],dim='Time')\n\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022073000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022073000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022073100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022073100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022083000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022083000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022083100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022083100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022093000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022093000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103100_physical_1.nc\n\n\n\nDS.to_netcdf('/exports/d4/xuejingkai/atmos/project2024/wrf_extract/liuchao/v2/neimenggu_202207_202210.nc')\n\n\nimport pandas as pd\n\n# 原始数据\ndata = {\n    'Loc': ['泰安', '常州', '内蒙古棋盘井', '宿迁', '彭州', '泰安', '上海'],\n    'Start_Time': ['2021.7.10', '2021.11.13', '2022.7.26', '2022.1.12', '2022.10.14', '2021.7.10', '2021.11.1'],\n    'End_Time': ['2021.8.10', '2021.12.13', '2022.10.26', '2022.2.12', '2022.11.14', '2021.8.10', '2021.11.30'],\n    'Lat': [36.201944, 31.811111, 39.375556, 33.964472, 31.015, 35.95, 30.785],\n    'Lon': [117.086944, 119.973889, 107.012222, 118.269694, 103.945, 117.1175, 121.3225]\n}\n\n# 创建DataFrame\ndf = pd.DataFrame(data)\n\n# 转换为 datetime\ndf['Start_Time'] = pd.to_datetime(df['Start_Time'], format='%Y.%m.%d')\ndf['End_Time'] = pd.to_datetime(df['End_Time'], format='%Y.%m.%d')\n\n\n\ndf\n\n\n\n\n\n\n\n\nLoc\nStart_Time\nEnd_Time\nLat\nLon\n\n\n\n\n0\n泰安\n2021-07-10\n2021-08-10\n36.201944\n117.086944\n\n\n1\n常州\n2021-11-13\n2021-12-13\n31.811111\n119.973889\n\n\n2\n内蒙古棋盘井\n2022-07-26\n2022-10-26\n39.375556\n107.012222\n\n\n3\n宿迁\n2022-01-12\n2022-02-12\n33.964472\n118.269694\n\n\n4\n彭州\n2022-10-14\n2022-11-14\n31.015000\n103.945000\n\n\n5\n泰安\n2021-07-10\n2021-08-10\n35.950000\n117.117500\n\n\n6\n上海\n2021-11-01\n2021-11-30\n30.785000\n121.322500\n\n\n\n\n\n\n\n\nfor n in range(len(df)):\n    print(n)\n    \n    from datetime import datetime, timedelta\n\n    # 初始日期\n    start_date = df['Start_Time'][n]#datetime.strptime('2022-07-01', '%Y-%m-%d')\n\n    # 结束日期\n    end_date = df['End_Time'][n]#datetime.strptime('2022-10-31', '%Y-%m-%d')\n    print(start_date,end_date)\n    # 存储文件路径的列表\n    L0 = []\n    L1 = []\n    # 循环获取每个月的文件路径\n    for sdate in pd.date_range(start_date,end_date+timedelta(days=32),freq='1M'):\n        current_month = sdate.strftime('%YM%m')\n        current_month_path = f'/exports/d1/wrf_only_daily/fnl1.0/{current_month}/*_physical_0.nc'\n        current_month_path2 = f'/exports/d1/wrf_only_daily/fnl1.0/{current_month}/*_physical_1.nc'\n\n        # 使用glob获取文件路径并添加到列表中\n        current_month_files = glob.glob(current_month_path)\n        L0.extend(current_month_files)\n\n        # 将日期递增一个月\n        current_month_files = glob.glob(current_month_path2)\n        L1.extend(current_month_files)    \n\n        #start_date += timedelta(days=32)\n        \n\n\n    # 对文件路径进行排序\n    L0.sort()\n\n    L1.sort()\n    # 输出文件路径列表\n    print(len(L0))\n    # 输出文件路径列表\n    print(len(L1))\n    print(L1[0],L1[-1])\n    \n    print(df['Loc'][n])\n\n    #,bottom_top=3\n\n    global_regridder = None\n    DS=xr.concat([ext(l0,l1,lon0,lon1,lat0,lat1,bottom_top=3) for [l0,l1] in zip(L0[:],L1[:])],dim='Time')\n    DS.to_netcdf(f'/exports/d4/xuejingkai/atmos/project2024/wrf_extract/liuchao/v2/{df[\"Loc\"][n]}.nc')\n\n0\n2021-07-10 00:00:00 2021-08-10 00:00:00\n62\n62\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070100_physical_1.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083100_physical_1.nc\n泰安\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083100_physical_1.nc\n1\n2021-11-13 00:00:00 2021-12-13 00:00:00\n61\n61\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110100_physical_1.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123100_physical_1.nc\n常州\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021113000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021113000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123100_physical_1.nc\n2\n2022-07-26 00:00:00 2022-10-26 00:00:00\n123\n123\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070100_physical_1.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103100_physical_1.nc\n内蒙古棋盘井\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022070900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022071900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022072900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022073000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022073000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M07/2022073100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M07/2022073100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022080900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022081900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022082900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022083000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022083000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M08/2022083100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M08/2022083100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022090900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022091900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022092900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M09/2022093000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M09/2022093000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103100_physical_1.nc\n3\n2022-01-12 00:00:00 2022-02-12 00:00:00\n59\n59\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010100_physical_1.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022800_physical_1.nc\n宿迁\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022010900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022011900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022012900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022013000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022013000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M01/2022013100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M01/2022013100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022020900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022021900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M02/2022022800_physical_1.nc\n4\n2022-10-14 00:00:00 2022-11-14 00:00:00\n61\n61\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100100_physical_1.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022113000_physical_1.nc\n彭州\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022100900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022101900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022102900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M10/2022103100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022110900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022111900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022112900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2022M11/2022113000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2022M11/2022113000_physical_1.nc\n5\n2021-07-10 00:00:00 2021-08-10 00:00:00\n62\n62\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070100_physical_1.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083100_physical_1.nc\n泰安\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021070900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021071900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021072900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M07/2021073100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021080900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021081900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021082900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M08/2021083100_physical_1.nc\n6\n2021-11-01 00:00:00 2021-11-30 00:00:00\n61\n61\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110100_physical_1.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123100_physical_1.nc\n上海\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021110900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021111900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021112900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M11/2021113000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M11/2021113000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021120900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021121900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122100_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122200_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122200_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122300_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122300_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122400_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122400_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122500_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122500_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122600_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122600_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122700_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122700_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122800_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122800_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122900_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021122900_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123000_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123000_physical_1.nc\n/exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123100_physical_0.nc /exports/d1/wrf_only_daily/fnl1.0/2021M12/2021123100_physical_1.nc"
  },
  {
    "objectID": "notebooks/ustc_plot_Anhuimap.html",
    "href": "notebooks/ustc_plot_Anhuimap.html",
    "title": "ustc",
    "section": "",
    "text": "import os\nimport math\nimport glob\nimport datetime\nfrom PIL import Image\nfrom shapely.geometry import Polygon\nimport numpy as np\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nfrom matplotlib import font_manager as fm, rcParams\nimport matplotlib.colors\nimport matplotlib.patches as mpathes\nfrom matplotlib.path import Path\nfrom mpl_toolkits.basemap import Basemap\nimport shapefile\n\ndef cmap_own():\n    cmap_value = np.loadtxt('/exports/swj/OMI_results/result_compare/colormap_22.txt')\n    cmap = []\n    for i in range(cmap_value.shape[0]):\n        cmap.append((cmap_value[i, 0], cmap_value[i, 1], cmap_value[i, 2]))\n\n    return matplotlib.colors.LinearSegmentedColormap.from_list('test_cmap', cmap, N=cmap_value.shape[0])\n\ndef shp2clip(originfig,ax,shpfile,region):\n    sf = shapefile.Reader(shpfile)\n    vertices = []\n    codes = []\n    for shape_rec in sf.shapeRecords():\n        if shape_rec.record[0] in region:\n            pts = shape_rec.shape.points\n            prt = list(shape_rec.shape.parts) + [len(pts)]\n            for i in range(len(prt) - 1):\n                for j in range(prt[i], prt[i+1]):\n                    vertices.append((pts[j][0], pts[j][1]))\n                codes += [Path.MOVETO]\n                codes += [Path.LINETO] * (prt[i+1] - prt[i] -2)\n                codes += [Path.CLOSEPOLY]\n            clip = Path(vertices, codes)\n            clip = mpathes.PathPatch(clip, transform=ax.transData)\n    for contour in originfig.collections:\n        contour.set_clip_path(clip)\n    return clip\n\ndef wgs84toWebMercator(lon,lat):\n    x =  lon*20037508.342789/180\n    y =math.log(math.tan((90+lat)*math.pi/360))/(math.pi/180)\n    y = y *20037508.34789/180\n    return x,y\n\nfpath = os.path.join(matplotlib.get_data_path(),'/exports/WST/himawari/tif_test/Bold.ttf')\nprop = fm.FontProperties(fname=fpath)\n\nfname = os.path.split(fpath)[1]\n\nlat_begin=28.5\nlat_end=35\nlon_begin=114.5\nlon_end=120\n\nfig = plt.figure(figsize=((lon_end-lon_begin)*2, (lat_end-lat_begin)*2))\nax1 = fig.add_axes([0.1, 0.1, 0.7, 0.7])\nm = Basemap(projection='cyl', resolution='l', llcrnrlat=lat_begin, urcrnrlat=lat_end, llcrnrlon=lon_begin, urcrnrlon=lon_end)\n\nm.readshapefile(\"/exports/WST/himawari/tif_test/anhuishp/anhuinew/anhui\", 'NAME1', linewidth=1, drawbounds=True, color='gray')\n\nfor shapedict, state in zip(m.NAME1_info, m.NAME1):\n    short_name = shapedict['市']\n    point = np.array(state)\n    # x,y = center_geolocation(point)\n    # 获取城市图形的中点\n    ref_polygon = Polygon(point)\n    # get the x and y coordinate of the centroid\n    x, y = [float(ref_polygon.centroid.wkt[7:19]), float(ref_polygon.centroid.wkt[25:39])]\n    # x, y = np.mean(np.array(state), axis=0)\n    # if (short_name == '连云港市')|(short_name == '南通市'):\n    if point.shape[0] &lt; 100:\n        continue\n    else:\n        plt.annotate(short_name[0:-1].format(fname), xy=(x - 0.2, y - 0.1), fontproperties=prop, fontsize=12)\n\ncdict = ['#FFFFFF', '#C2C8E1', '#9BA9DC', '#4C9DF4', '#86D1F9', '#A7E5EF', '#FEFC59', '#FD7822', '#FC131F',\n         '#A3090E']\ncolormap = cmap_own()\ncolormap.set_bad(color='w', alpha=0.0)\n\nposition = fig.add_axes([0.88, 0.1, 0.03, 0.7])\n\nplt.tight_layout()\n\ntime_target=''\nplt.savefig('./tropomi_Anhui_HCHO_' + time_target + '.png', dpi=300)\nplt.close()\nstr_day = './tropomi_Anhui_HCHO_' + time_target + '.png'\nimg = Image.open(str_day)\nimg = img.convert('RGBA')\n\npng = Image.open('/satellite/exports1/zhaochunhui/normal/pic/logotest4.png')\npng = png.resize((int(img.size[0] * 0.7 -3) , int(img.size[0] * 0.07)), Image.ANTIALIAS)\nr, g, b, a = png.split()\npng_x = int(img.size[0] / 10) + 2\npng_y = int(img.size[1] * 0.9) - int(img.size[0] * 0.07)-5\nimg.paste(png, (png_x, png_y), mask=a)\nimg.save(str_day, quality=95)\n\n/tmp/ipykernel_326436/4040225787.py:90: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  plt.tight_layout()\n/tmp/ipykernel_326436/4040225787.py:100: DeprecationWarning: ANTIALIAS is deprecated and will be removed in Pillow 10 (2023-07-01). Use Resampling.LANCZOS instead.\n  png = png.resize((int(img.size[0] * 0.7 -3) , int(img.size[0] * 0.07)), Image.ANTIALIAS)\n\n\n\nfrom PIL import Image\nimport numpy as np\n\n\nimg_PIL = Image.open(str_day)#读取数据\nimg_PIL",
    "crumbs": [
      "Home",
      "画图",
      "plot_ustc_Anhui_map模板"
    ]
  },
  {
    "objectID": "notebooks/validation验证散点图R2.html",
    "href": "notebooks/validation验证散点图R2.html",
    "title": "ustc",
    "section": "",
    "text": "import proplot as plot\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nplot.rc['figure.facecolor'] = 'white'\n\n\nfrom matplotlib.image import imread\nfrom matplotlib.colors import LinearSegmentedColormap\n\ncmap2=plot.Colormap('turbo')\ncmap2\n\nll=['w',\n\n   '#c0e9ff', # 浅蓝色\n'#80d0ff', # 淡蓝色\n'#40b8ff', # 中蓝色\n\n   ]+cmap2.to_listed(15).colors[3:-2]\n\nmy_cmap = LinearSegmentedColormap.from_list('my_cmap', ll, N=256)\nmy_cmap\n\nmy_cmap  underbad over \n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nfrom matplotlib.colors import Normalize \nfrom scipy.interpolate import interpn\nfrom scipy.stats import pearsonr\nfrom sklearn.metrics import mean_absolute_percentage_error\n\n# 使用sklearn调用衡量线性回归的MSE 、 RMSE、 MAE、r2\nfrom math import sqrt\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\ndef density_scatter( x , y, ax = None, sort = True, bins = 20,percent=80,metawidth=0.4, **kwargs )   :\n    \"\"\"\n    Scatter plot colored by 2d histogram\n    \"\"\"\n    if ax is None :\n        fig , ax = plt.subplots()\n    data , x_e, y_e = np.histogram2d( x, y, bins = bins, density = True )\n    z = interpn( ( 0.5*(x_e[1:] + x_e[:-1]) , 0.5*(y_e[1:]+y_e[:-1]) ) , data , np.vstack([x,y]).T , method = \"splinef2d\", bounds_error = False)\n\n    #To be sure to plot all data\n    z[np.where(np.isnan(z))] = 0.0\n\n    # Sort the points by density, so that the densest points are plotted last\n    if sort :\n        idx = z.argsort()\n        x, y, z = x[idx], y[idx], z[idx]\n    \n    \n    m=ax.scatter( x, y, c=z, vmax=np.percentile(z, percent),vmin=0,**kwargs )#vmax=80%\n    \n    if 'cmap' in kwargs:\n    # 包含cmap参数\n        cmap = kwargs['cmap']\n    vmin = np.min(z)\n    vmax = np.max(z)\n    if 'vmin' in kwargs:\n    # 包含cmap参数\n        vmin = kwargs['vmin']    \n    if 'vmax' in kwargs:\n    # 包含cmap参数\n        vmax = kwargs['vmax'] \n        \n    norm = Normalize(vmin = vmin, vmax = vmax)\n    #cbar = ax.colorbar(cm.ScalarMappable(norm = norm,cmap=cmap))\n#     cbar=ax.colorbar(m,loc='r',lw=metawidth)\n#     cbar.ax.set_ylabel('Density')\n\n    return ax,m\n\n\n\nimport numpy as np\nfrom scipy.stats import pearsonr\nfrom sklearn.metrics import mean_absolute_percentage_error\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nfrom math import sqrt\n\n# 生成随机数据\nnp.random.seed(0)\nn_samples = 100\nx = np.random.rand(n_samples)*1e17\ny = 1 * x + np.random.randn(n_samples)*1e16  # y = 2x + 噪声\nindex=np.isnan(x)+np.isnan(y)\nx=x[~index]\ny=y[~index]\n\n# 计算指标\nR = pearsonr(x, y)[0]\nprint(\"Pearson correlation coefficient:\", R)\n\nmae = mean_absolute_error(x, y)\nprint(\"Mean Absolute Error:\", mae)\n\nmse = mean_squared_error(x, y)\nprint(\"Mean Squared Error:\", mse)\n\nrmse = sqrt(mse)\nprint(\"Root Mean Squared Error:\", rmse)\n\nr2 = r2_score(x, y)\nprint(\"R² Score:\", r2)\n\ndef mean_absolute_percentage_error(y_true, y_pred):\n    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n\nmape = mean_absolute_percentage_error(x, y)\nprint(\"Mean Absolute Percentage Error:\", mape)\n\nPearson correlation coefficient: 0.9445225692562869\nMean Absolute Error: 8623845994287560.0\nMean Squared Error: 1.0297617241074742e+32\nRoot Mean Squared Error: 1.0147717596127092e+16\nR² Score: 0.8761081822858403\nMean Absolute Percentage Error: 37.05495834074733\n\n\n\nx\n\narray([5.48813504e+16, 7.15189366e+16, 6.02763376e+16, 5.44883183e+16,\n       4.23654799e+16, 6.45894113e+16, 4.37587211e+16, 8.91773001e+16,\n       9.63662761e+16, 3.83441519e+16, 7.91725038e+16, 5.28894920e+16,\n       5.68044561e+16, 9.25596638e+16, 7.10360582e+15, 8.71292997e+15,\n       2.02183974e+15, 8.32619846e+16, 7.78156751e+16, 8.70012148e+16,\n       9.78618342e+16, 7.99158564e+16, 4.61479362e+16, 7.80529176e+16,\n       1.18274426e+16, 6.39921021e+16, 1.43353287e+16, 9.44668917e+16,\n       5.21848322e+16, 4.14661940e+16, 2.64555612e+16, 7.74233689e+16,\n       4.56150332e+16, 5.68433949e+16, 1.87898004e+15, 6.17635497e+16,\n       6.12095723e+16, 6.16933997e+16, 9.43748079e+16, 6.81820299e+16,\n       3.59507901e+16, 4.37031954e+16, 6.97631196e+16, 6.02254716e+15,\n       6.66766715e+16, 6.70637870e+16, 2.10382561e+16, 1.28926298e+16,\n       3.15428351e+16, 3.63710771e+16, 5.70196770e+16, 4.38601513e+16,\n       9.88373838e+16, 1.02044811e+16, 2.08876756e+16, 1.61309518e+16,\n       6.53108325e+16, 2.53291603e+16, 4.66310773e+16, 2.44425592e+16,\n       1.58969584e+16, 1.10375141e+16, 6.56329589e+16, 1.38182951e+16,\n       1.96582362e+16, 3.68725171e+16, 8.20993230e+16, 9.71012758e+15,\n       8.37944907e+16, 9.60984079e+15, 9.76459465e+16, 4.68651202e+16,\n       9.76761088e+16, 6.04845520e+16, 7.39263579e+16, 3.91877923e+15,\n       2.82806963e+16, 1.20196561e+16, 2.96140198e+16, 1.18727719e+16,\n       3.17983179e+16, 4.14262995e+16, 6.41474963e+15, 6.92472119e+16,\n       5.66601454e+16, 2.65389491e+16, 5.23248053e+16, 9.39405108e+15,\n       5.75946496e+16, 9.29296198e+16, 3.18568952e+16, 6.67410380e+16,\n       1.31797862e+16, 7.16327204e+16, 2.89406093e+16, 1.83191362e+16,\n       5.86512935e+16, 2.01075462e+15, 8.28940029e+16, 4.69547619e+14])\n\n\n\nfontsize=12\nmetawidth=0.5\n\nfig,axs=plot.subplots(refwidth=2.5,refheight=2.5)\n\nfig.format(abc=False,suptitlesize=20,xlim=(0,7e16),ylim=(0,7e16),xlabel='Predicted'\n           ,ylabel='Observed'\n           ,grid=False,xtickminor=False,ytickminor=False,metawidth=metawidth,labelsize=fontsize#,xlabelpad=10\n           ,xlocator=2e16,ylocator=2e16)\nax=axs[0]\nax,m=density_scatter(x[::1],y[::1] ,ax=ax, s=10,bins=(500, 500),cmap=my_cmap,alpha=1#'rainbow'\n              ,percent=80 )\n\n\n\n# 拟合线性回归线\nslope, intercept = np.polyfit(x,y, 1)\nx0=np.arange(0,10e16,1e16)\nregression_line = slope * x0 + intercept\n\n\n\n\n# 在图表中标注线性拟合的公式\nequation = f'Y = {slope:.2f}X + {intercept:.2e}'\n#ax.annotate(equation, xy=(x.mean(), y[::10].mean()), fontsize=10, color='r'\n#           ,bbox=dict(boxstyle=\"round,pad=0.3\", edgecolor=\"none\", facecolor=\"white\"))\n\n\nl2=ax.plot(x0, regression_line, color='red',label=equation,lw=1)\nax.plot(x0, x0, color='grey',lw=1,linestyle='--')\nax.legend([l2],loc='ul',frameon=False,prop=dict(size=fontsize))\nax.text(0.1,0.8,f'R={R:.2f}'\n        ,fontweight='bold'\n        ,fontsize=fontsize, transform=ax.transAxes)\nax.text(0.1,0.7,f'MAPE={mape:.2%}'\n        ,fontweight='bold'\n        ,fontsize=fontsize, transform=ax.transAxes)\n\n\nax.text(0.9,0.2,f'Daily'\n        ,fontweight='bold',color='grey',horizontalalignment='right',  # 水平居中\n        verticalalignment='center'  # 垂直居中\n        ,fontsize=fontsize, transform=ax.transAxes)\nax.yaxis.offsetText.set_fontsize(fontsize)\nax.xaxis.offsetText.set_fontsize(fontsize)\n\nax.spines['top'].set_visible(False)\nax.spines['right'].set_visible(False)\nfig.format(labelsize=fontsize,ticklabelsize=fontsize)\n\nfname='daily2022'\n# fig.savefig(f'./fig_val/{fname}.jpg',dpi=1000)\n# fig.savefig(f'./fig_val/{fname}.pdf',dpi=1000)\n# fig.savefig(f'./fig_val/{fname}.eps',dpi=1000)",
    "crumbs": [
      "Home",
      "画图",
      "plot_R2散点图"
    ]
  },
  {
    "objectID": "notebooks/国控站点提取.html",
    "href": "notebooks/国控站点提取.html",
    "title": "ustc",
    "section": "",
    "text": "%%time\nimport warnings\n\nimport proplot as plot\nimport sys\nimport glob\nimport cmaps\nimport pandas as pd\nimport numpy as np\nimport salem\nimport xarray as xr\n\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nfrom cartopy.mpl.ticker import LongitudeFormatter, LatitudeFormatter\nfrom matplotlib import ticker, cm\n\n\nfrom getchinamap.getchinamap import DownloadChmap\nchinamap_engine = DownloadChmap()#(adcode_file='/home/xuejingkai/data/down/AMap_adcode_citycode_20210406.csv')\nprovinces = chinamap_engine.download_country(target='省')\n\n\n\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nplot.rc['figure.facecolor'] = 'white'\n\n&lt;frozen importlib._bootstrap&gt;:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility. Expected 56 from C header, got 64 from PyObject\n\n\nCPU times: user 1.87 s, sys: 854 ms, total: 2.72 s\nWall time: 3.02 s\n\n\n\ntimedt=pd.date_range('20240101','20240102',freq='1D')\n\n\nL=[glob.glob(f'/exports/d4/xuejingkai/down/guokongzhandian/china_sites_{t.strftime(\"%Y%m%d\")}*')[0] for t in timedt]\n\n\n# #L=glob.glob(f'/exports/d4/xuejingkai/down/guokongzhandian/china_sites_{timedt[0].strftime(\"%Y%m%d\")}*')\n# L=[glob.glob(f'/exports/d4/xuejingkai/down/guokongzhandian/china_sites_{t.strftime(\"%Y%m%d\")}*')[0] for t in timedt]\n# L.sort()\n# sites=pd.read_excel('/exports/d4/xuejingkai/guokongzhan_nc/sites.xlsx')\n# sites.columns=['id','name','city','lon','lat','p']\n# sites['lon'] = sites['lon'].replace('-', np.nan)\n# sites.dropna(subset=['lon'], inplace=True)\n# sites['lat']=sites.lat.astype(float)\n\n# D=[]\n# times=[]\n# for l in L[:]:\n    \n#     df=pd.read_csv(l)\n#     # 将\"date\"列转换为字符串，并保留8个字符（年月日）\n#     #df[\"date\"] = df[\"date\"].astype(str).str[:8]\n\n#     # 将\"hour\"列转换为字符串，并保留2个字符（小时）\n#     #df[\"hour\"] = df[\"hour\"].astype(str).str.zfill(2)\n\n#     # 将\"date\"和\"hour\"列相加，并使用to_datetime函数将其转换为datetime格式\n#     df[\"date\"] = pd.to_datetime(df[\"date\"].astype(str).str[:8] + df[\"hour\"].astype(str).str.zfill(2), format=\"%Y%m%d%H\")\n#     for n in range(23,24):  #一般是23点的O3是当天的O3_8h_24h\n#         try:\n#             dfq=df.query(f\"type == 'O3_8h_24h' and hour == {df.hour.max()}\")\n#             timedt0=dfq['date']\n#             timedt0=pd.to_datetime(timedt0.values[0])\n#             d1=dfq.T.reset_index().iloc[3:]\n#             #d2.rename({'index':'h'})\n#             d1.columns=['id','value']\n#             d1['value']=d1.value.astype(float)\n#             d2=pd.merge(sites,d1,how='left')\n\n#             lat=d2.lat.values\n#             lon=d2.lon.values\n#             vcd=d2.value.values\n#             slat=d2.lat.values\n#             slon=d2.lon.values\n#             D.append(vcd)\n#             times.append(timedt0)\n#             print(l)\n#         except:\n#             pass\n\n\n#L=glob.glob(f'/exports/d4/xuejingkai/down/guokongzhandian/china_sites_{timedt[0].strftime(\"%Y%m%d\")}*')\nL=[glob.glob(f'/exports/d4/xuejingkai/down/guokongzhandian/china_sites_{t.strftime(\"%Y%m%d\")}*')[0] for t in timedt]\nL.sort()\nsites=pd.read_excel('/exports/d4/xuejingkai/guokongzhan_nc/sites.xlsx')\nsites.columns=['id','name','city','lon','lat','p']\nsites['lon'] = sites['lon'].replace('-', np.nan)\nsites.dropna(subset=['lon'], inplace=True)\nsites['lat']=sites.lat.astype(float)\n\nD=[]\ntimes=[]\nfor l in L[:]:\n    \n    df=pd.read_csv(l)\n    # 将\"date\"列转换为字符串，并保留8个字符（年月日）\n    #df[\"date\"] = df[\"date\"].astype(str).str[:8]\n\n    # 将\"hour\"列转换为字符串，并保留2个字符（小时）\n    #df[\"hour\"] = df[\"hour\"].astype(str).str.zfill(2)\n\n    # 将\"date\"和\"hour\"列相加，并使用to_datetime函数将其转换为datetime格式\n    df[\"date\"] = pd.to_datetime(df[\"date\"].astype(str).str[:8] + df[\"hour\"].astype(str).str.zfill(2), format=\"%Y%m%d%H\")\n    for n in range(0,24):  #一般是23点的O3是当天的O3_8h_24h\n        try:\n            dfq=df.query(f\"type == 'PM10' and hour == {n}\")\n            timedt0=dfq['date']\n            timedt0=pd.to_datetime(timedt0.values[0])\n            d1=dfq.T.reset_index().iloc[3:]\n            #d2.rename({'index':'h'})\n            d1.columns=['id','value']\n            d1['value']=d1.value.astype(float)\n            d2=pd.merge(sites,d1,how='left')\n\n            lat=d2.lat.values\n            lon=d2.lon.values\n            vcd=d2.value.values\n            slat=d2.lat.values\n            slon=d2.lon.values\n            D.append(vcd)\n            times.append(timedt0)\n            print(l,'  hour:',n)\n        except:\n            pass\n\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 0\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 1\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 2\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 3\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 4\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 5\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 6\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 7\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 8\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 9\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 10\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 11\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 12\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 13\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 14\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 15\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 16\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 17\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 18\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 19\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 20\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 21\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 22\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240101.csv   hour: 23\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 0\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 1\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 2\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 3\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 4\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 5\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 6\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 7\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 8\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 9\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 10\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 11\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 12\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 13\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 14\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 15\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 16\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 17\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 18\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 19\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 20\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 21\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 22\n/exports/d4/xuejingkai/down/guokongzhandian/china_sites_20240102.csv   hour: 23\n\n\n\ndss=xr.DataArray(np.array(D)\n                    ,\n        coords={\n            'time':times,#times,#timedt[n1:n2],\n            'point':np.arange(np.array(D).shape[1]),\n\n\n        },\n        dims=['time','point'])\n\n\nDss=dss.to_dataset(name='c')\n\nDss['lat'] = (('point',), d2.lat)\nDss['lon'] = (('point',), d2.lon)\n\n\nDss\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 48, point: 2016)\nCoordinates:\n  * time     (time) datetime64[ns] 2024-01-01 ... 2024-01-02T23:00:00\n  * point    (point) int64 0 1 2 3 4 5 6 ... 2009 2010 2011 2012 2013 2014 2015\nData variables:\n    c        (time, point) float64 49.0 28.0 72.0 52.0 ... 263.0 271.0 56.0\n    lat      (point) float64 39.88 40.29 39.93 39.89 ... 35.03 36.77 40.66 36.51\n    lon      (point) float64 116.4 116.2 116.4 116.4 ... 118.4 119.2 122.2 102.1xarray.DatasetDimensions:time: 48point: 2016Coordinates: (2)time(time)datetime64[ns]2024-01-01 ... 2024-01-02T23:00:00array(['2024-01-01T00:00:00.000000000', '2024-01-01T01:00:00.000000000',\n       '2024-01-01T02:00:00.000000000', '2024-01-01T03:00:00.000000000',\n       '2024-01-01T04:00:00.000000000', '2024-01-01T05:00:00.000000000',\n       '2024-01-01T06:00:00.000000000', '2024-01-01T07:00:00.000000000',\n       '2024-01-01T08:00:00.000000000', '2024-01-01T09:00:00.000000000',\n       '2024-01-01T10:00:00.000000000', '2024-01-01T11:00:00.000000000',\n       '2024-01-01T12:00:00.000000000', '2024-01-01T13:00:00.000000000',\n       '2024-01-01T14:00:00.000000000', '2024-01-01T15:00:00.000000000',\n       '2024-01-01T16:00:00.000000000', '2024-01-01T17:00:00.000000000',\n       '2024-01-01T18:00:00.000000000', '2024-01-01T19:00:00.000000000',\n       '2024-01-01T20:00:00.000000000', '2024-01-01T21:00:00.000000000',\n       '2024-01-01T22:00:00.000000000', '2024-01-01T23:00:00.000000000',\n       '2024-01-02T00:00:00.000000000', '2024-01-02T01:00:00.000000000',\n       '2024-01-02T02:00:00.000000000', '2024-01-02T03:00:00.000000000',\n       '2024-01-02T04:00:00.000000000', '2024-01-02T05:00:00.000000000',\n       '2024-01-02T06:00:00.000000000', '2024-01-02T07:00:00.000000000',\n       '2024-01-02T08:00:00.000000000', '2024-01-02T09:00:00.000000000',\n       '2024-01-02T10:00:00.000000000', '2024-01-02T11:00:00.000000000',\n       '2024-01-02T12:00:00.000000000', '2024-01-02T13:00:00.000000000',\n       '2024-01-02T14:00:00.000000000', '2024-01-02T15:00:00.000000000',\n       '2024-01-02T16:00:00.000000000', '2024-01-02T17:00:00.000000000',\n       '2024-01-02T18:00:00.000000000', '2024-01-02T19:00:00.000000000',\n       '2024-01-02T20:00:00.000000000', '2024-01-02T21:00:00.000000000',\n       '2024-01-02T22:00:00.000000000', '2024-01-02T23:00:00.000000000'],\n      dtype='datetime64[ns]')point(point)int640 1 2 3 4 ... 2012 2013 2014 2015array([   0,    1,    2, ..., 2013, 2014, 2015])Data variables: (3)c(time, point)float6449.0 28.0 72.0 ... 263.0 271.0 56.0array([[ 49.,  28.,  72., ...,  70.,  52.,  85.],\n       [ 76.,  26.,  85., ...,  73.,  58.,  87.],\n       [ 88.,  25.,  97., ...,  61.,  58.,  77.],\n       ...,\n       [ 52.,   7.,  17., ..., 259., 197.,  74.],\n       [ 14.,   7.,   9., ..., 261., 254.,  75.],\n       [  7.,   7.,   8., ..., 263., 271.,  56.]])lat(point)float6439.88 40.29 39.93 ... 40.66 36.51array([39.8784 , 40.2915 , 39.9289 , ..., 36.7699 , 40.66302, 36.5056 ])lon(point)float64116.4 116.2 116.4 ... 122.2 102.1array([116.3621, 116.2202, 116.4174, ..., 119.2041, 122.2469, 102.0738])Indexes: (2)timePandasIndexPandasIndex(DatetimeIndex(['2024-01-01 00:00:00', '2024-01-01 01:00:00',\n               '2024-01-01 02:00:00', '2024-01-01 03:00:00',\n               '2024-01-01 04:00:00', '2024-01-01 05:00:00',\n               '2024-01-01 06:00:00', '2024-01-01 07:00:00',\n               '2024-01-01 08:00:00', '2024-01-01 09:00:00',\n               '2024-01-01 10:00:00', '2024-01-01 11:00:00',\n               '2024-01-01 12:00:00', '2024-01-01 13:00:00',\n               '2024-01-01 14:00:00', '2024-01-01 15:00:00',\n               '2024-01-01 16:00:00', '2024-01-01 17:00:00',\n               '2024-01-01 18:00:00', '2024-01-01 19:00:00',\n               '2024-01-01 20:00:00', '2024-01-01 21:00:00',\n               '2024-01-01 22:00:00', '2024-01-01 23:00:00',\n               '2024-01-02 00:00:00', '2024-01-02 01:00:00',\n               '2024-01-02 02:00:00', '2024-01-02 03:00:00',\n               '2024-01-02 04:00:00', '2024-01-02 05:00:00',\n               '2024-01-02 06:00:00', '2024-01-02 07:00:00',\n               '2024-01-02 08:00:00', '2024-01-02 09:00:00',\n               '2024-01-02 10:00:00', '2024-01-02 11:00:00',\n               '2024-01-02 12:00:00', '2024-01-02 13:00:00',\n               '2024-01-02 14:00:00', '2024-01-02 15:00:00',\n               '2024-01-02 16:00:00', '2024-01-02 17:00:00',\n               '2024-01-02 18:00:00', '2024-01-02 19:00:00',\n               '2024-01-02 20:00:00', '2024-01-02 21:00:00',\n               '2024-01-02 22:00:00', '2024-01-02 23:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))pointPandasIndexPandasIndex(Int64Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n            ...\n            2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015],\n           dtype='int64', name='point', length=2016))Attributes: (0)\n\n\n\nplt.scatter(Dss.lon,Dss.lat,c=Dss.c[0])\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport xarray as xr\n\n# 定义经纬度范围\nlon = np.arange(80, 140,0.2)  # 例如从100°E到120°E，分成50个点\nlat = np.arange(20, 60, 0.2)    # 例如从20°N到40°N，分成30个点\n\n# 生成随机数据\ndata = np.full((len(lat), len(lon)),np.nan)  # 大小为 (lat, lon)\n\n# 创建一个 xarray DataArray\ndstemp = xr.DataArray(data, \n                          coords={'lat': lat, 'lon': lon}, \n                          dims=['lat', 'lon'], \n                          name='dstemp')\n\ndstemp \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'dstemp' (lat: 200, lon: 300)&gt;\narray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])\nCoordinates:\n  * lat      (lat) float64 20.0 20.2 20.4 20.6 20.8 ... 59.0 59.2 59.4 59.6 59.8\n  * lon      (lon) float64 80.0 80.2 80.4 80.6 80.8 ... 139.2 139.4 139.6 139.8xarray.DataArray'dstemp'lat: 200lon: 300nan nan nan nan nan nan nan nan ... nan nan nan nan nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       ...,\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])Coordinates: (2)lat(lat)float6420.0 20.2 20.4 ... 59.4 59.6 59.8array([20. , 20.2, 20.4, 20.6, 20.8, 21. , 21.2, 21.4, 21.6, 21.8, 22. , 22.2,\n       22.4, 22.6, 22.8, 23. , 23.2, 23.4, 23.6, 23.8, 24. , 24.2, 24.4, 24.6,\n       24.8, 25. , 25.2, 25.4, 25.6, 25.8, 26. , 26.2, 26.4, 26.6, 26.8, 27. ,\n       27.2, 27.4, 27.6, 27.8, 28. , 28.2, 28.4, 28.6, 28.8, 29. , 29.2, 29.4,\n       29.6, 29.8, 30. , 30.2, 30.4, 30.6, 30.8, 31. , 31.2, 31.4, 31.6, 31.8,\n       32. , 32.2, 32.4, 32.6, 32.8, 33. , 33.2, 33.4, 33.6, 33.8, 34. , 34.2,\n       34.4, 34.6, 34.8, 35. , 35.2, 35.4, 35.6, 35.8, 36. , 36.2, 36.4, 36.6,\n       36.8, 37. , 37.2, 37.4, 37.6, 37.8, 38. , 38.2, 38.4, 38.6, 38.8, 39. ,\n       39.2, 39.4, 39.6, 39.8, 40. , 40.2, 40.4, 40.6, 40.8, 41. , 41.2, 41.4,\n       41.6, 41.8, 42. , 42.2, 42.4, 42.6, 42.8, 43. , 43.2, 43.4, 43.6, 43.8,\n       44. , 44.2, 44.4, 44.6, 44.8, 45. , 45.2, 45.4, 45.6, 45.8, 46. , 46.2,\n       46.4, 46.6, 46.8, 47. , 47.2, 47.4, 47.6, 47.8, 48. , 48.2, 48.4, 48.6,\n       48.8, 49. , 49.2, 49.4, 49.6, 49.8, 50. , 50.2, 50.4, 50.6, 50.8, 51. ,\n       51.2, 51.4, 51.6, 51.8, 52. , 52.2, 52.4, 52.6, 52.8, 53. , 53.2, 53.4,\n       53.6, 53.8, 54. , 54.2, 54.4, 54.6, 54.8, 55. , 55.2, 55.4, 55.6, 55.8,\n       56. , 56.2, 56.4, 56.6, 56.8, 57. , 57.2, 57.4, 57.6, 57.8, 58. , 58.2,\n       58.4, 58.6, 58.8, 59. , 59.2, 59.4, 59.6, 59.8])lon(lon)float6480.0 80.2 80.4 ... 139.6 139.8array([ 80. ,  80.2,  80.4, ..., 139.4, 139.6, 139.8])Indexes: (2)latPandasIndexPandasIndex(Float64Index([              20.0,               20.2,               20.4,\n              20.599999999999998, 20.799999999999997, 20.999999999999996,\n              21.199999999999996, 21.399999999999995, 21.599999999999994,\n              21.799999999999994,\n              ...\n              57.999999999999865,  58.19999999999986, 58.399999999999864,\n              58.599999999999866,  58.79999999999986,  58.99999999999986,\n               59.19999999999986, 59.399999999999864,  59.59999999999986,\n              59.799999999999855],\n             dtype='float64', name='lat', length=200))lonPandasIndexPandasIndex(Float64Index([              80.0,               80.2,               80.4,\n               80.60000000000001,  80.80000000000001,  81.00000000000001,\n               81.20000000000002,  81.40000000000002,  81.60000000000002,\n               81.80000000000003,\n              ...\n              138.00000000000082, 138.20000000000084, 138.40000000000083,\n              138.60000000000082, 138.80000000000084, 139.00000000000085,\n              139.20000000000084, 139.40000000000083, 139.60000000000085,\n              139.80000000000086],\n             dtype='float64', name='lon', length=300))Attributes: (0)\n\n\n\n# 定义经纬度范围\nlon = np.arange(80, 140,0.2)  # 例如从100°E到120°E，分成50个点\nlat = np.arange(20, 60, 0.2)    # 例如从20°N到40°N，分成30个点\n\n# 定义时间维度，1 小时频率，从 2024-01-01 到 2024-01-05\ntime = pd.date_range('2024-01-01', '2024-01-02', freq='1H')\n\n# 生成随机数据，数据大小为 (时间, 纬度, 经度)\ndata = np.random.rand(len(time), len(lat), len(lon))\n\n# 创建一个 xarray DataArray，包含时间、纬度和经度\ndspred = xr.DataArray(data, \n                          coords={'time': time, 'lat': lat, 'lon': lon}, \n                          dims=['time', 'lat', 'lon'], \n                          name='random_data')\n\ndspred\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'random_data' (time: 25, lat: 200, lon: 300)&gt;\narray([[[0.58306895, 0.89689631, 0.9637159 , ..., 0.95514166,\n         0.56327264, 0.88194912],\n        [0.91348281, 0.81313667, 0.54342915, ..., 0.15515979,\n         0.99576906, 0.98561262],\n        [0.51785201, 0.12260406, 0.48123699, ..., 0.69087278,\n         0.07149597, 0.6591239 ],\n        ...,\n        [0.26463206, 0.48345431, 0.5136062 , ..., 0.15765791,\n         0.27837659, 0.96248451],\n        [0.45114488, 0.46012199, 0.94300064, ..., 0.52183468,\n         0.95946146, 0.93688643],\n        [0.23883549, 0.13021039, 0.91995392, ..., 0.96090563,\n         0.26284885, 0.33190806]],\n\n       [[0.60097816, 0.03713862, 0.25497976, ..., 0.16130851,\n         0.09510052, 0.66112642],\n        [0.4561247 , 0.03299753, 0.28301395, ..., 0.40416811,\n         0.62562097, 0.82505394],\n        [0.06357989, 0.47247211, 0.44253275, ..., 0.58168103,\n         0.20268006, 0.44255636],\n...\n        [0.73372581, 0.39568357, 0.05499724, ..., 0.3976773 ,\n         0.123971  , 0.15135663],\n        [0.72793464, 0.34616904, 0.88823592, ..., 0.01449293,\n         0.166857  , 0.47648525],\n        [0.18968513, 0.31701866, 0.0286512 , ..., 0.81983812,\n         0.95291693, 0.11557284]],\n\n       [[0.81904375, 0.44149411, 0.1457184 , ..., 0.96980313,\n         0.86516942, 0.21033497],\n        [0.27182581, 0.09328096, 0.57835196, ..., 0.84415926,\n         0.46826959, 0.43996525],\n        [0.63027449, 0.8039534 , 0.09105773, ..., 0.12110523,\n         0.87748747, 0.8329081 ],\n        ...,\n        [0.71169729, 0.28461979, 0.15759044, ..., 0.48455657,\n         0.2424354 , 0.83184816],\n        [0.13676196, 0.66317843, 0.04800316, ..., 0.50201232,\n         0.75635377, 0.79807323],\n        [0.6953923 , 0.12508861, 0.27339259, ..., 0.8658732 ,\n         0.06305083, 0.61345238]]])\nCoordinates:\n  * time     (time) datetime64[ns] 2024-01-01 2024-01-01T01:00:00 ... 2024-01-02\n  * lat      (lat) float64 20.0 20.2 20.4 20.6 20.8 ... 59.0 59.2 59.4 59.6 59.8\n  * lon      (lon) float64 80.0 80.2 80.4 80.6 80.8 ... 139.2 139.4 139.6 139.8xarray.DataArray'random_data'time: 25lat: 200lon: 3000.5831 0.8969 0.9637 0.2948 0.4112 ... 0.2626 0.8659 0.06305 0.6135array([[[0.58306895, 0.89689631, 0.9637159 , ..., 0.95514166,\n         0.56327264, 0.88194912],\n        [0.91348281, 0.81313667, 0.54342915, ..., 0.15515979,\n         0.99576906, 0.98561262],\n        [0.51785201, 0.12260406, 0.48123699, ..., 0.69087278,\n         0.07149597, 0.6591239 ],\n        ...,\n        [0.26463206, 0.48345431, 0.5136062 , ..., 0.15765791,\n         0.27837659, 0.96248451],\n        [0.45114488, 0.46012199, 0.94300064, ..., 0.52183468,\n         0.95946146, 0.93688643],\n        [0.23883549, 0.13021039, 0.91995392, ..., 0.96090563,\n         0.26284885, 0.33190806]],\n\n       [[0.60097816, 0.03713862, 0.25497976, ..., 0.16130851,\n         0.09510052, 0.66112642],\n        [0.4561247 , 0.03299753, 0.28301395, ..., 0.40416811,\n         0.62562097, 0.82505394],\n        [0.06357989, 0.47247211, 0.44253275, ..., 0.58168103,\n         0.20268006, 0.44255636],\n...\n        [0.73372581, 0.39568357, 0.05499724, ..., 0.3976773 ,\n         0.123971  , 0.15135663],\n        [0.72793464, 0.34616904, 0.88823592, ..., 0.01449293,\n         0.166857  , 0.47648525],\n        [0.18968513, 0.31701866, 0.0286512 , ..., 0.81983812,\n         0.95291693, 0.11557284]],\n\n       [[0.81904375, 0.44149411, 0.1457184 , ..., 0.96980313,\n         0.86516942, 0.21033497],\n        [0.27182581, 0.09328096, 0.57835196, ..., 0.84415926,\n         0.46826959, 0.43996525],\n        [0.63027449, 0.8039534 , 0.09105773, ..., 0.12110523,\n         0.87748747, 0.8329081 ],\n        ...,\n        [0.71169729, 0.28461979, 0.15759044, ..., 0.48455657,\n         0.2424354 , 0.83184816],\n        [0.13676196, 0.66317843, 0.04800316, ..., 0.50201232,\n         0.75635377, 0.79807323],\n        [0.6953923 , 0.12508861, 0.27339259, ..., 0.8658732 ,\n         0.06305083, 0.61345238]]])Coordinates: (3)time(time)datetime64[ns]2024-01-01 ... 2024-01-02array(['2024-01-01T00:00:00.000000000', '2024-01-01T01:00:00.000000000',\n       '2024-01-01T02:00:00.000000000', '2024-01-01T03:00:00.000000000',\n       '2024-01-01T04:00:00.000000000', '2024-01-01T05:00:00.000000000',\n       '2024-01-01T06:00:00.000000000', '2024-01-01T07:00:00.000000000',\n       '2024-01-01T08:00:00.000000000', '2024-01-01T09:00:00.000000000',\n       '2024-01-01T10:00:00.000000000', '2024-01-01T11:00:00.000000000',\n       '2024-01-01T12:00:00.000000000', '2024-01-01T13:00:00.000000000',\n       '2024-01-01T14:00:00.000000000', '2024-01-01T15:00:00.000000000',\n       '2024-01-01T16:00:00.000000000', '2024-01-01T17:00:00.000000000',\n       '2024-01-01T18:00:00.000000000', '2024-01-01T19:00:00.000000000',\n       '2024-01-01T20:00:00.000000000', '2024-01-01T21:00:00.000000000',\n       '2024-01-01T22:00:00.000000000', '2024-01-01T23:00:00.000000000',\n       '2024-01-02T00:00:00.000000000'], dtype='datetime64[ns]')lat(lat)float6420.0 20.2 20.4 ... 59.4 59.6 59.8array([20. , 20.2, 20.4, 20.6, 20.8, 21. , 21.2, 21.4, 21.6, 21.8, 22. , 22.2,\n       22.4, 22.6, 22.8, 23. , 23.2, 23.4, 23.6, 23.8, 24. , 24.2, 24.4, 24.6,\n       24.8, 25. , 25.2, 25.4, 25.6, 25.8, 26. , 26.2, 26.4, 26.6, 26.8, 27. ,\n       27.2, 27.4, 27.6, 27.8, 28. , 28.2, 28.4, 28.6, 28.8, 29. , 29.2, 29.4,\n       29.6, 29.8, 30. , 30.2, 30.4, 30.6, 30.8, 31. , 31.2, 31.4, 31.6, 31.8,\n       32. , 32.2, 32.4, 32.6, 32.8, 33. , 33.2, 33.4, 33.6, 33.8, 34. , 34.2,\n       34.4, 34.6, 34.8, 35. , 35.2, 35.4, 35.6, 35.8, 36. , 36.2, 36.4, 36.6,\n       36.8, 37. , 37.2, 37.4, 37.6, 37.8, 38. , 38.2, 38.4, 38.6, 38.8, 39. ,\n       39.2, 39.4, 39.6, 39.8, 40. , 40.2, 40.4, 40.6, 40.8, 41. , 41.2, 41.4,\n       41.6, 41.8, 42. , 42.2, 42.4, 42.6, 42.8, 43. , 43.2, 43.4, 43.6, 43.8,\n       44. , 44.2, 44.4, 44.6, 44.8, 45. , 45.2, 45.4, 45.6, 45.8, 46. , 46.2,\n       46.4, 46.6, 46.8, 47. , 47.2, 47.4, 47.6, 47.8, 48. , 48.2, 48.4, 48.6,\n       48.8, 49. , 49.2, 49.4, 49.6, 49.8, 50. , 50.2, 50.4, 50.6, 50.8, 51. ,\n       51.2, 51.4, 51.6, 51.8, 52. , 52.2, 52.4, 52.6, 52.8, 53. , 53.2, 53.4,\n       53.6, 53.8, 54. , 54.2, 54.4, 54.6, 54.8, 55. , 55.2, 55.4, 55.6, 55.8,\n       56. , 56.2, 56.4, 56.6, 56.8, 57. , 57.2, 57.4, 57.6, 57.8, 58. , 58.2,\n       58.4, 58.6, 58.8, 59. , 59.2, 59.4, 59.6, 59.8])lon(lon)float6480.0 80.2 80.4 ... 139.6 139.8array([ 80. ,  80.2,  80.4, ..., 139.4, 139.6, 139.8])Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['2024-01-01 00:00:00', '2024-01-01 01:00:00',\n               '2024-01-01 02:00:00', '2024-01-01 03:00:00',\n               '2024-01-01 04:00:00', '2024-01-01 05:00:00',\n               '2024-01-01 06:00:00', '2024-01-01 07:00:00',\n               '2024-01-01 08:00:00', '2024-01-01 09:00:00',\n               '2024-01-01 10:00:00', '2024-01-01 11:00:00',\n               '2024-01-01 12:00:00', '2024-01-01 13:00:00',\n               '2024-01-01 14:00:00', '2024-01-01 15:00:00',\n               '2024-01-01 16:00:00', '2024-01-01 17:00:00',\n               '2024-01-01 18:00:00', '2024-01-01 19:00:00',\n               '2024-01-01 20:00:00', '2024-01-01 21:00:00',\n               '2024-01-01 22:00:00', '2024-01-01 23:00:00',\n               '2024-01-02 00:00:00'],\n              dtype='datetime64[ns]', name='time', freq='H'))latPandasIndexPandasIndex(Float64Index([              20.0,               20.2,               20.4,\n              20.599999999999998, 20.799999999999997, 20.999999999999996,\n              21.199999999999996, 21.399999999999995, 21.599999999999994,\n              21.799999999999994,\n              ...\n              57.999999999999865,  58.19999999999986, 58.399999999999864,\n              58.599999999999866,  58.79999999999986,  58.99999999999986,\n               59.19999999999986, 59.399999999999864,  59.59999999999986,\n              59.799999999999855],\n             dtype='float64', name='lat', length=200))lonPandasIndexPandasIndex(Float64Index([              80.0,               80.2,               80.4,\n               80.60000000000001,  80.80000000000001,  81.00000000000001,\n               81.20000000000002,  81.40000000000002,  81.60000000000002,\n               81.80000000000003,\n              ...\n              138.00000000000082, 138.20000000000084, 138.40000000000083,\n              138.60000000000082, 138.80000000000084, 139.00000000000085,\n              139.20000000000084, 139.40000000000083, 139.60000000000085,\n              139.80000000000086],\n             dtype='float64', name='lon', length=300))Attributes: (0)\n\n\n\ndspred[0].plot()\n\n\n\n\n\n\n\n\n\nDss\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 48, point: 2016)\nCoordinates:\n  * time     (time) datetime64[ns] 2024-01-01 ... 2024-01-02T23:00:00\n  * point    (point) int64 0 1 2 3 4 5 6 ... 2009 2010 2011 2012 2013 2014 2015\nData variables:\n    c        (time, point) float64 49.0 28.0 72.0 52.0 ... 263.0 271.0 56.0\n    lat      (point) float64 39.88 40.29 39.93 39.89 ... 35.03 36.77 40.66 36.51\n    lon      (point) float64 116.4 116.2 116.4 116.4 ... 118.4 119.2 122.2 102.1xarray.DatasetDimensions:time: 48point: 2016Coordinates: (2)time(time)datetime64[ns]2024-01-01 ... 2024-01-02T23:00:00array(['2024-01-01T00:00:00.000000000', '2024-01-01T01:00:00.000000000',\n       '2024-01-01T02:00:00.000000000', '2024-01-01T03:00:00.000000000',\n       '2024-01-01T04:00:00.000000000', '2024-01-01T05:00:00.000000000',\n       '2024-01-01T06:00:00.000000000', '2024-01-01T07:00:00.000000000',\n       '2024-01-01T08:00:00.000000000', '2024-01-01T09:00:00.000000000',\n       '2024-01-01T10:00:00.000000000', '2024-01-01T11:00:00.000000000',\n       '2024-01-01T12:00:00.000000000', '2024-01-01T13:00:00.000000000',\n       '2024-01-01T14:00:00.000000000', '2024-01-01T15:00:00.000000000',\n       '2024-01-01T16:00:00.000000000', '2024-01-01T17:00:00.000000000',\n       '2024-01-01T18:00:00.000000000', '2024-01-01T19:00:00.000000000',\n       '2024-01-01T20:00:00.000000000', '2024-01-01T21:00:00.000000000',\n       '2024-01-01T22:00:00.000000000', '2024-01-01T23:00:00.000000000',\n       '2024-01-02T00:00:00.000000000', '2024-01-02T01:00:00.000000000',\n       '2024-01-02T02:00:00.000000000', '2024-01-02T03:00:00.000000000',\n       '2024-01-02T04:00:00.000000000', '2024-01-02T05:00:00.000000000',\n       '2024-01-02T06:00:00.000000000', '2024-01-02T07:00:00.000000000',\n       '2024-01-02T08:00:00.000000000', '2024-01-02T09:00:00.000000000',\n       '2024-01-02T10:00:00.000000000', '2024-01-02T11:00:00.000000000',\n       '2024-01-02T12:00:00.000000000', '2024-01-02T13:00:00.000000000',\n       '2024-01-02T14:00:00.000000000', '2024-01-02T15:00:00.000000000',\n       '2024-01-02T16:00:00.000000000', '2024-01-02T17:00:00.000000000',\n       '2024-01-02T18:00:00.000000000', '2024-01-02T19:00:00.000000000',\n       '2024-01-02T20:00:00.000000000', '2024-01-02T21:00:00.000000000',\n       '2024-01-02T22:00:00.000000000', '2024-01-02T23:00:00.000000000'],\n      dtype='datetime64[ns]')point(point)int640 1 2 3 4 ... 2012 2013 2014 2015array([   0,    1,    2, ..., 2013, 2014, 2015])Data variables: (3)c(time, point)float6449.0 28.0 72.0 ... 263.0 271.0 56.0array([[ 49.,  28.,  72., ...,  70.,  52.,  85.],\n       [ 76.,  26.,  85., ...,  73.,  58.,  87.],\n       [ 88.,  25.,  97., ...,  61.,  58.,  77.],\n       ...,\n       [ 52.,   7.,  17., ..., 259., 197.,  74.],\n       [ 14.,   7.,   9., ..., 261., 254.,  75.],\n       [  7.,   7.,   8., ..., 263., 271.,  56.]])lat(point)float6439.88 40.29 39.93 ... 40.66 36.51array([39.8784 , 40.2915 , 39.9289 , ..., 36.7699 , 40.66302, 36.5056 ])lon(point)float64116.4 116.2 116.4 ... 122.2 102.1array([116.3621, 116.2202, 116.4174, ..., 119.2041, 122.2469, 102.0738])Indexes: (2)timePandasIndexPandasIndex(DatetimeIndex(['2024-01-01 00:00:00', '2024-01-01 01:00:00',\n               '2024-01-01 02:00:00', '2024-01-01 03:00:00',\n               '2024-01-01 04:00:00', '2024-01-01 05:00:00',\n               '2024-01-01 06:00:00', '2024-01-01 07:00:00',\n               '2024-01-01 08:00:00', '2024-01-01 09:00:00',\n               '2024-01-01 10:00:00', '2024-01-01 11:00:00',\n               '2024-01-01 12:00:00', '2024-01-01 13:00:00',\n               '2024-01-01 14:00:00', '2024-01-01 15:00:00',\n               '2024-01-01 16:00:00', '2024-01-01 17:00:00',\n               '2024-01-01 18:00:00', '2024-01-01 19:00:00',\n               '2024-01-01 20:00:00', '2024-01-01 21:00:00',\n               '2024-01-01 22:00:00', '2024-01-01 23:00:00',\n               '2024-01-02 00:00:00', '2024-01-02 01:00:00',\n               '2024-01-02 02:00:00', '2024-01-02 03:00:00',\n               '2024-01-02 04:00:00', '2024-01-02 05:00:00',\n               '2024-01-02 06:00:00', '2024-01-02 07:00:00',\n               '2024-01-02 08:00:00', '2024-01-02 09:00:00',\n               '2024-01-02 10:00:00', '2024-01-02 11:00:00',\n               '2024-01-02 12:00:00', '2024-01-02 13:00:00',\n               '2024-01-02 14:00:00', '2024-01-02 15:00:00',\n               '2024-01-02 16:00:00', '2024-01-02 17:00:00',\n               '2024-01-02 18:00:00', '2024-01-02 19:00:00',\n               '2024-01-02 20:00:00', '2024-01-02 21:00:00',\n               '2024-01-02 22:00:00', '2024-01-02 23:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))pointPandasIndexPandasIndex(Int64Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n            ...\n            2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015],\n           dtype='int64', name='point', length=2016))Attributes: (0)\n\n\n\n\n\ndspred2=dspred.interp(lon=Dss.lon,lat=Dss.lat)  # 插值到散点\n\n\ndspred2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'random_data' (time: 25, point: 2016)&gt;\narray([[0.62706763, 0.6120858 , 0.66311303, ..., 0.12978111, 0.24529915,\n        0.34702168],\n       [0.34604329, 0.6057089 , 0.3785711 , ..., 0.03758578, 0.08869047,\n        0.4865718 ],\n       [0.40922173, 0.22748688, 0.48177678, ..., 0.03548094, 0.75778547,\n        0.55117093],\n       ...,\n       [0.55115732, 0.28780374, 0.36137095, ..., 0.75458898, 0.33194457,\n        0.58270155],\n       [0.67286847, 0.85610214, 0.7794916 , ..., 0.7485051 , 0.67988874,\n        0.41310721],\n       [0.93577394, 0.36431177, 0.91268267, ..., 0.16016135, 0.62392264,\n        0.40960265]])\nCoordinates:\n  * time     (time) datetime64[ns] 2024-01-01 2024-01-01T01:00:00 ... 2024-01-02\n    lon      (point) float64 116.4 116.2 116.4 116.4 ... 118.4 119.2 122.2 102.1\n    lat      (point) float64 39.88 40.29 39.93 39.89 ... 35.03 36.77 40.66 36.51\n  * point    (point) int64 0 1 2 3 4 5 6 ... 2009 2010 2011 2012 2013 2014 2015xarray.DataArray'random_data'time: 25point: 20160.6271 0.6121 0.6631 0.6764 0.6604 ... 0.5152 0.1602 0.6239 0.4096array([[0.62706763, 0.6120858 , 0.66311303, ..., 0.12978111, 0.24529915,\n        0.34702168],\n       [0.34604329, 0.6057089 , 0.3785711 , ..., 0.03758578, 0.08869047,\n        0.4865718 ],\n       [0.40922173, 0.22748688, 0.48177678, ..., 0.03548094, 0.75778547,\n        0.55117093],\n       ...,\n       [0.55115732, 0.28780374, 0.36137095, ..., 0.75458898, 0.33194457,\n        0.58270155],\n       [0.67286847, 0.85610214, 0.7794916 , ..., 0.7485051 , 0.67988874,\n        0.41310721],\n       [0.93577394, 0.36431177, 0.91268267, ..., 0.16016135, 0.62392264,\n        0.40960265]])Coordinates: (4)time(time)datetime64[ns]2024-01-01 ... 2024-01-02array(['2024-01-01T00:00:00.000000000', '2024-01-01T01:00:00.000000000',\n       '2024-01-01T02:00:00.000000000', '2024-01-01T03:00:00.000000000',\n       '2024-01-01T04:00:00.000000000', '2024-01-01T05:00:00.000000000',\n       '2024-01-01T06:00:00.000000000', '2024-01-01T07:00:00.000000000',\n       '2024-01-01T08:00:00.000000000', '2024-01-01T09:00:00.000000000',\n       '2024-01-01T10:00:00.000000000', '2024-01-01T11:00:00.000000000',\n       '2024-01-01T12:00:00.000000000', '2024-01-01T13:00:00.000000000',\n       '2024-01-01T14:00:00.000000000', '2024-01-01T15:00:00.000000000',\n       '2024-01-01T16:00:00.000000000', '2024-01-01T17:00:00.000000000',\n       '2024-01-01T18:00:00.000000000', '2024-01-01T19:00:00.000000000',\n       '2024-01-01T20:00:00.000000000', '2024-01-01T21:00:00.000000000',\n       '2024-01-01T22:00:00.000000000', '2024-01-01T23:00:00.000000000',\n       '2024-01-02T00:00:00.000000000'], dtype='datetime64[ns]')lon(point)float64116.4 116.2 116.4 ... 122.2 102.1array([116.3621, 116.2202, 116.4174, ..., 119.2041, 122.2469, 102.0738])lat(point)float6439.88 40.29 39.93 ... 40.66 36.51array([39.8784 , 40.2915 , 39.9289 , ..., 36.7699 , 40.66302, 36.5056 ])point(point)int640 1 2 3 4 ... 2012 2013 2014 2015array([   0,    1,    2, ..., 2013, 2014, 2015])Indexes: (2)timePandasIndexPandasIndex(DatetimeIndex(['2024-01-01 00:00:00', '2024-01-01 01:00:00',\n               '2024-01-01 02:00:00', '2024-01-01 03:00:00',\n               '2024-01-01 04:00:00', '2024-01-01 05:00:00',\n               '2024-01-01 06:00:00', '2024-01-01 07:00:00',\n               '2024-01-01 08:00:00', '2024-01-01 09:00:00',\n               '2024-01-01 10:00:00', '2024-01-01 11:00:00',\n               '2024-01-01 12:00:00', '2024-01-01 13:00:00',\n               '2024-01-01 14:00:00', '2024-01-01 15:00:00',\n               '2024-01-01 16:00:00', '2024-01-01 17:00:00',\n               '2024-01-01 18:00:00', '2024-01-01 19:00:00',\n               '2024-01-01 20:00:00', '2024-01-01 21:00:00',\n               '2024-01-01 22:00:00', '2024-01-01 23:00:00',\n               '2024-01-02 00:00:00'],\n              dtype='datetime64[ns]', name='time', freq='H'))pointPandasIndexPandasIndex(Int64Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n            ...\n            2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015],\n           dtype='int64', name='point', length=2016))Attributes: (0)\n\n\n\nDss.c\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'c' (time: 48, point: 2016)&gt;\narray([[ 49.,  28.,  72., ...,  70.,  52.,  85.],\n       [ 76.,  26.,  85., ...,  73.,  58.,  87.],\n       [ 88.,  25.,  97., ...,  61.,  58.,  77.],\n       ...,\n       [ 52.,   7.,  17., ..., 259., 197.,  74.],\n       [ 14.,   7.,   9., ..., 261., 254.,  75.],\n       [  7.,   7.,   8., ..., 263., 271.,  56.]])\nCoordinates:\n  * time     (time) datetime64[ns] 2024-01-01 ... 2024-01-02T23:00:00\n  * point    (point) int64 0 1 2 3 4 5 6 ... 2009 2010 2011 2012 2013 2014 2015xarray.DataArray'c'time: 48point: 201649.0 28.0 72.0 52.0 nan 47.0 ... 92.0 278.0 227.0 263.0 271.0 56.0array([[ 49.,  28.,  72., ...,  70.,  52.,  85.],\n       [ 76.,  26.,  85., ...,  73.,  58.,  87.],\n       [ 88.,  25.,  97., ...,  61.,  58.,  77.],\n       ...,\n       [ 52.,   7.,  17., ..., 259., 197.,  74.],\n       [ 14.,   7.,   9., ..., 261., 254.,  75.],\n       [  7.,   7.,   8., ..., 263., 271.,  56.]])Coordinates: (2)time(time)datetime64[ns]2024-01-01 ... 2024-01-02T23:00:00array(['2024-01-01T00:00:00.000000000', '2024-01-01T01:00:00.000000000',\n       '2024-01-01T02:00:00.000000000', '2024-01-01T03:00:00.000000000',\n       '2024-01-01T04:00:00.000000000', '2024-01-01T05:00:00.000000000',\n       '2024-01-01T06:00:00.000000000', '2024-01-01T07:00:00.000000000',\n       '2024-01-01T08:00:00.000000000', '2024-01-01T09:00:00.000000000',\n       '2024-01-01T10:00:00.000000000', '2024-01-01T11:00:00.000000000',\n       '2024-01-01T12:00:00.000000000', '2024-01-01T13:00:00.000000000',\n       '2024-01-01T14:00:00.000000000', '2024-01-01T15:00:00.000000000',\n       '2024-01-01T16:00:00.000000000', '2024-01-01T17:00:00.000000000',\n       '2024-01-01T18:00:00.000000000', '2024-01-01T19:00:00.000000000',\n       '2024-01-01T20:00:00.000000000', '2024-01-01T21:00:00.000000000',\n       '2024-01-01T22:00:00.000000000', '2024-01-01T23:00:00.000000000',\n       '2024-01-02T00:00:00.000000000', '2024-01-02T01:00:00.000000000',\n       '2024-01-02T02:00:00.000000000', '2024-01-02T03:00:00.000000000',\n       '2024-01-02T04:00:00.000000000', '2024-01-02T05:00:00.000000000',\n       '2024-01-02T06:00:00.000000000', '2024-01-02T07:00:00.000000000',\n       '2024-01-02T08:00:00.000000000', '2024-01-02T09:00:00.000000000',\n       '2024-01-02T10:00:00.000000000', '2024-01-02T11:00:00.000000000',\n       '2024-01-02T12:00:00.000000000', '2024-01-02T13:00:00.000000000',\n       '2024-01-02T14:00:00.000000000', '2024-01-02T15:00:00.000000000',\n       '2024-01-02T16:00:00.000000000', '2024-01-02T17:00:00.000000000',\n       '2024-01-02T18:00:00.000000000', '2024-01-02T19:00:00.000000000',\n       '2024-01-02T20:00:00.000000000', '2024-01-02T21:00:00.000000000',\n       '2024-01-02T22:00:00.000000000', '2024-01-02T23:00:00.000000000'],\n      dtype='datetime64[ns]')point(point)int640 1 2 3 4 ... 2012 2013 2014 2015array([   0,    1,    2, ..., 2013, 2014, 2015])Indexes: (2)timePandasIndexPandasIndex(DatetimeIndex(['2024-01-01 00:00:00', '2024-01-01 01:00:00',\n               '2024-01-01 02:00:00', '2024-01-01 03:00:00',\n               '2024-01-01 04:00:00', '2024-01-01 05:00:00',\n               '2024-01-01 06:00:00', '2024-01-01 07:00:00',\n               '2024-01-01 08:00:00', '2024-01-01 09:00:00',\n               '2024-01-01 10:00:00', '2024-01-01 11:00:00',\n               '2024-01-01 12:00:00', '2024-01-01 13:00:00',\n               '2024-01-01 14:00:00', '2024-01-01 15:00:00',\n               '2024-01-01 16:00:00', '2024-01-01 17:00:00',\n               '2024-01-01 18:00:00', '2024-01-01 19:00:00',\n               '2024-01-01 20:00:00', '2024-01-01 21:00:00',\n               '2024-01-01 22:00:00', '2024-01-01 23:00:00',\n               '2024-01-02 00:00:00', '2024-01-02 01:00:00',\n               '2024-01-02 02:00:00', '2024-01-02 03:00:00',\n               '2024-01-02 04:00:00', '2024-01-02 05:00:00',\n               '2024-01-02 06:00:00', '2024-01-02 07:00:00',\n               '2024-01-02 08:00:00', '2024-01-02 09:00:00',\n               '2024-01-02 10:00:00', '2024-01-02 11:00:00',\n               '2024-01-02 12:00:00', '2024-01-02 13:00:00',\n               '2024-01-02 14:00:00', '2024-01-02 15:00:00',\n               '2024-01-02 16:00:00', '2024-01-02 17:00:00',\n               '2024-01-02 18:00:00', '2024-01-02 19:00:00',\n               '2024-01-02 20:00:00', '2024-01-02 21:00:00',\n               '2024-01-02 22:00:00', '2024-01-02 23:00:00'],\n              dtype='datetime64[ns]', name='time', freq=None))pointPandasIndexPandasIndex(Int64Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,\n            ...\n            2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015],\n           dtype='int64', name='point', length=2016))Attributes: (0)\n\n\n\n#Dss.c和dspred2可以相互比较了",
    "crumbs": [
      "Home",
      "画图",
      "plot_国控点"
    ]
  },
  {
    "objectID": "notebooks/处理era5_1.html",
    "href": "notebooks/处理era5_1.html",
    "title": "merge expver",
    "section": "",
    "text": "import xarray as xr\nimport numpy as np\nimport metpy\n\n\nds1=xr.open_dataset('./adaptor.mars.internal-1721825370.8378592-32443-11-79729393-fafb-4b34-ae85-546b9c6773a3.nc')\n\n&lt;frozen importlib._bootstrap&gt;:228: RuntimeWarning: scipy._lib.messagestream.MessageStream size changed, may indicate binary incompatibility. Expected 56 from C header, got 64 from PyObject\n\n\n\nds2=xr.open_dataset('./adaptor.mars.internal-1721826023.7730846-24972-10-78f3e92c-574b-41ea-8df7-9a7453f5b00c.nc')\n\n\nds1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (longitude: 1, latitude: 5, expver: 2, time: 4813)\nCoordinates:\n  * longitude  (longitude) float32 11.3\n  * latitude   (latitude) float32 23.0 22.75 22.5 22.25 22.0\n  * expver     (expver) int32 1 5\n  * time       (time) datetime64[ns] 2024-01-01 ... 2024-07-19T12:00:00\nData variables:\n    u10        (time, expver, latitude, longitude) float32 ...\n    v10        (time, expver, latitude, longitude) float32 ...\n    d2m        (time, expver, latitude, longitude) float32 ...\n    t2m        (time, expver, latitude, longitude) float32 ...\n    blh        (time, expver, latitude, longitude) float32 ...\n    sp         (time, expver, latitude, longitude) float32 ...\nAttributes:\n    Conventions:  CF-1.6\n    history:      2024-07-24 12:51:01 GMT by grib_to_netcdf-2.28.1: /opt/ecmw...xarray.DatasetDimensions:longitude: 1latitude: 5expver: 2time: 4813Coordinates: (4)longitude(longitude)float3211.3units :degrees_eastlong_name :longitudearray([11.3], dtype=float32)latitude(latitude)float3223.0 22.75 22.5 22.25 22.0units :degrees_northlong_name :latitudearray([23.  , 22.75, 22.5 , 22.25, 22.  ], dtype=float32)expver(expver)int321 5long_name :expverarray([1, 5], dtype=int32)time(time)datetime64[ns]2024-01-01 ... 2024-07-19T12:00:00long_name :timearray(['2024-01-01T00:00:00.000000000', '2024-01-01T01:00:00.000000000',\n       '2024-01-01T02:00:00.000000000', ..., '2024-07-19T10:00:00.000000000',\n       '2024-07-19T11:00:00.000000000', '2024-07-19T12:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (6)u10(time, expver, latitude, longitude)float32...units :m s**-1long_name :10 metre U wind component[48130 values with dtype=float32]v10(time, expver, latitude, longitude)float32...units :m s**-1long_name :10 metre V wind component[48130 values with dtype=float32]d2m(time, expver, latitude, longitude)float32...units :Klong_name :2 metre dewpoint temperature[48130 values with dtype=float32]t2m(time, expver, latitude, longitude)float32...units :Klong_name :2 metre temperature[48130 values with dtype=float32]blh(time, expver, latitude, longitude)float32...units :mlong_name :Boundary layer height[48130 values with dtype=float32]sp(time, expver, latitude, longitude)float32...units :Palong_name :Surface pressurestandard_name :surface_air_pressure[48130 values with dtype=float32]Indexes: (4)longitudePandasIndexPandasIndex(Float64Index([11.300000190734863], dtype='float64', name='longitude'))latitudePandasIndexPandasIndex(Float64Index([23.0, 22.75, 22.5, 22.25, 22.0], dtype='float64', name='latitude'))expverPandasIndexPandasIndex(Int64Index([1, 5], dtype='int64', name='expver'))timePandasIndexPandasIndex(DatetimeIndex(['2024-01-01 00:00:00', '2024-01-01 01:00:00',\n               '2024-01-01 02:00:00', '2024-01-01 03:00:00',\n               '2024-01-01 04:00:00', '2024-01-01 05:00:00',\n               '2024-01-01 06:00:00', '2024-01-01 07:00:00',\n               '2024-01-01 08:00:00', '2024-01-01 09:00:00',\n               ...\n               '2024-07-19 03:00:00', '2024-07-19 04:00:00',\n               '2024-07-19 05:00:00', '2024-07-19 06:00:00',\n               '2024-07-19 07:00:00', '2024-07-19 08:00:00',\n               '2024-07-19 09:00:00', '2024-07-19 10:00:00',\n               '2024-07-19 11:00:00', '2024-07-19 12:00:00'],\n              dtype='datetime64[ns]', name='time', length=4813, freq=None))Attributes: (2)Conventions :CF-1.6history :2024-07-24 12:51:01 GMT by grib_to_netcdf-2.28.1: /opt/ecmwf/mars-client/bin/grib_to_netcdf -S param -o /cache/data9/adaptor.mars.internal-1721825370.8378592-32443-11-79729393-fafb-4b34-ae85-546b9c6773a3.nc /cache/tmp/79729393-fafb-4b34-ae85-546b9c6773a3-adaptor.mars.internal-1721823858.2437456-32443-8-tmp.grib\n\n\nIn the downloaded file, an extra dimenions ‘expver’ indicates which data is ERA5 (expver = 1) and which is ERA5T (expver = 5).\n\nmerge expver\n\nds1.sel(expver=1).combine_first(\n    ds1.sel(expver=5)).u10[:,0,0].plot()\n\n\n\n\n\n\n\n\n\n\nmerge datasets\n\nds=xr.concat([ds2,ds1.sel(expver=1).combine_first(ds1.sel(expver=5))],dim='time')\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:    (longitude: 1, latitude: 5, time: 7021)\nCoordinates:\n  * longitude  (longitude) float32 11.3\n  * latitude   (latitude) float32 23.0 22.75 22.5 22.25 22.0\n  * time       (time) datetime64[ns] 2023-10-01 ... 2024-07-19T12:00:00\nData variables:\n    u10        (time, latitude, longitude) float32 0.5762 0.3478 ... -3.992\n    v10        (time, latitude, longitude) float32 -0.008012 0.6799 ... -0.599\n    d2m        (time, latitude, longitude) float32 280.4 282.1 ... 275.9 276.3\n    t2m        (time, latitude, longitude) float32 298.7 299.2 ... 313.7 314.4\n    blh        (time, latitude, longitude) float32 37.09 37.42 ... 3.264e+03\n    sp         (time, latitude, longitude) float32 9.151e+04 ... 9.432e+04\nAttributes:\n    Conventions:  CF-1.6\n    history:      2024-07-24 13:00:51 GMT by grib_to_netcdf-2.28.1: /opt/ecmw...xarray.DatasetDimensions:longitude: 1latitude: 5time: 7021Coordinates: (3)longitude(longitude)float3211.3units :degrees_eastlong_name :longitudearray([11.3], dtype=float32)latitude(latitude)float3223.0 22.75 22.5 22.25 22.0units :degrees_northlong_name :latitudearray([23.  , 22.75, 22.5 , 22.25, 22.  ], dtype=float32)time(time)datetime64[ns]2023-10-01 ... 2024-07-19T12:00:00long_name :timearray(['2023-10-01T00:00:00.000000000', '2023-10-01T01:00:00.000000000',\n       '2023-10-01T02:00:00.000000000', ..., '2024-07-19T10:00:00.000000000',\n       '2024-07-19T11:00:00.000000000', '2024-07-19T12:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (6)u10(time, latitude, longitude)float320.5762 0.3478 ... -3.703 -3.992units :m s**-1long_name :10 metre U wind componentarray([[[ 0.5762317 ],\n        [ 0.34781122],\n        [-0.65483904],\n        [-1.5313942 ],\n        [-2.2019408 ]],\n\n       [[ 0.19387078],\n        [-0.11672664],\n        [-1.0258809 ],\n        [-1.8213909 ],\n        [-2.3780668 ]],\n\n       [[-0.14842033],\n        [-0.7143779 ],\n        [-1.6006674 ],\n        [-2.2030725 ],\n        [-2.4756377 ]],\n\n       ...,\n\n       [[-5.334929  ],\n        [-5.3540263 ],\n        [-5.4346967 ],\n        [-5.7474995 ],\n        [-6.2381063 ]],\n\n       [[-4.766945  ],\n        [-4.614495  ],\n        [-4.6059337 ],\n        [-4.7985544 ],\n        [-5.175235  ]],\n\n       [[-3.8634386 ],\n        [-3.6553426 ],\n        [-3.5960746 ],\n        [-3.7034154 ],\n        [-3.9915233 ]]], dtype=float32)v10(time, latitude, longitude)float32-0.008012 0.6799 ... -1.144 -0.599units :m s**-1long_name :10 metre V wind componentarray([[[-0.00801206],\n        [ 0.67993   ],\n        [ 1.3455884 ],\n        [ 1.8715856 ],\n        [ 1.777787  ]],\n\n       [[ 0.87996435],\n        [ 1.2339113 ],\n        [ 1.0535693 ],\n        [ 0.91261244],\n        [ 0.81492734]],\n\n       [[ 1.4225447 ],\n        [ 1.2932479 ],\n        [ 0.53430915],\n        [-0.0784905 ],\n        [-0.21737432]],\n\n       ...,\n\n       [[-2.012134  ],\n        [-2.0731575 ],\n        [-1.9233148 ],\n        [-1.5309758 ],\n        [-1.103173  ]],\n\n       [[-1.7977536 ],\n        [-1.7856126 ],\n        [-1.5900822 ],\n        [-1.1217039 ],\n        [-0.5974138 ]],\n\n       [[-1.8597353 ],\n        [-1.7939196 ],\n        [-1.6146834 ],\n        [-1.1437488 ],\n        [-0.5990112 ]]], dtype=float32)d2m(time, latitude, longitude)float32280.4 282.1 282.4 ... 275.9 276.3units :Klong_name :2 metre dewpoint temperaturearray([[[280.395  ],\n        [282.08807],\n        [282.4298 ],\n        [282.85086],\n        [284.27777]],\n\n       [[280.6202 ],\n        [282.53442],\n        [283.0057 ],\n        [283.75027],\n        [285.00555]],\n\n       [[281.3893 ],\n        [282.97968],\n        [283.35788],\n        [284.3872 ],\n        [285.75644]],\n\n       ...,\n\n       [[277.22418],\n        [276.94614],\n        [276.4418 ],\n        [276.07935],\n        [276.1115 ]],\n\n       [[277.3735 ],\n        [276.99728],\n        [276.39874],\n        [275.9863 ],\n        [276.22754]],\n\n       [[277.15927],\n        [276.81058],\n        [276.26602],\n        [275.90472],\n        [276.25052]]], dtype=float32)t2m(time, latitude, longitude)float32298.7 299.2 299.2 ... 313.7 314.4units :Klong_name :2 metre temperaturearray([[[298.72977],\n        [299.24097],\n        [299.24045],\n        [299.77246],\n        [300.38678]],\n\n       [[298.6312 ],\n        [298.48944],\n        [298.5133 ],\n        [298.71353],\n        [299.41473]],\n\n       [[297.66473],\n        [298.5621 ],\n        [299.17184],\n        [298.61343],\n        [298.53568]],\n\n       ...,\n\n       [[309.37787],\n        [310.48618],\n        [311.38345],\n        [312.00085],\n        [312.60135]],\n\n       [[310.1493 ],\n        [311.29767],\n        [312.28137],\n        [313.00336],\n        [313.6721 ]],\n\n       [[310.654  ],\n        [311.83054],\n        [312.8637 ],\n        [313.66333],\n        [314.39154]]], dtype=float32)blh(time, latitude, longitude)float3237.09 37.42 ... 3.13e+03 3.264e+03units :mlong_name :Boundary layer heightarray([[[  37.093872],\n        [  37.420776],\n        [  58.831787],\n        [ 160.65674 ],\n        [ 294.7345  ]],\n\n       [[  28.703735],\n        [  36.222168],\n        [  45.048096],\n        [  98.8208  ],\n        [ 189.04138 ]],\n\n       [[  35.56836 ],\n        [  37.58423 ],\n        [  39.436523],\n        [  67.00391 ],\n        [ 112.65906 ]],\n\n       ...,\n\n       [[1478.6124  ],\n        [1430.8221  ],\n        [1373.2434  ],\n        [1339.1897  ],\n        [1321.5872  ]],\n\n       [[2261.0244  ],\n        [2107.125   ],\n        [1818.6558  ],\n        [1783.615   ],\n        [1723.7332  ]],\n\n       [[2596.626   ],\n        [2766.2363  ],\n        [2939.466   ],\n        [3129.8047  ],\n        [3264.2097  ]]], dtype=float32)sp(time, latitude, longitude)float329.151e+04 9.266e+04 ... 9.432e+04units :Palong_name :Surface pressurestandard_name :surface_air_pressurearray([[[91511.375],\n        [92662.016],\n        [93639.21 ],\n        [94234.086],\n        [94889.77 ]],\n\n       [[91444.28 ],\n        [92594.84 ],\n        [93568.29 ],\n        [94160.016],\n        [94813.17 ]],\n\n       [[91405.41 ],\n        [92553.98 ],\n        [93527.19 ],\n        [94121.91 ],\n        [94778.36 ]],\n\n       ...,\n\n       [[91210.9  ],\n        [92306.22 ],\n        [93236.95 ],\n        [93802.09 ],\n        [94434.75 ]],\n\n       [[91169.945],\n        [92263.125],\n        [93191.12 ],\n        [93754.29 ],\n        [94384.54 ]],\n\n       [[91109.71 ],\n        [92201.09 ],\n        [93126.86 ],\n        [93687.8  ],\n        [94315.055]]], dtype=float32)Indexes: (3)longitudePandasIndexPandasIndex(Float64Index([11.300000190734863], dtype='float64', name='longitude'))latitudePandasIndexPandasIndex(Float64Index([23.0, 22.75, 22.5, 22.25, 22.0], dtype='float64', name='latitude'))timePandasIndexPandasIndex(DatetimeIndex(['2023-10-01 00:00:00', '2023-10-01 01:00:00',\n               '2023-10-01 02:00:00', '2023-10-01 03:00:00',\n               '2023-10-01 04:00:00', '2023-10-01 05:00:00',\n               '2023-10-01 06:00:00', '2023-10-01 07:00:00',\n               '2023-10-01 08:00:00', '2023-10-01 09:00:00',\n               ...\n               '2024-07-19 03:00:00', '2024-07-19 04:00:00',\n               '2024-07-19 05:00:00', '2024-07-19 06:00:00',\n               '2024-07-19 07:00:00', '2024-07-19 08:00:00',\n               '2024-07-19 09:00:00', '2024-07-19 10:00:00',\n               '2024-07-19 11:00:00', '2024-07-19 12:00:00'],\n              dtype='datetime64[ns]', name='time', length=7021, freq=None))Attributes: (2)Conventions :CF-1.6history :2024-07-24 13:00:51 GMT by grib_to_netcdf-2.28.1: /opt/ecmwf/mars-client/bin/grib_to_netcdf -S param -o /cache/data9/adaptor.mars.internal-1721826023.7730846-24972-10-78f3e92c-574b-41ea-8df7-9a7453f5b00c.nc /cache/tmp/78f3e92c-574b-41ea-8df7-9a7453f5b00c-adaptor.mars.internal-1721825475.849445-24972-7-tmp.grib\n\n\n\n\ncalculate RH\n\nfrom metpy.calc import relative_humidity_from_dewpoint\nfrom metpy.units import units\nrelative_humidity_from_dewpoint(25 * units.degC, 12 * units.degC).to('percent')\n\n44.24847652208983 percent\n\n\n\nunits.degK\n\nkelvin\n\n\n\nrelative_humidity_from_dewpoint(ds.t2m*units.degK, ds.d2m*units.degK)[:,0].plot()#.to('percent')",
    "crumbs": [
      "Home",
      "数据处理",
      "era5数据"
    ]
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "ustc",
    "section": "",
    "text": "Markdown 目录： [TOC]\nMarkdown 标题： # 这是 H1 ## 这是 H2 ### 这是 H3\nMarkdown 列表： - 列表项目 1. 列表项目\n斜体或_斜体_ 粗体 加粗斜体 删除线\nMarkdown 插入链接： 链接文字\nMarkdown 插入图片： \nMarkdown 插入代码块： python     #!/usr/bin/python3     print(\"Hello, World!\");\nMarkdown 引用： &gt; 引用内容\nMarkdown 分割线：\n\nMarkdown 换行： \nMarkdown 段首缩进：   or   表示一个半角的空格   or   表示一个全角的空格    两个全角的空格（用的比较多）   or   不断行的空白格\n#!/usr/bin/env python3\nprint(\"Hello, World!\");",
    "crumbs": [
      "Home",
      "基础",
      "这是 H1"
    ]
  }
]